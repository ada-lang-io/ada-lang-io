"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1414],{7011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"style-guide/s5/03","title":"5.3 Types","description":"In addition to determining the possible values for variables and subtype","source":"@site/docs/style-guide/s5/03.mdx","sourceDirName":"style-guide/s5","slug":"/style-guide/s5/03","permalink":"/docs/style-guide/s5/03","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"5.3 Types"},"sidebar":"styleGuideSidebar","previous":{"title":"5.2 Parameter Lists","permalink":"/docs/style-guide/s5/02"},"next":{"title":"5.4 Data Structures","permalink":"/docs/style-guide/s5/04"}}');var i=t(4848),s=t(8453);const r={title:"5.3 Types"},o=void 0,l={},d=[{value:"Derived Types and Subtypes",id:"derived-types-and-subtypes",level:3},{value:"guideline",id:"guideline",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale",level:4},{value:"notes",id:"notes",level:4},{value:"Anonymous Types",id:"anonymous-types",level:3},{value:"guideline",id:"guideline-1",level:4},{value:"example",id:"example-1",level:4},{value:"rationale",id:"rationale-1",level:4},{value:"notes",id:"notes-1",level:4},{value:"exceptions",id:"exceptions",level:4},{value:"Private Types",id:"private-types",level:3},{value:"guideline",id:"guideline-2",level:4},{value:"example",id:"example-2",level:4},{value:"with Ada.Finalization;\npackage Packet_Telemetry is\ntype Frame_Header is new Ada.Finalization.Controlled with private;\ntype Frame_Data   is private;\ntype Frame_Codes  is (Main_Bus_Voltage, Transmitter_1_Power);\n...\nprivate\ntype Frame_Header is new Ada.Finalization.Controlled with\nrecord\n...\nend record;\n-- override adjustment and finalization to get correct assignment semantics\nprocedure Adjust (Object : in out Frame_Header);\nprocedure Finalize (Object : in out Frame_Header);\ntype Frame_Data is\nrecord\n...\nend record;\n...\nend Packet_Telemetry;",id:"with-adafinalizationpackage-packet_telemetry-istype-frame_header-is-new-adafinalizationcontrolled-with-privatetype-frame_data---is-privatetype-frame_codes--is-main_bus_voltage-transmitter_1_powerprivatetype-frame_header-is-new-adafinalizationcontrolled-withrecordend-record---override-adjustment-and-finalization-to-get-correct-assignment-semanticsprocedure-adjust-object--in-out-frame_headerprocedure-finalize-object--in-out-frame_headertype-frame_data-isrecordend-recordend-packet_telemetry",level:2},{value:"rationale",id:"rationale-2",level:4},{value:"notes",id:"notes-2",level:4},{value:"Subprogram Access Types",id:"subprogram-access-types",level:3},{value:"guideline",id:"guideline-3",level:4},{value:"example",id:"example-3",level:4},{value:"rationale",id:"rationale-3",level:4}];function c(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In addition to determining the possible values for variables and subtype\nnames, type distinctions can be very valuable aids in developing safe,\nreadable, and understandable code. Types clarify the structure of your\ndata and can limit or restrict the operations performed on that data."}),"\n",(0,i.jsx)("i",{children:(0,i.jsx)(n.p,{children:'"Keeping types distinct has been found to be a very powerful means of detecting logical mistakes\nwhen a program is written and to give valuable assistance whenever the program is being\nsubsequently maintained" (Pyle 1985 )'})}),"\n",(0,i.jsx)(n.p,{children:"Take advantage of Ada's strong typing capability in the form of subtypes, derived\ntypes, task types, protected types, private types, and limited private types."}),"\n",(0,i.jsx)(n.p,{children:"The guidelines encourage much code to be written to ensure strong\ntyping. While it might appear that there would be execution penalties\nfor this amount of code, this is usually not the case. In contrast to\nother conventional languages, Ada has a less direct relationship between\nthe amount of code that is written and the size of the resulting\nexecutable program. Most of the strong type checking is performed at\ncompilation time rather than execution time, so the size of the\nexecutable code is not greatly affected."}),"\n",(0,i.jsx)(n.p,{children:"For guidelines on specific kinds of data structures and tagged types,\nsee 9.2.1 , respectively."}),"\n",(0,i.jsx)(n.h3,{id:"derived-types-and-subtypes",children:"Derived Types and Subtypes"}),"\n",(0,i.jsx)(n.h4,{id:"guideline",children:"guideline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use existing types as building blocks by deriving new types from\nthem."}),"\n",(0,i.jsx)(n.li,{children:"Use range constraints on subtypes."}),"\n",(0,i.jsx)(n.li,{children:"Define new types, especially derived types, to include the largest\nset of possible values, including boundary values."}),"\n",(0,i.jsx)(n.li,{children:"Constrain the ranges of derived types with subtypes, excluding\nboundary values."}),"\n",(0,i.jsx)(n.li,{children:"Use type derivation rather than type extension when there are no\nmeaningful components to add to the type."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"example"}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"Table"})," is a building block for the creation of new types:"]}),"\n",(0,i.jsx)(n.p,{children:"type Table is\nrecord\nCount : List_Size  := Empty;\nList  : Entry_List := Empty_List;\nend record;\ntype Telephone_Directory  is new Table;\ntype Department_Inventory is new Table;"}),"\n",(0,i.jsx)(n.p,{children:"The following are distinct types that cannot be intermixed in operations\nthat are not programmed explicitly to use them both:"}),"\n",(0,i.jsx)(n.p,{children:"type Dollars is new Number;\ntype Cents   is new Number;"}),"\n",(0,i.jsxs)(n.p,{children:["Below, ",(0,i.jsx)(n.code,{children:"Source_Tail"})," has a value outside the range of ",(0,i.jsx)(n.code,{children:"Listing_Paper"}),"\nwhen the line is empty. All the indices can be mixed in expressions, as\nlong as the results fall within the correct subtypes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:"    type Columns          is range First_Column - 1 .. Listing_Width + 1;\n\n    subtype Listing_Paper is Columns range First_Column .. Listing_Width;\n    subtype Dumb_Terminal is Columns range First_Column .. Dumb_Terminal_Width;\n    type Line             is array (Columns range <>) of Bytes;\n    subtype Listing_Line  is Line (Listing_Paper);\n    subtype Terminal_Line is Line (Dumb_Terminal);\n    Source_Tail : Columns       := Columns'First;\n    Source      : Listing_Line;\n    Destination : Terminal_Line;\n    ...\n    Destination(Destination'First .. Source_Tail - Destination'Last) :=\n          Source(Columns'Succ(Destination'Last) .. Source_Tail);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"rationale",children:"rationale"}),"\n",(0,i.jsx)(n.p,{children:"The name of a derived type can make clear its intended use and avoid\nproliferation of similar type definitions. Objects of two derived types,\neven though derived from the same type, cannot be mixed in operations\nunless such operations are supplied explicitly or one is converted to\nthe other explicitly. This prohibition is an enforcement of strong\ntyping."}),"\n",(0,i.jsx)(n.p,{children:"Define new types, derived types, and subtypes cautiously and\ndeliberately. The concepts of subtype and derived type are not\nequivalent, but they can be used to advantage in concert. A subtype\nlimits the range of possible values for a type but does not define a new\ntype."}),"\n",(0,i.jsx)(n.p,{children:"Types can have highly constrained sets of values without eliminating\nuseful values. Used in concert, derived types and subtypes can eliminate\nmany flag variables and type conversions within executable statements.\nThis renders the program more readable, enforces the abstraction, and\nallows the compiler to enforce strong typing constraints."}),"\n",(0,i.jsx)(n.p,{children:"Many algorithms begin or end with values just outside the normal range.\nIf boundary values are not compatible within subexpressions, algorithms\ncan be needlessly complicated. The program can become cluttered with\nflag variables and special cases when it could just test for zero or\nsome other sentinel value just outside normal range."}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"Columns"})," and the subtype ",(0,i.jsx)(n.code,{children:"Listing_Paper"})," in the example above\ndemonstrate how to allow sentinel values. The subtype ",(0,i.jsx)(n.code,{children:"Listing_Paper"}),"\ncould be used as the type for parameters of subprograms declared in the\nspecification of a package. This would restrict the range of values that\ncould be specified by the caller. Meanwhile, the type ",(0,i.jsx)(n.code,{children:"Columns"})," could be\nused to store such values internally to the body of the package,\nallowing ",(0,i.jsx)(n.code,{children:"First_Column - 1"})," to be used as a sentinel value. This\ncombination of types and subtypes allows compatibility between subtypes\nwithin subexpressions without type conversions as would happen with\nderived types."]}),"\n",(0,i.jsx)(n.p,{children:"The choice between type derivation and type extension depends on what\nkind of changes you expect to occur to objects in the type. In general,\ntype derivation is a very simple form of inheritance: the derived types\ninherit the structure, operations, and values of the parent type\n(Rationale 1995, \xa74.2 ). Although you can add operations, you cannot\naugment the data structure. You can derive from either scalar or\ncomposite types."}),"\n",(0,i.jsxs)(n.p,{children:["Type extension is a more powerful form of inheritance, only applied to\n",(0,i.jsx)(n.code,{children:"tagged"})," records, in which you can augment both the type's components\nand operations. When the record implements an abstraction with the\npotential for reuse and/or extension, it is a good candidate for making\nit ",(0,i.jsx)(n.code,{children:"tagged"}),". Similarly, if the abstraction is a member of a family of\nabstractions with well-defined variable and common properties, you\nshould consider a ",(0,i.jsx)(n.code,{children:"tagged"})," record."]}),"\n",(0,i.jsx)(n.h4,{id:"notes",children:"notes"}),"\n",(0,i.jsx)(n.p,{children:"The price of the reduction in the number of independent type\ndeclarations is that subtypes and derived types change when the base\ntype is redefined. This trickle-down of changes is sometimes a blessing\nand sometimes a curse. However, usually it is intended and beneficial."}),"\n",(0,i.jsx)(n.h3,{id:"anonymous-types",children:"Anonymous Types"}),"\n",(0,i.jsx)(n.h4,{id:"guideline-1",children:"guideline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoid anonymous array types."}),"\n",(0,i.jsx)(n.li,{children:"Use anonymous array types for array variables only when no suitable\ntype exists or can be created and the array will not be referenced\nas a whole (e.g., used as a subprogram parameter)."}),"\n",(0,i.jsx)(n.li,{children:"Use access parameters and access discriminants to guarantee that the\nparameter or discriminant is treated as a constant."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"example"}),"\n",(0,i.jsx)(n.p,{children:"Use:"}),"\n",(0,i.jsx)(n.p,{children:"type Buffer_Index is range 1 .. 80;\ntype Buffer       is array (Buffer_Index) of Character;\nInput_Line : Buffer;"}),"\n",(0,i.jsx)(n.p,{children:"rather than:"}),"\n",(0,i.jsx)(n.p,{children:"Input_Line : array (Buffer_Index) of Character;"}),"\n",(0,i.jsx)(n.h4,{id:"rationale-1",children:"rationale"}),"\n",(0,i.jsx)(n.p,{children:"Although Ada allows anonymous types, they have limited usefulness and\ncomplicate program modification. For example, except for arrays, a\nvariable of anonymous type can never be used as an actual parameter\nbecause it is not possible to define a formal parameter of the same\ntype. Even though this may not be a limitation initially, it precludes a\nmodification in which a piece of code is changed to a subprogram.\nAlthough you can declare the anonymous array to be aliased, you cannot\nuse this access value as an actual parameter in a subprogram because the\nsubprogram's formal parameter declaration requires a type mark. Also,\ntwo variables declared using the same anonymous type declaration are\nactually of different types."}),"\n",(0,i.jsx)(n.p,{children:"Even though the implicit conversion of array types during parameter\npassing is supported in Ada, it is difficult to justify not using the\ntype of the parameter. In most situations, the type of the parameter is\nvisible and easily substituted in place of an anonymous array type. The\nuse of an anonymous array type implies that the array is only being used\nas a convenient way to implement a collection of values. It is\nmisleading to use an anonymous type, and then treat the variable as an\nobject."}),"\n",(0,i.jsx)(n.p,{children:"When you use an access parameter or access discriminant, the anonymous\ntype is essentially declared inside the subprogram or object itself\n(Rationale 1995, \xa73.7.1 ). Thus, you have no way of declaring another\nobject of the same type, and the object is treated as a constant. In the\ncase of a self-referential data structure (see"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:" Guideline 5.4.6 ), you need the access parameter to be able to"})}),"\n",(0,i.jsx)(n.p,{children:"manipulate the data the discriminant accesses (Rationale 1995, \xa73.7.1 )."}),"\n",(0,i.jsx)(n.h4,{id:"notes-1",children:"notes"}),"\n",(0,i.jsx)(n.p,{children:"For anonymous task types, see Guideline 6.1.4 ."}),"\n",(0,i.jsx)(n.h4,{id:"exceptions",children:"exceptions"}),"\n",(0,i.jsx)(n.p,{children:"If you are creating a unique table, for example, the periodic table of\nthe elements, consider using an anonymous array type."}),"\n",(0,i.jsx)(n.h3,{id:"private-types",children:"Private Types"}),"\n",(0,i.jsx)(n.h4,{id:"guideline-2",children:"guideline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Derive from controlled types in preference to using limited private\ntypes."}),"\n",(0,i.jsx)(n.li,{children:"Use limited private types in preference to private types."}),"\n",(0,i.jsx)(n.li,{children:"Use private types in preference to nonprivate types."}),"\n",(0,i.jsx)(n.li,{children:"Explicitly export needed operations rather than easing restrictions."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"example"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"with-adafinalizationpackage-packet_telemetry-istype-frame_header-is-new-adafinalizationcontrolled-with-privatetype-frame_data---is-privatetype-frame_codes--is-main_bus_voltage-transmitter_1_powerprivatetype-frame_header-is-new-adafinalizationcontrolled-withrecordend-record---override-adjustment-and-finalization-to-get-correct-assignment-semanticsprocedure-adjust-object--in-out-frame_headerprocedure-finalize-object--in-out-frame_headertype-frame_data-isrecordend-recordend-packet_telemetry",children:"with Ada.Finalization;\npackage Packet_Telemetry is\ntype Frame_Header is new Ada.Finalization.Controlled with private;\ntype Frame_Data   is private;\ntype Frame_Codes  is (Main_Bus_Voltage, Transmitter_1_Power);\n...\nprivate\ntype Frame_Header is new Ada.Finalization.Controlled with\nrecord\n...\nend record;\n-- override adjustment and finalization to get correct assignment semantics\nprocedure Adjust (Object : in out Frame_Header);\nprocedure Finalize (Object : in out Frame_Header);\ntype Frame_Data is\nrecord\n...\nend record;\n...\nend Packet_Telemetry;"}),"\n",(0,i.jsx)(n.h4,{id:"rationale-2",children:"rationale"}),"\n",(0,i.jsx)(n.p,{children:"Limited private types and private types support abstraction and\ninformation hiding better than nonprivate types. The more restricted the\ntype, the better information hiding is served. This, in turn, allows the\nimplementation to change without affecting the rest of the program.\nWhile there are many valid reasons to export types, it is better to try\nthe preferred route first, loosening the restrictions only as necessary.\nIf it is necessary for a user of the package to use a few of the\nrestricted operations, it is better to export the operations explicitly\nand individually via exported subprograms than to drop a level of\nrestriction. This practice retains the restrictions on other operations."}),"\n",(0,i.jsxs)(n.p,{children:["Limited private types have the most restricted set of operations\navailable to users of a package. Of the types that must be made\navailable to users of a package, as many as possible should be derived\nfrom the controlled types or limited private. Controlled types give you\nthe ability to adjust assignment and to finalize values, so you no\nlonger need to create limited private types to guarantee a client that\nassignment and equality obey deep copy/comparison semantics. Therefore,\nit is possible to export a slightly less restrictive type (i.e., private\ntype that extends ",(0,i.jsx)(n.code,{children:"Ada.Finalization.Controlled"}),") that has an adjustable\nassignment operator and overridable equality operator. See also\nGuideline 5.4.5 ."]}),"\n",(0,i.jsxs)(n.p,{children:["The operations available to limited private types are membership tests,\nselected components, components for the selections of any discriminant,\nqualification and explicit conversion, and attributes ",(0,i.jsx)(n.code,{children:"'Base"})," and\n",(0,i.jsx)(n.code,{children:"'Size"}),". Objects of a limited private type also have the attribute\n",(0,i.jsx)(n.code,{children:"'Constrained"})," if there are discriminants. None of these operations\nallows the user of the package to manipulate objects in a way that\ndepends on the structure of the type."]}),"\n",(0,i.jsx)(n.h4,{id:"notes-2",children:"notes"}),"\n",(0,i.jsxs)(n.p,{children:["The predefined packages ",(0,i.jsx)(n.code,{children:"Direct_IO"})," and ",(0,i.jsx)(n.code,{children:"Sequential_IO"}),"do not accept\nlimited private types as generic parameters. This restriction should be\nconsidered when I/O operations are needed for a type."]}),"\n",(0,i.jsx)(n.p,{children:"See Guideline 8.3.3 for a discussion of the use of private and limited\nprivate types in generic units."}),"\n",(0,i.jsx)(n.h3,{id:"subprogram-access-types",children:"Subprogram Access Types"}),"\n",(0,i.jsx)(n.h4,{id:"guideline-3",children:"guideline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use access-to-subprogram types for indirect access to subprograms."}),"\n",(0,i.jsx)(n.li,{children:"Wherever possible, use abstract tagged types and dispatching rather\nthan access-to-subprogram types to implement dynamic selection and\ninvocation of subprograms."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:"example"}),"\n",(0,i.jsx)(n.p,{children:"The following example is taken from the Rationale (1995, \xa73.7.2) :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:"    generic\n       type Float_Type is digits <>;\n    package Generic_Integration is\n       type Integrand is access function (X : Float_Type) return Float_Type;\n       function Integrate (F        : Integrand;\n                           From     : Float_Type;\n                           To       : Float_Type;\n                           Accuracy : Float_Type := 10.0*Float_Type'Model_Epsilon)\n         return Float_Type;\n    end Generic_Integration;\n    with Generic_Integration;\n    procedure Try_Estimate (External_Data : in     Data_Type;\n                            Lower         : in     Float;\n                            Upper         : in     Float;\n                            Answer        :    out Float) is\n       -- external data set by other means\n       function Residue (X : Float) return Float is\n          Result : Float;\n       begin  -- Residue\n          -- compute function value dependent upon external data\n          return Result;\n       end Residue;\n       package Float_Integration is\n          new Generic_Integration (Float_Type => Float);\n\n       use Float_Integration;\n    begin -- Try_Estimate\n       ...\n       Answer := Integrate (F    => Residue'Access,\n                            From => Lower,\n                            To   => Upper);\n    end Try_Estimate;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"rationale-3",children:"rationale"}),"\n",(0,i.jsx)(n.p,{children:"Access-to-subprogram types allow you to create data structures that\ncontain subprogram references. There are many uses for this feature, for\ninstance, implementing state machines, call backs in the X Window\nSystem, iterators (the operation to be applied to each element of a\nlist), and numerical algorithms (e.g., integration function) (Rationale\n1995, \xa73.7.2 )."}),"\n",(0,i.jsx)(n.p,{children:"You can achieve the same effect as access-to-subprogram types for\ndynamic selection by using abstract tagged types. You declare an\nabstract type with one abstract operation and then use an\naccess-to-class-wide type to get the dispatching effect. This technique\nprovides greater flexibility and type safety than access-to-subprogram\ntypes (Ada Reference Manual 1995, \xa73.10.2 )."}),"\n",(0,i.jsx)(n.p,{children:"Access-to-subprogram types are useful in implementing dynamic selection.\nReferences to the subprograms can be stored directly in the data\nstructure. In a finite state machine, for example, a single data\nstructure can describe the action to be taken on state transitions.\nStrong type checking is maintained because Ada 95 requires that the\ndesignated subprogram has the same parameter/result profile as the one\nspecified in the subprogram access type."}),"\n",(0,i.jsx)(n.p,{children:"See also Guideline 7.3.2 ."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);