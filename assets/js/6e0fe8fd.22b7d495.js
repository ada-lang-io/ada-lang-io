"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[3515],{78888:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>A,contentTitle:()=>h,default:()=>_,frontMatter:()=>c,metadata:()=>x,toc:()=>m});var t=i(74848),r=i(28453),s=i(13842),a=i(91435),o=i(21432),d=i(79162),l=i(34421);const c={sidebar_position:132},h="A.12 Stream Input-Output",x={id:"arm/AA-A/AA-A.12",title:"A.12 Stream Input-Output",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-A/AA-A.12.mdx",sourceDirName:"arm/AA-A",slug:"/arm/AA-A/AA-A.12",permalink:"/docs/arm/AA-A/AA-A.12",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:132,frontMatter:{sidebar_position:132},sidebar:"referenceManualSidebar",previous:{title:"A.11 Wide Text Input-Output and Wide Wide Text Input-Output",permalink:"/docs/arm/AA-A/AA-A.11"},next:{title:"A.13 Exceptions in Input-Output",permalink:"/docs/arm/AA-A/AA-A.13"}},A={},m=[{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"A.12.1  The Package Streams.Stream_IO",id:"a121--the-package-streamsstream_io",level:2},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Erroneous Execution",id:"erroneous-execution",level:4},{value:"Inconsistencies With Ada 95",id:"inconsistencies-with-ada-95",level:4},{value:"Incompatibilities With Ada 95",id:"incompatibilities-with-ada-95",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95-1",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"Incompatibilities With Ada 2012",id:"incompatibilities-with-ada-2012",level:4},{value:"Extensions to Ada 2012",id:"extensions-to-ada-2012",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4},{value:"A.12.2  The Package Text_IO.Text_Streams",id:"a122--the-package-text_iotext_streams",level:2},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"A.12.3  The Package Wide_Text_IO.Text_Streams",id:"a123--the-package-wide_text_iotext_streams",level:2},{value:"Static Semantics",id:"static-semantics-2",level:4},{value:"A.12.4  The Package Wide_Wide_Text_IO.Text_Streams",id:"a124--the-package-wide_wide_text_iotext_streams",level:2},{value:"Static Semantics",id:"static-semantics-3",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4}];function p(e){const n={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h4:"h4",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"a12-stream-input-output",children:"A.12 Stream Input-Output"}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,t.jsx)(n.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,t.jsx)(d.A,{children:"1/2"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),"\n",(0,t.jsxs)("p",{children:["The packages Streams.Stream","_","IO, Text","_","IO.Text","_","Streams, Wide","_","Text","_","IO.Text","_","Streams, and Wide","_","Wide","_","Text","_","IO.Text","_","Streams provide stream-oriented operations on files. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"wording-changes-from-ada-95",children:"Wording Changes from Ada 95"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"1.a/2"}),(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["Included package Wide","_","Wide","_","Text","_","IO.Text","_","Streams in this description. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)("a",{id:"Subclause_A.12.1"}),"\n",(0,t.jsx)(n.h2,{id:"a121--the-package-streamsstream_io",children:"A.12.1  The Package Streams.Stream_IO"}),"\n",(0,t.jsx)(d.A,{children:"1_A.12.1"}),"\n",(0,t.jsxs)("p",{children:["[The subprograms in the child package Streams.Stream","_","IO provide control over stream files. Access to a stream file is either sequential, via a call on Read or Write to transfer an array of stream elements, or positional (if supported by the implementation for the given file), by specifying a relative index for an element. Since a stream file can be converted to a Stream","_","Access value, calling stream-oriented attribute subprograms of different element types with the same Stream","_","Access value provides heterogeneous input-output.] See ",(0,t.jsx)("a",{href:"/docs/arm/AA-13/AA-13.13",children:"13.13"})," for a general discussion of streams. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,t.jsx)(d.A,{children:"1.1/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," The elements of a stream file are stream elements. If positioning is supported for the specified external file, a current index and current size are maintained for the file as described in ",(0,t.jsx)("a",{href:"/docs/arm/AA-A/AA-A.8",children:"A.8"}),". If positioning is not supported, a current index is not maintained, and the current size is implementation defined. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"1.a.1/1_A.12.1"}),(0,t.jsx)(s.A,{type:"aarm",aarm:"implementation-defined",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{}),"Current size for a stream file for which positioning is not supported.",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(d.A,{children:"2_A.12.1"}),"\n",(0,t.jsxs)("p",{children:["The library package Streams.Stream","_","IO has the following declaration: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"3/5_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI05-0283-1","AI12-0302-1"]}),"\n",(0,t.jsxs)(o.A,{language:"ada",children:[(0,t.jsxs)(n.p,{children:["with Ada.IO","_","Exceptions;","\n","package Ada.Streams.Stream","_","IO","\n","    with Preelaborate, Global =",">"," in out synchronized is","\n","\n",(0,t.jsx)(d.A,{children:"4_A.12.1"}),"\ntype Stream","_","Access is access all Root","_","Stream","_","Type'Class;","\n","\n",(0,t.jsx)(d.A,{children:"5/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0102-1","AI12-0399-1"]}),(0,t.jsxs)(n.p,{children:["type File","_","Type is limited private","\n","        with Preelaborable","_","Initialization;","\n","\n",(0,t.jsx)(d.A,{children:"6_A.12.1"}),"\ntype File","_","Mode is (In","_","File, Out","_","File, Append","_","File);","\n","\n",(0,t.jsx)(d.A,{children:"7_A.12.1"}),"\ntype    Count          is range 0 .. implementation-defined;","\n","    subtype Positive","_","Count is Count range 1 .. Count'Last;","\n","      -- Index into file, in stream elements.","\n","\n",(0,t.jsx)(d.A,{children:"8_A.12.1"}),"\nprocedure Create (File : in out File","_","Type;","\n","                      Mode : in File","_","Mode := Out","_","File;","\n",'                      Name : in String    := "";',"\n",'                      Form : in String    := "");',"\n","\n",(0,t.jsx)(d.A,{children:"9_A.12.1"}),"\nprocedure Open (File : in out File","_","Type;","\n","                    Mode : in File","_","Mode;","\n","                    Name : in String;","\n",'                    Form : in String := "");',"\n","\n",(0,t.jsx)(d.A,{children:"10_A.12.1"}),"\nprocedure Close  (File : in out File","_","Type);","\n","    procedure Delete (File : in out File","_","Type);","\n","    procedure Reset  (File : in out File","_","Type; Mode : in File","_","Mode);","\n","    procedure Reset  (File : in out File","_","Type);","\n","\n",(0,t.jsx)(d.A,{children:"11_A.12.1"}),"\nfunction Mode (File : in File","_","Type) return File","_","Mode;","\n","    function Name (File : in File","_","Type) return String;","\n","    function Form (File : in File","_","Type) return String;","\n","\n",(0,t.jsx)(d.A,{children:"12_A.12.1"}),"\nfunction Is","_","Open     (File : in File","_","Type) return Boolean;","\n","    function End","_","Of","_","File (File : in File","_","Type) return Boolean;","\n","\n",(0,t.jsx)(d.A,{children:"13_A.12.1"}),"\nfunction Stream (File : in File","_","Type) return Stream","_","Access;","\n","        -- Return stream access for use with T'Input and T'Output","\n","\n",(0,t.jsx)(d.A,{children:"14/1_A.12.1"}),"\nThis paragraph was deleted.","\n","\n",(0,t.jsx)(d.A,{children:"15/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),(0,t.jsxs)(n.p,{children:["-- Read array of stream elements from file","\n","    procedure Read (File : in  File","_","Type;","\n","                    Item : out Stream","_","Element","_","Array;","\n","                    Last : out Stream","_","Element","_","Offset;","\n","                    From : in  Positive","_","Count)","\n","        with Global =",">"," overriding in out File;","\n","\n",(0,t.jsx)(d.A,{children:"16/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),(0,t.jsxs)(n.p,{children:["procedure Read (File : in  File","_","Type;","\n","                    Item : out Stream","_","Element","_","Array;","\n","                    Last : out Stream","_","Element","_","Offset)","\n","        with Global =",">"," overriding in out File;","\n","\n",(0,t.jsx)(d.A,{children:"17/1_A.12.1"}),"\nThis paragraph was deleted.","\n","\n",(0,t.jsx)(d.A,{children:"18/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),(0,t.jsxs)(n.p,{children:["-- Write array of stream elements into file","\n","    procedure Write (File : in File","_","Type;","\n","                     Item : in Stream","_","Element","_","Array;","\n","                     To   : in Positive","_","Count)","\n","        with Global =",">"," overriding in out File;","\n","\n",(0,t.jsx)(d.A,{children:"19/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),(0,t.jsxs)(n.p,{children:["procedure Write (File : in File","_","Type;","\n","                     Item : in Stream","_","Element","_","Array)","\n","        with Global =",">"," overriding in out File;","\n","\n",(0,t.jsx)(d.A,{children:"20/1_A.12.1"}),"\nThis paragraph was deleted.","\n","\n",(0,t.jsx)(d.A,{children:"21_A.12.1"}),"\n-- Operations on position within file","\n","\n",(0,t.jsx)(d.A,{children:"22/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),(0,t.jsxs)(n.p,{children:["procedure Set","_","Index(File : in File","_","Type; To : in Positive","_","Count)","\n","        with Global =",">"," overriding in out File;","\n","\n",(0,t.jsx)(d.A,{children:"23_A.12.1"}),"\nfunction Index(File : in File","_","Type) return Positive","_","Count;","\n","    function Size (File : in File","_","Type) return Count;","\n","\n",(0,t.jsx)(d.A,{children:"24_A.12.1"}),"\nprocedure Set","_","Mode(File : in out File","_","Type; Mode : in File","_","Mode);","\n","\n",(0,t.jsx)(d.A,{children:"25/1_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI95-00057-01"]}),(0,t.jsxs)(n.p,{children:["{","8652/0051","}","     procedure Flush(File : in File","_","Type);","\n","\n",(0,t.jsx)(d.A,{children:"26_A.12.1"}),"\n-- exceptions","\n","    Status","_","Error : exception renames IO","_","Exceptions.Status","_","Error;","\n","    Mode","_","Error   : exception renames IO","_","Exceptions.Mode","_","Error;","\n","    Name","_","Error   : exception renames IO","_","Exceptions.Name","_","Error;","\n","    Use","_","Error    : exception renames IO","_","Exceptions.Use","_","Error;","\n","    Device","_","Error : exception renames IO","_","Exceptions.Device","_","Error;","\n","    End","_","Error    : exception renames IO","_","Exceptions.End","_","Error;","\n","    Data","_","Error   : exception renames IO","_","Exceptions.Data","_","Error;","\n","\n",(0,t.jsx)(d.A,{children:"26.1/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0021-1"]}),(0,t.jsxs)(n.p,{children:["package Wide","_","File","_","Names is","\n","\n",(0,t.jsx)(d.A,{children:"26.2/5_A.12.1"}),"\n-- File management","\n","\n",(0,t.jsx)(d.A,{children:"26.3/5_A.12.1"}),"\nprocedure Create (File : in out File","_","Type;","\n","                        Mode : in File","_","Mode := Out","_","File;","\n","                        Name : in Wide","_",'String := "";',"\n","                        Form : in Wide","_",'String := "");',"\n","\n",(0,t.jsx)(d.A,{children:"26.4/5_A.12.1"}),"\nprocedure Open (File : in out File","_","Type;","\n","                      Mode : in File","_","Mode;","\n","                      Name : in Wide","_","String;","\n","                      Form : in Wide","_",'String := "");',"\n","\n",(0,t.jsx)(d.A,{children:"26.5/5_A.12.1"}),"\nfunction Name (File : in File","_","Type) return Wide","_","String;","\n","\n",(0,t.jsx)(d.A,{children:"26.6/5_A.12.1"}),"\nfunction Form (File : in File","_","Type) return Wide","_","String;","\n","\n",(0,t.jsx)(d.A,{children:"26.7/5_A.12.1"}),"\nend Wide","_","File","_","Names;","\n","\n",(0,t.jsx)(d.A,{children:"26.8/5_A.12.1"})]}),(0,t.jsx)(l.A,{items:["AI12-0021-1"]}),(0,t.jsxs)(n.p,{children:["package Wide","_","Wide","_","File","_","Names is","\n","\n",(0,t.jsx)(d.A,{children:"26.9/5_A.12.1"}),"\n-- File management","\n","\n",(0,t.jsx)(d.A,{children:"26.10/5_A.12.1"}),"\nprocedure Create (File : in out File","_","Type;","\n","                        Mode : in File","_","Mode := Out","_","File;","\n","                        Name : in Wide","_","Wide","_",'String := "";',"\n","                        Form : in Wide","_","Wide","_",'String := "");',"\n","\n",(0,t.jsx)(d.A,{children:"26.11/5_A.12.1"}),"\nprocedure Open (File : in out File","_","Type;","\n","                      Mode : in File","_","Mode;","\n","                      Name : in Wide","_","Wide","_","String;","\n","                      Form : in Wide","_","Wide","_",'String := "");',"\n","\n",(0,t.jsx)(d.A,{children:"26.12/5_A.12.1"}),"\nfunction Name (File : in File","_","Type) return Wide","_","Wide","_","String;","\n","\n",(0,t.jsx)(d.A,{children:"26.13/5_A.12.1"}),"\nfunction Form (File : in File","_","Type) return Wide","_","Wide","_","String;","\n","\n",(0,t.jsx)(d.A,{children:"26.14/5_A.12.1"}),"\nend Wide","_","Wide","_","File","_","Names;","\n","\n",(0,t.jsx)(d.A,{children:"27_A.12.1"}),"\nprivate","\n","   ... -- not specified by the language","\n","end Ada.Streams.Stream","_","IO;","\n"]})]}),"\n",(0,t.jsx)(d.A,{children:"27.1/2_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00360-01"]}),"\n",(0,t.jsxs)("p",{children:["The type File","_","Type needs finalization (see ",(0,t.jsx)("a",{href:"/docs/arm/AA-7/AA-7.6",children:"7.6"}),").",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"28/5_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00283-01","AI12-0130-1","AI12-0449-1"]}),"\n",(0,t.jsxs)("p",{children:["The subprograms given in ",(0,t.jsx)("a",{href:"/docs/arm/AA-A/AA-A.8#Subclause_A.8.2",children:"A.8.2"})," for the control of external files (Create, Open, Close, Delete, Reset, Mode, Name, Form, Is","_","Open, and Flush) are available for stream files.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"28.1/2_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00283-01"]}),"\n",(0,t.jsxs)("p",{children:["The End","_","Of","_","File function: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"28.2/2_A.12.1"}),"\n",(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:["Propagates Mode","_","Error if the mode of the file is not In","_","File;",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"28.3/3_A.12.1"}),(0,t.jsx)(l.A,{items:["AI05-0264-1"]}),(0,t.jsxs)("li",{children:["If positioning is supported for the given external file, the function returns True if the current index exceeds the size of the external file; otherwise, it returns False;",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"28.4/3_A.12.1"}),(0,t.jsx)(l.A,{items:["AI05-0264-1"]}),(0,t.jsxs)("li",{children:["If positioning is not supported for the given external file, the function returns True if no more elements can be read from the given file; otherwise, it returns False. ",(0,t.jsx)("br",{})]})]}),"\n",(0,t.jsx)(d.A,{children:"28.5/2_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01","AI95-00085-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," The Set","_","Mode procedure sets the mode of the file. If the new mode is Append","_","File, the file is positioned to its end; otherwise, the position in the file is unchanged.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"28.6/4_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01","AI12-0130-1"]}),"\n",(0,t.jsxs)("p",{children:[(0,t.jsx)("em",{children:"This paragraph was deleted."}),"{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"29/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00001-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0056"}),"}"," The Stream function returns a Stream","_","Access result from a File","_","Type object, thus allowing the stream-oriented attributes Read, Write, Input, and Output to be used on the same file for multiple types. Stream propagates Status","_","Error if File is not open.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"30/2_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00256-01"]}),"\n",(0,t.jsxs)("p",{children:["The procedures Read and Write are equivalent to the corresponding operations in the package Streams. Read propagates Mode","_","Error if the mode of File is not In","_","File. Write propagates Mode","_","Error if the mode of File is not Out","_","File or Append","_","File. The Read procedure with a Positive","_","Count parameter starts reading at the specified index. The Write procedure with a Positive","_","Count parameter starts writing at the specified index. For a file that supports positioning, Read without a Positive","_","Count parameter starts reading at the current index, and Write without a Positive","_","Count parameter starts writing at the current index.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"30.1/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," The Size function returns the current size of the file.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"31/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," The Index function returns the current index. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"31.a/1_A.12.1"}),(0,t.jsxs)(s.A,{type:"aarm",aarm:"note",children:[(0,t.jsx)("em",{children:"This paragraph was deleted."}),(0,t.jsx)("br",{})]})]}),"\n",(0,t.jsx)(d.A,{children:"32_A.12.1"}),"\n",(0,t.jsxs)("p",{children:["The Set","_","Index procedure sets the current index to the specified value.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"32.1/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," If positioning is supported for the external file, the current index is maintained as follows:",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"32.2/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),"\n",(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," For Open and Create, if the Mode parameter is Append","_","File, the current index is set to the current size of the file plus one; otherwise, the current index is set to one.",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"32.3/1_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),(0,t.jsxs)("li",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," For Reset, if the Mode parameter is Append","_","File, or no Mode parameter is given and the current mode is Append","_","File, the current index is set to the current size of the file plus one; otherwise, the current index is set to one.",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"32.4/1_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),(0,t.jsxs)("li",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," For Set","_","Mode, if the new mode is Append","_","File, the current index is set to current size plus one; otherwise, the current index is unchanged.",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"32.5/1_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),(0,t.jsxs)("li",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," For Read and Write without a Positive","_","Count parameter, the current index is incremented by the number of stream elements read or written.",(0,t.jsx)("br",{})]}),(0,t.jsx)(d.A,{children:"32.6/1_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00026-01"]}),(0,t.jsxs)("li",{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," For Read and Write with a Positive","_","Count parameter, the value of the current index is set to the value of the Positive","_","Count parameter plus the number of stream elements read or written. ",(0,t.jsx)("br",{})]})]}),"\n",(0,t.jsx)(d.A,{children:"33_A.12.1"}),"\n",(0,t.jsxs)("p",{children:["If positioning is not supported for the given file, then a call of Index or Set","_","Index propagates Use","_","Error. Similarly, a call of Read or Write with a Positive","_","Count parameter propagates Use","_","Error.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"33.a/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00085-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"implementation-note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{}),"It is permissible for an implementation to implement mode Append","_","File using the Unix append mode (the O","_","APPEND bit). Such an implementation does not support positioning when the mode is Append","_","File, and therefore the operations listed above must raise Use","_","Error. This is acceptable as there is no requirement that any particular file support positioning; therefore it is acceptable that a file support positioning when opened with mode Out","_","File, and the same file not support positioning when opened with mode Append","_","File. But it is not acceptable for a file to support positioning (by allowing the above operations), but to do something other than the defined semantics (that is, always write at the end, even when explicitly commanded to write somewhere else). ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsxs)("p",{children:[(0,t.jsx)("em",{children:"Paragraphs 34 through 36 were deleted."})," ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h4,{id:"erroneous-execution",children:"Erroneous Execution"}),"\n",(0,t.jsx)(d.A,{children:"36.1/1_A.12.1"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00001-01"]}),"\n",(0,t.jsxs)("p",{children:["{",(0,t.jsx)("em",{children:"8652/0056"}),"}"," If the File","_","Type object passed to the Stream function is later closed or finalized, and the stream-oriented attributes are subsequently called (explicitly or implicitly) on the Stream","_","Access value returned by Stream, execution is erroneous. This rule applies even if the File","_","Type object was opened again after it had been closed. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.a.1/1_A.12.1"}),(0,t.jsx)(s.A,{type:"aarm",aarm:"reason",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{}),"These rules are analogous to the rule for the result of the Current","_","Input, Current","_","Output, and Current","_","Error functions. These rules make it possible to represent a value of (some descendant of) Root","_","Stream","_","Type which represents a file as an access value, with a null value corresponding to a closed file. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"inconsistencies-with-ada-95",children:"Inconsistencies With Ada 95"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.a/3_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00283-01","AI05-0005-1"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"correction",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Amendment "})," The description of the subprograms for managing files was corrected so that they do not require truncation of the external file \u2014 a stream file is not a sequential file. An Ada 95 program that expects truncation of the stream file might not work under Ada 2005. Note that the Ada 95 standard was ambiguous on this point (the normative wording seemed to require truncation, but didn't explain where; the AARM notes seemed to expect behavior like Direct","_","IO), and implementations varied widely. Therefore, as a practical matter, code that depends on stream truncation might not work even in Ada 95; deleting the file before opening it provides truncation that works in both Ada 95 and Ada 2005. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"incompatibilities-with-ada-95",children:"Incompatibilities With Ada 95"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.b/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00360-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"correction",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Amendment "})," Stream","_","IO.File","_","Type is defined to need finalization. If the restriction No","_","Nested","_","Finalization (see ",(0,t.jsx)("a",{href:"/docs/arm/AA-D/AA-D.7",children:"D.7"}),") applies to the partition, and File","_","Type does not have a controlled part, it will not be allowed in local objects in Ada 2005 whereas it would be allowed in original Ada 95. Such code is not portable, as another Ada compiler may have a controlled part in File","_","Type, and thus would be illegal. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"wording-changes-from-ada-95-1",children:"Wording Changes from Ada 95"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.c/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00057-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["{",(0,t.jsx)("em",{children:"8652/0051"}),"}"," ",(0,t.jsx)("strong",{children:"Corrigendum:"})," Corrected the parameter mode of Flush; otherwise it could not be used on Standard","_","Output.",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.d/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00026-01","AI95-00256-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["{",(0,t.jsx)("em",{children:"8652/0055"}),"}"," ",(0,t.jsx)("strong",{children:"Corrigendum:"})," Added wording to describe the effects of the various operations on the current index. The Amendment adds an explanation of the use of current index for Read and Write.",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.e/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00001-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["{",(0,t.jsx)("em",{children:"8652/0056"}),"}"," ",(0,t.jsx)("strong",{children:"Corrigendum:"})," Clarified that Stream can raise Status","_","Error, and clarified that using a Stream","_","Access whose file has been closed is erroneous.",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.f/2_A.12.1"}),(0,t.jsx)(l.A,{items:["AI95-00085-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["Clarified that Set","_","Mode can be called with the current mode. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"extensions-to-ada-2005",children:"Extensions to Ada 2005"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.g/3_A.12.1"}),(0,t.jsx)(l.A,{items:["AI05-0283-1"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["Package Ada.Streams.Stream","_","IO is now preelaborated, allowing it to be used in more contexts (including in distributed systems). Note that it is ",(0,t.jsx)("em",{children:"not"})," a remote types package; File","_","Type objects cannot be passed between partitions. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"incompatibilities-with-ada-2012",children:"Incompatibilities With Ada 2012"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.h/5_A.12.1"}),(0,t.jsx)(l.A,{items:["AI12-0021-1"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["The Wide","_","File","_","Names and Wide","_","Wide","_","File","_","Names nested packages are newly added to Ada.Stream","_","IO. Therefore, a use clause conflict is possible; see the introduction of ",(0,t.jsx)("a",{href:"/docs/arm/AA-A/",children:"Annex A"})," for more on this topic. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"extensions-to-ada-2012",children:"Extensions to Ada 2012"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.i/4_A.12.1"}),(0,t.jsx)(l.A,{items:["AI12-0102-1"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Corrigendum:"})," Type Ada.Streams.Stream","_","IO.File","_","Type now has preelaborable initialization. This allows declaring library-level file objects in preelaborable packages (an oversight from the change above). ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"wording-changes-from-ada-2012",children:"Wording Changes from Ada 2012"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"36.j/4_A.12.1"}),(0,t.jsx)(l.A,{items:["AI12-0130-1"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)("strong",{children:"Corrigendum:"})," The definition of the Flush procedure was moved to ",(0,t.jsx)("a",{href:"/docs/arm/AA-A/AA-A.8#Subclause_A.8.2",children:"A.8.2"}),", so that it could be shared by all of the I/O packages. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)("a",{id:"Subclause_A.12.2"}),"\n",(0,t.jsx)(n.h2,{id:"a122--the-package-text_iotext_streams",children:"A.12.2  The Package Text_IO.Text_Streams"}),"\n",(0,t.jsx)(d.A,{children:"1_A.12.2"}),"\n",(0,t.jsxs)("p",{children:["The package Text","_","IO.Text","_","Streams provides a function for treating a text file as a stream. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h4,{id:"static-semantics-1",children:"Static Semantics"}),"\n",(0,t.jsx)(d.A,{children:"2_A.12.2"}),"\n",(0,t.jsxs)("p",{children:["The library package Text","_","IO.Text","_","Streams has the following declaration: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"3/5_A.12.2"}),"\n",(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),"\n",(0,t.jsx)(o.A,{language:"ada",children:(0,t.jsxs)(n.p,{children:["with Ada.Streams;","\n","package Ada.Text","_","IO.Text","_","Streams","\n","   with Global =",">"," in out synchronized is","\n","   type Stream","_","Access is access all Streams.Root","_","Stream","_","Type'Class;","\n","\n",(0,t.jsx)(d.A,{children:"4_A.12.2"}),"\nfunction Stream (File : in File","_","Type) return Stream","_","Access;","\n","end Ada.Text","_","IO.Text","_","Streams;","\n"]})}),"\n",(0,t.jsx)(d.A,{children:"5_A.12.2"}),"\n",(0,t.jsxs)("p",{children:["The Stream function has the same effect as the corresponding function in Streams.Stream","_","IO. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"6_A.12.2"}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["NOTE 1   The ability to obtain a stream for a text file allows Current","_","Input, Current","_","Output, and Current","_","Error to be processed with the functionality of streams, including the mixing of text and binary input-output, and the mixing of binary input-output for different types.",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"7_A.12.2"}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["NOTE 2   Performing operations on the stream associated with a text file does not affect the column, line, or page counts. ",(0,t.jsx)("br",{})]})})]}),"\n",(0,t.jsx)("a",{id:"Subclause_A.12.3"}),"\n",(0,t.jsx)(n.h2,{id:"a123--the-package-wide_text_iotext_streams",children:"A.12.3  The Package Wide_Text_IO.Text_Streams"}),"\n",(0,t.jsx)(d.A,{children:"1_A.12.3"}),"\n",(0,t.jsxs)("p",{children:["The package Wide","_","Text","_","IO.Text","_","Streams provides a function for treating a wide text file as a stream. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h4,{id:"static-semantics-2",children:"Static Semantics"}),"\n",(0,t.jsx)(d.A,{children:"2_A.12.3"}),"\n",(0,t.jsxs)("p",{children:["The library package Wide","_","Text","_","IO.Text","_","Streams has the following declaration: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"3/5_A.12.3"}),"\n",(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),"\n",(0,t.jsx)(o.A,{language:"ada",children:(0,t.jsxs)(n.p,{children:["with Ada.Streams;","\n","package Ada.Wide","_","Text","_","IO.Text","_","Streams","\n","   with Global =",">"," in out synchronized is","\n","   type Stream","_","Access is access all Streams.Root","_","Stream","_","Type'Class;","\n","\n",(0,t.jsx)(d.A,{children:"4_A.12.3"}),"\nfunction Stream (File : in File","_","Type) return Stream","_","Access;","\n","end Ada.Wide","_","Text","_","IO.Text","_","Streams;","\n"]})}),"\n",(0,t.jsx)(d.A,{children:"5_A.12.3"}),"\n",(0,t.jsxs)("p",{children:["The Stream function has the same effect as the corresponding function in Streams.Stream","_","IO. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)("a",{id:"Subclause_A.12.4"}),"\n",(0,t.jsx)(n.h2,{id:"a124--the-package-wide_wide_text_iotext_streams",children:"A.12.4  The Package Wide_Wide_Text_IO.Text_Streams"}),"\n",(0,t.jsx)(d.A,{children:"1/2_A.12.4"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),"\n",(0,t.jsxs)("p",{children:["The package Wide","_","Wide","_","Text","_","IO.Text","_","Streams provides a function for treating a wide wide text file as a stream. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h4,{id:"static-semantics-3",children:"Static Semantics"}),"\n",(0,t.jsx)(d.A,{children:"2/2_A.12.4"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),"\n",(0,t.jsxs)("p",{children:["The library package Wide","_","Wide","_","Text","_","IO.Text","_","Streams has the following declaration: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(d.A,{children:"3/5_A.12.4"}),"\n",(0,t.jsx)(l.A,{items:["AI12-0302-1"]}),"\n",(0,t.jsx)(o.A,{language:"ada",children:(0,t.jsxs)(n.p,{children:["with Ada.Streams;","\n","package Ada.Wide","_","Wide","_","Text","_","IO.Text","_","Streams","\n","   with Global =",">"," in out synchronized is","\n","   type Stream","_","Access is access all Streams.Root","_","Stream","_","Type'Class;","\n","\n",(0,t.jsx)(d.A,{children:"4/2_A.12.4"}),"\nfunction Stream (File : in File","_","Type) return Stream","_","Access;","\n","end Ada.Wide","_","Wide","_","Text","_","IO.Text","_","Streams;","\n"]})}),"\n",(0,t.jsx)(d.A,{children:"5/2_A.12.4"}),"\n",(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),"\n",(0,t.jsxs)("p",{children:["The Stream function has the same effect as the corresponding function in Streams.Stream","_","IO. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(a.A,{children:(0,t.jsx)(n.h4,{id:"extensions-to-ada-95",children:"Extensions to Ada 95"})}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(d.A,{children:"5.a/2_A.12.4"}),(0,t.jsx)(l.A,{items:["AI95-00285-01"]}),(0,t.jsx)(s.A,{type:"aarm",aarm:"note",children:(0,t.jsxs)(n.p,{children:["Package Wide","_","Wide","_","Text","_","IO.Text","_","Streams is new. ",(0,t.jsx)("br",{})]})})]})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);