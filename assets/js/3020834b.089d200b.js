"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([["64"],{154:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>a,toc:()=>d,default:()=>h,metadata:()=>s,assets:()=>l,contentTitle:()=>o});var s=JSON.parse('{"id":"style-guide/s5/10","title":"5.10 Summary","description":"optional parts of the syntax","source":"@site/docs/style-guide/s5/10.mdx","sourceDirName":"style-guide/s5","slug":"/style-guide/s5/10","permalink":"/docs/style-guide/s5/10","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"5.10 Summary"},"sidebar":"styleGuideSidebar","previous":{"title":"5.9 Erroneous execution and bounded errors","permalink":"/docs/style-guide/s5/09"},"next":{"title":"6. Concurrency","permalink":"/docs/style-guide/s6/"}}'),t=i(85893),r=i(50065);let a={title:"5.10 Summary"},o=void 0,l={},d=[{value:"optional parts of the syntax",id:"optional-parts-of-the-syntax",level:4},{value:"parameter lists",id:"parameter-lists",level:4},{value:"types",id:"types",level:4},{value:"data structures",id:"data-structures",level:4},{value:"expressions",id:"expressions",level:4},{value:"statements",id:"statements",level:4},{value:"visibility",id:"visibility",level:4},{value:"using exceptions",id:"using-exceptions",level:4},{value:"erroneous execution and bounded errors",id:"erroneous-execution-and-bounded-errors",level:4}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h4:"h4",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"optional-parts-of-the-syntax",children:"optional parts of the syntax"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Associate names with loops when they are nested (Booch 1986, 1987)."}),"\n",(0,t.jsxs)(n.li,{children:["Associate names with any loop that contains an ",(0,t.jsx)(n.code,{children:"exit"}),"statement."]}),"\n",(0,t.jsx)(n.li,{children:"Associate names with blocks when they are nested ."}),"\n",(0,t.jsxs)(n.li,{children:["Use loop names on all ",(0,t.jsx)(n.code,{children:"exit"}),"statements from nested loops."]}),"\n",(0,t.jsx)(n.li,{children:"Include the defining program unit name at the end of a package\nspecification and body."}),"\n",(0,t.jsx)(n.li,{children:"Include the defining identifier at the end of a task specification\nand body."}),"\n",(0,t.jsxs)(n.li,{children:["Include the entry identifier at the end of an ",(0,t.jsx)(n.code,{children:"accept"})," statement."]}),"\n",(0,t.jsx)(n.li,{children:"Include the designator at the end of a subprogram body."}),"\n",(0,t.jsx)(n.li,{children:"Include the defining identifier at the end of a protected unit\ndeclaration."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"parameter-lists",children:"parameter lists"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Name formal parametername formal parameters descriptively to reduce\nthe need for comments ."}),"\n",(0,t.jsx)(n.li,{children:"Use named parameter association in calls of infrequently used\nsubprograms or entries with many formal parameters ."}),"\n",(0,t.jsx)(n.li,{children:"Use named association when instantiating generics."}),"\n",(0,t.jsx)(n.li,{children:"Use named association for clarification when the actual parameter is\nany literal or expression."}),"\n",(0,t.jsx)(n.li,{children:"Use named association when supplying a nondefault value to an\noptional parameter."}),"\n",(0,t.jsx)(n.li,{children:"Provide default parameters to allow for occasional, special use of\nwidely used subprograms or entries."}),"\n",(0,t.jsx)(n.li,{children:"Place default parameters at the end of the formal parameter list."}),"\n",(0,t.jsx)(n.li,{children:"Consider providing default values to new parameters added to an\nexisting subprogram."}),"\n",(0,t.jsx)(n.li,{children:"Show the mode indication of all procedure and entry parameters\n(Nissen and Wallis 1984)."}),"\n",(0,t.jsx)(n.li,{children:"Use the most restrictive parameter mode applicable to your\napplication."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"types",children:"types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use existing types as building blocks by deriving new types from\nthem."}),"\n",(0,t.jsx)(n.li,{children:"Use range constraints on subtypes."}),"\n",(0,t.jsx)(n.li,{children:"Define new types, especially derived types, to include the largest\nset of possible values, including boundary values."}),"\n",(0,t.jsx)(n.li,{children:"Constrain the ranges of derived types with subtypes, excluding\nboundary values."}),"\n",(0,t.jsx)(n.li,{children:"Use type derivation rather than type extension when there are no\nmeaningful components to add to the type."}),"\n",(0,t.jsx)(n.li,{children:"Avoid anonymous array types."}),"\n",(0,t.jsx)(n.li,{children:"Use anonymous array types for array variables only when no suitable\ntype exists or can be created and the array will not be referenced\nas a whole (e.g., used as a subprogram parameter)."}),"\n",(0,t.jsx)(n.li,{children:"Use access parameters and access discriminants to guarantee that the\nparameter or discriminant is treated as a constant."}),"\n",(0,t.jsx)(n.li,{children:"Derive from controlled types in preference to using limited private\ntypes."}),"\n",(0,t.jsx)(n.li,{children:"Use limited private types in preference to private types."}),"\n",(0,t.jsx)(n.li,{children:"Use private types in preference to nonprivate types."}),"\n",(0,t.jsx)(n.li,{children:"Explicitly export needed operations rather than easing restrictions."}),"\n",(0,t.jsx)(n.li,{children:"Use access-to-subprogram types for indirect access to subprograms."}),"\n",(0,t.jsx)(n.li,{children:"Wherever possible, use abstract tagged types and dispatching rather\nthan access-to-subprogram types to implement dynamic selection and\ninvocation of subprograms."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"data-structures",children:"data structures"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When declaring a discriminant, use as constrained a subtype as\npossible (i.e., subtype with as specific a range constraint as\npossible)."}),"\n",(0,t.jsx)(n.li,{children:"Use a discriminated record rather than a constrained array to\nrepresent an array whose actual values are unconstrained."}),"\n",(0,t.jsx)(n.li,{children:"Use records to group heterogeneous but related data."}),"\n",(0,t.jsx)(n.li,{children:"Consider records to map to I/O device data."}),"\n",(0,t.jsx)(n.li,{children:"Use access types to class-wide types to implement heterogeneous\npolymorphic data structures."}),"\n",(0,t.jsx)(n.li,{children:"Use tagged types and type extension rather than variant records (in\ncombination with enumeration types and case statements)."}),"\n",(0,t.jsx)(n.li,{children:"Record structures should not always be flat. Factor out common\nparts."}),"\n",(0,t.jsx)(n.li,{children:"For a large record structure, group related components into smaller\nsubrecords."}),"\n",(0,t.jsx)(n.li,{children:"For nested records, pick element names that read well when inner\nelements are referenced."}),"\n",(0,t.jsx)(n.li,{children:"Consider using type extension to organize large data structures."}),"\n",(0,t.jsx)(n.li,{children:"Differentiate between static and dynamic data. Use dynamically\nallocated objects with caution."}),"\n",(0,t.jsx)(n.li,{children:"Use dynamically allocated data structures only when it is necessary\nto create and destroy them dynamically or to be able to reference\nthem by different names."}),"\n",(0,t.jsx)(n.li,{children:"Do not drop pointers to undeallocated objects."}),"\n",(0,t.jsx)(n.li,{children:"Do not leave dangling references to deallocated objects."}),"\n",(0,t.jsx)(n.li,{children:"Initialize all access variables and components within a record."}),"\n",(0,t.jsx)(n.li,{children:"Do not rely on memory deallocation."}),"\n",(0,t.jsx)(n.li,{children:"Deallocate explicitly."}),"\n",(0,t.jsx)(n.li,{children:"Use length clauses to specify total allocation size."}),"\n",(0,t.jsxs)(n.li,{children:["Provide handlers for ",(0,t.jsx)(n.code,{children:"Storage_Error"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Use controlled types to implement private types that manipulate\ndynamic data."}),"\n",(0,t.jsx)(n.li,{children:"Avoid unconstrained record objects unless your run-time environment\nreliably reclaims dynamic heap storage."}),"\n",(0,t.jsxs)(n.li,{children:["Unless your run-time environment reliably reclaims dynamic heap\nstorage, declare the following items only in the outermost, unnested\ndeclarative part of either a library package, a main subprogram, or\na permanent task:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Access types"}),"\n",(0,t.jsx)(n.li,{children:"Constrained composite objects with nonstatic bounds"}),"\n",(0,t.jsx)(n.li,{children:"Objects of an unconstrained composite type other than\nunconstrainedrecords"}),"\n",(0,t.jsx)(n.li,{children:"Composite objects large enough (at compile time) for the\ncompiler to allocate implicitly on the heap"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Unless your run-time environment reliably reclaims dynamic heap\nstorage or you are creating permanent, dynamically allocated tasks,\navoid declaring tasks in the following situations:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Unconstrained array subtypes whose components are tasks"}),"\n",(0,t.jsx)(n.li,{children:"Discriminated record subtypes containing a component that is an\narray of tasks, where the array size depends on the value of the\ndiscriminant"}),"\n",(0,t.jsx)(n.li,{children:"Any declarative region other than the outermost, unnested\ndeclarative part of either a library package or a main\nsubprogram"}),"\n",(0,t.jsx)(n.li,{children:"Arrays of tasks that are not statically constrained"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Minimize the use of aliased variables."}),"\n",(0,t.jsx)(n.li,{children:"Use aliasing for statically created, ragged arrays (Rationale 1995,\n\xa73.7.1)."}),"\n",(0,t.jsx)(n.li,{children:"Use aliasing to refer to part of a data structure when you want to\nhide the internal connections and bookkeeping information."}),"\n",(0,t.jsx)(n.li,{children:"Use access discriminants to create self-referential data structures,\ni.e., a data structure one of whose components points to the\nenclosing structure."}),"\n",(0,t.jsxs)(n.li,{children:["Use modular types rather than a Boolean arrays when you create data\nstructures that need bit-wise operations, such as ",(0,t.jsx)(n.code,{children:"and"})," and ",(0,t.jsx)(n.code,{children:"or"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"expressions",children:"expressions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"'First"})," or ",(0,t.jsx)(n.code,{children:"'Last"})," instead of numeric literals to represent the\nfirst or last values of a range."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"'Range"})," or the subtype name of the range instead of ",(0,t.jsx)(n.code,{children:"'First .. 'Last"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Use array attributes ",(0,t.jsx)(n.code,{children:"'First"}),", ",(0,t.jsx)(n.code,{children:"'Last"}),", or ",(0,t.jsx)(n.code,{children:"'Length"})," instead of\nnumeric literals for accessing arrays."]}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"'Range"})," of the array instead of the name of the index\nsubtype to express a range."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"'Range"})," instead of ",(0,t.jsx)(n.code,{children:"'First .. 'Last"})," to express a range."]}),"\n",(0,t.jsx)(n.li,{children:"Use parentheses to specify the order of subexpression evaluation to\nclarify expressions (NASA 1987)."}),"\n",(0,t.jsx)(n.li,{children:"Use parentheses to specify the order of evaluation for\nsubexpressions whose correctness depends on left to right\nevaluation."}),"\n",(0,t.jsx)(n.li,{children:"Avoid names and constructs that rely on the use of negatives ."}),"\n",(0,t.jsx)(n.li,{children:"Choose names of flags so they represent states that can be used in\npositive form."}),"\n",(0,t.jsx)(n.li,{children:"Use short-circuit forms of the logical operators to specify the\norder of conditions when the failure of one condition means that the\nother condition will raise an exception."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"<="})," and ",(0,t.jsx)(n.code,{children:">="})," in relational expressions with real operands\ninstead of ",(0,t.jsx)(n.code,{children:"="}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"statements",children:"statements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Minimize the depth of nested expressions (Nissen and Wallis 1984)."}),"\n",(0,t.jsx)(n.li,{children:"Minimize the depth of nested control structures (Nissen and Wallis\n1984)."}),"\n",(0,t.jsx)(n.li,{children:"Try using simplification heuristics."}),"\n",(0,t.jsx)(n.li,{children:"Use slices rather than a loop to copy part of an array."}),"\n",(0,t.jsxs)(n.li,{children:["Minimize the use of an ",(0,t.jsx)(n.code,{children:"others"})," choice in a ",(0,t.jsx)(n.code,{children:"case"}),"statement."]}),"\n",(0,t.jsxs)(n.li,{children:["Do not use ranges of enumeration literals in ",(0,t.jsx)(n.code,{children:"case"})," statements."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"case"})," statements rather than ",(0,t.jsx)(n.code,{children:"if/elsif"})," statements, wherever\npossible."]}),"\n",(0,t.jsxs)(n.li,{children:["Use type extension and dispatching rather than ",(0,t.jsx)(n.code,{children:"case"})," statements, if\npossible."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"for"})," loops, whenever possible."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"while"})," loops when the number of iterations cannot be calculated\nbefore entering the loop but a simple continuation condition can be\napplied at the top of the loop."]}),"\n",(0,t.jsxs)(n.li,{children:["Use plain loops with ",(0,t.jsx)(n.code,{children:"exit"})," statements for more complex situations."]}),"\n",(0,t.jsxs)(n.li,{children:["Avoid ",(0,t.jsx)(n.code,{children:"exit"})," statements in ",(0,t.jsx)(n.code,{children:"while"})," and ",(0,t.jsx)(n.code,{children:"for"})," loops."]}),"\n",(0,t.jsx)(n.li,{children:"Minimize the number of ways to exit a loop."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"exit"})," statements to enhance the readability of loop termination\ncode (NASA 1987)."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"exit when ..."})," rather than",(0,t.jsx)(n.code,{children:"if ... then exit"}),"whenever possible\n(NASA 1987)."]}),"\n",(0,t.jsxs)(n.li,{children:["Review ",(0,t.jsx)(n.code,{children:"exit"})," statement placement."]}),"\n",(0,t.jsx)(n.li,{children:"Consider specifying bounds on loops."}),"\n",(0,t.jsx)(n.li,{children:"Consider specifying bounds on recursion."}),"\n",(0,t.jsxs)(n.li,{children:["Do not use ",(0,t.jsx)(n.code,{children:"goto"})," statements."]}),"\n",(0,t.jsxs)(n.li,{children:["Minimize the number of ",(0,t.jsx)(n.code,{children:"return"}),"statementsfrom a subprogram (NASA\n1987)."]}),"\n",(0,t.jsxs)(n.li,{children:["Highlight ",(0,t.jsx)(n.code,{children:"return"}),"statements with comments or white space to keep\nthem from being lost in other code."]}),"\n",(0,t.jsx)(n.li,{children:"Use blocks to localize the scope of declarations."}),"\n",(0,t.jsx)(n.li,{children:"Use blocks to perform local renaming."}),"\n",(0,t.jsx)(n.li,{children:"Use blocks to define local exception handlers."}),"\n",(0,t.jsx)(n.li,{children:"Use an aggregate instead of a sequence of assignments to assign\nvalues to all components of a record"}),"\n",(0,t.jsx)(n.li,{children:"Use an aggregate instead of a temporary variable when building a\nrecord to pass as an actual parameter"}),"\n",(0,t.jsx)(n.li,{children:"Use positional association only when there is a conventional\nordering of the arguments."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"visibility",children:"visibility"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When you need to provide visibility to operators, use the ",(0,t.jsx)(n.code,{children:"use type"}),"\nclause."]}),"\n",(0,t.jsxs)(n.li,{children:["Avoid/minimize the use of the ",(0,t.jsx)(n.code,{children:"use"})," clause (Nissen and Wallis 1984)."]}),"\n",(0,t.jsxs)(n.li,{children:["Consider using a package ",(0,t.jsx)(n.code,{children:"renames"})," clause rather than a ",(0,t.jsx)(n.code,{children:"use"})," clause\nfor a package."]}),"\n",(0,t.jsxs)(n.li,{children:["Consider using the ",(0,t.jsx)(n.code,{children:"use"})," clause in the following situations:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When standard packages are needed and no ambiguous references\nare introduced"}),"\n",(0,t.jsx)(n.li,{children:"When references to enumeration literals are needed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Localize the effect of all ",(0,t.jsx)(n.code,{children:"use"})," clauses."]}),"\n",(0,t.jsx)(n.li,{children:"Limit the scope of a renaming declaration to the minimum necessary\nscope."}),"\n",(0,t.jsx)(n.li,{children:"Rename a long, fully qualified name to reduce the complexity if it\nbecomes unwieldy."}),"\n",(0,t.jsx)(n.li,{children:"Use renaming to provide the body of a subprogram if this subprogram\nmerely calls the first subprogram."}),"\n",(0,t.jsx)(n.li,{children:"Rename declarations for visibility purposes rather than using the\nuse clause, except for operators ."}),"\n",(0,t.jsx)(n.li,{children:"Rename parts when your code interfaces to reusable components\noriginally written with nondescriptive or inapplicable nomenclature."}),"\n",(0,t.jsx)(n.li,{children:"Use a project-wide standard list of abbreviations to rename common\npackages."}),"\n",(0,t.jsxs)(n.li,{children:["Provide a ",(0,t.jsx)(n.code,{children:"use type"})," rather than a ",(0,t.jsx)(n.code,{children:"renames"})," clause to provide\nvisibility to operators."]}),"\n",(0,t.jsx)(n.li,{children:"Limit overloading to widely used subprograms that perform similar\nactions on arguments of different types (Nissen and Wallis 1984)."}),"\n",(0,t.jsx)(n.li,{children:"Preserve the conventional meaning of overloaded operators (Nissen\nand Wallis 1984)."}),"\n",(0,t.jsxs)(n.li,{children:['Use "',(0,t.jsx)(n.code,{children:"+"}),'" to identify adding, joining, increasing, and enhancing\nkinds of functions.']}),"\n",(0,t.jsxs)(n.li,{children:['Use "',(0,t.jsx)(n.code,{children:"-"}),'" to identify subtraction, separation, decreasing, and\ndepleting kinds of functions.']}),"\n",(0,t.jsx)(n.li,{children:"Use operator overloading sparingly and uniformly when applied to\ntagged types."}),"\n",(0,t.jsx)(n.li,{children:"Define an appropriate equality operator for private types."}),"\n",(0,t.jsx)(n.li,{children:"Consider redefining the equality operator for a private type."}),"\n",(0,t.jsx)(n.li,{children:"When overloading the equality operator for types, maintain the\nproperties of an algebraic equivalence relation."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"using-exceptions",children:"using exceptions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When it is easy and efficient to do so, avoid causing exceptions to\nbe raised."}),"\n",(0,t.jsx)(n.li,{children:"Provide handlers for exceptions that cannot be avoided."}),"\n",(0,t.jsx)(n.li,{children:"Use exception handlers to enhance readability by separating fault\nhandling from normal execution."}),"\n",(0,t.jsxs)(n.li,{children:["Do not use exceptions and exception handlers as ",(0,t.jsx)(n.code,{children:"goto"})," statements."]}),"\n",(0,t.jsx)(n.li,{children:"Do not evaluate the value of an object (or a part of an object) that\nhas become abnormal because of the failure of a language-defined\ncheck."}),"\n",(0,t.jsxs)(n.li,{children:["When writing an exception handler for ",(0,t.jsx)(n.code,{children:"others"}),", capture and return\nadditional information about the exception through the\n",(0,t.jsx)(n.code,{children:"Exception_Name"}),", ",(0,t.jsx)(n.code,{children:"Exception_Message"}),", or ",(0,t.jsx)(n.code,{children:"Exception_Information"}),"\nsubprograms declared in the predefined package ",(0,t.jsx)(n.code,{children:"Ada.Exceptions"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"others"})," only to catch exceptions you cannot enumerate\nexplicitly, preferably only to flag a potential abort."]}),"\n",(0,t.jsxs)(n.li,{children:["During development, trap ",(0,t.jsx)(n.code,{children:"others"}),", capture the exception being\nhandled, and consider adding an explicit handler for that exception."]}),"\n",(0,t.jsx)(n.li,{children:"Handle all exceptions, both user and predefined ."}),"\n",(0,t.jsx)(n.li,{children:"For every exception that might be raised, provide a handler in\nsuitable frames to protect against undesired propagation outside the\nabstraction ."}),"\n",(0,t.jsx)(n.li,{children:"Do not rely on being able to identify the fault-raising, predefined,\nor implementation-defined exceptions."}),"\n",(0,t.jsxs)(n.li,{children:["Use the facilities defined in ",(0,t.jsx)(n.code,{children:"Ada.Exceptions"})," to capture as much\ninformation as possible about an exception."]}),"\n",(0,t.jsx)(n.li,{children:"Use blocks to associate localized sections of code with their own\nexception handlers."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"erroneous-execution-and-bounded-errors",children:"erroneous execution and bounded errors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Ada.Unchecked_Conversion"})," only with the utmost care (",(0,t.jsx)(n.a,{href:"http://www.adahome.com/rm95/rm9x-13-09.html",children:"Ada\nReference Manual 1995,\n\xa713.9"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Consider using the ",(0,t.jsx)(n.code,{children:"'Valid"})," attribute to check the validity of\nscalar data)."]}),"\n",(0,t.jsxs)(n.li,{children:["Ensure that the value resulting from ",(0,t.jsx)(n.code,{children:"Ada.Unchecked_Conversion"}),"\nproperly represents a value of the parameter's subtype."]}),"\n",(0,t.jsxs)(n.li,{children:["Isolate the use of ",(0,t.jsx)(n.code,{children:"Ada.Unchecked_Conversion"})," in package bodies."]}),"\n",(0,t.jsxs)(n.li,{children:["Isolate the use of ",(0,t.jsx)(n.code,{children:"Ada.Unchecked_Deallocation"})," in package bodies."]}),"\n",(0,t.jsx)(n.li,{children:"Ensure that no dangling reference to the local object exists after\nexiting the scope of the local object."}),"\n",(0,t.jsxs)(n.li,{children:["Minimize the use of the attribute ",(0,t.jsx)(n.code,{children:"Unchecked_Access"}),", preferably\nisolating it to package bodies."]}),"\n",(0,t.jsxs)(n.li,{children:["Use the attribute ",(0,t.jsx)(n.code,{children:"Unchecked_Access"}),' only on data whose\nlifetime/scope is "library level."']}),"\n",(0,t.jsx)(n.li,{children:'Use address clauses to map variables and entries to the hardware\ndevice or memory, not to model the FORTRAN "equivalence" feature.'}),"\n",(0,t.jsx)(n.li,{children:"Ensure that the address specified in an attribute definition clause\nis valid and does not conflict with the alignment."}),"\n",(0,t.jsxs)(n.li,{children:["If available in your Ada environment, use the package\n",(0,t.jsx)(n.code,{children:"Ada.Interrupts"})," to associate handlers with interrupts."]}),"\n",(0,t.jsx)(n.li,{children:"Avoid using the address clause for nonimported program units."}),"\n",(0,t.jsx)(n.li,{children:"Do not suppress exception checks during development."}),"\n",(0,t.jsx)(n.li,{children:"If necessary, during operation, introduce blocks that encompass the\nsmallest range of statements that can safely have exception checking\nremoved."}),"\n",(0,t.jsx)(n.li,{children:"Initialize all objects , including access values, prior to use."}),"\n",(0,t.jsx)(n.li,{children:"Use caution when initializing access values."}),"\n",(0,t.jsx)(n.li,{children:"Do not depend on default initialization that is not part of the\nlanguage."}),"\n",(0,t.jsx)(n.li,{children:"Derive from a controlled type and override the primitive procedure\nto ensure automatic initialization."}),"\n",(0,t.jsx)(n.li,{children:"Ensure elaboration of an entity before using it."}),"\n",(0,t.jsx)(n.li,{children:"Use function calls in declarations cautiously."}),"\n",(0,t.jsxs)(n.li,{children:["Ensure that values obtained from ",(0,t.jsx)(n.code,{children:"Ada.Direct_IO"})," and\n",(0,t.jsx)(n.code,{children:"Ada.Sequential_IO"})," are in range."]}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"'Valid"})," attribute to check the validity of scalar values\nobtained through ",(0,t.jsx)(n.code,{children:"Ada.Direct_IO"})," and ",(0,t.jsx)(n.code,{children:"Ada.Sequential_IO."})]}),"\n",(0,t.jsxs)(n.li,{children:["Prevent exceptions from propagating outside any user-defined\n",(0,t.jsx)(n.code,{children:"Finalize"})," or ",(0,t.jsx)(n.code,{children:"Adjust"})," procedure by providing handlers for all\npredefined and user-defined exceptions at the end of each procedure."]}),"\n",(0,t.jsx)(n.li,{children:"Do not invoke a potentially blocking operation within a protected\nentry, a protected procedure, or a protected function."}),"\n",(0,t.jsx)(n.li,{children:"Do not use an asynchronous select statement within abort-deferred\noperations."}),"\n",(0,t.jsx)(n.li,{children:"Do not create a task that depends on a master that is included\nentirely within the execution of an abort-deferred operation."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:['This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,t.jsx)(n.a,{href:"https://en.wikibooks.org/wiki/Ada_Style_Guide",children:"https://en.wikibooks.org/wiki/Ada_Style_Guide"}),", which is\nlicensed under the\n",(0,t.jsx)(n.a,{href:"https://creativecommons.org/licenses/by-sa/3.0/",children:"Creative Commons Attribution-ShareAlike License"}),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work."]})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);