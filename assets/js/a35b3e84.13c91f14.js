"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([["316"],{33485:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>l,toc:()=>j,default:()=>b,metadata:()=>r,assets:()=>x,contentTitle:()=>h});var r=JSON.parse('{"id":"arm/AA-1/AA-1.3","title":"1.3. Terms and Definitions","description":"This Reference Manual output has not been verified,","source":"@site/docs/arm/AA-1/AA-1.3.mdx","sourceDirName":"arm/AA-1","slug":"/arm/AA-1/AA-1.3","permalink":"/docs/arm/AA-1/AA-1.3","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"referenceManualSidebar","previous":{"title":"1.2. Normative References","permalink":"/docs/arm/AA-1/AA-1.2"},"next":{"title":"2. Lexical Elements","permalink":"/docs/arm/AA-2/"}}'),i=n(85893),t=n(50065),a=n(13393),d=n(82315);n(88514);var c=n(1927),o=n(96470);let l={sidebar_position:7},h="1.3. Terms and Definitions",x={},j=[{value:"1.3.1  Types, Objects, and their Properties",id:"131--types-objects-and-their-properties",level:2},{value:"1.3.2  Subprograms and their Properties",id:"132--subprograms-and-their-properties",level:2},{value:"1.3.3  Other Syntactic Constructs",id:"133--other-syntactic-constructs",level:2},{value:"1.3.4  Runtime Actions",id:"134--runtime-actions",level:2},{value:"1.3.5  Exceptional Situations",id:"135--exceptional-situations",level:2}];function p(e){let s={a:"a",admonition:"admonition",h1:"h1",h2:"h2",header:"header",p:"p",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"13-terms-and-definitions",children:"1.3. Terms and Definitions"})}),"\n",(0,i.jsx)(s.admonition,{type:"danger",children:(0,i.jsxs)(s.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,i.jsx)(s.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,i.jsx)(c.Z,{children:"1/5"}),"\n",(0,i.jsx)(o.Z,{items:["AI95-00415-01","AI12-0443-1"]}),"\n",(0,i.jsxs)("p",{children:["Terms are defined throughout this document, indicated by ",(0,i.jsx)("i",{children:"italic"})," type. Terms explicitly defined in this document are not to be presumed to refer implicitly to similar terms defined elsewhere. Mathematical terms not defined in this document are to be interpreted according to the ",(0,i.jsx)("i",{children:"CRC Concise Encyclopedia of Mathematics, Second Edition"}),". Other terms not defined in this document are to be interpreted according to the ",(0,i.jsx)("i",{children:"Webster's Third New International Dictionary of the English Language"}),". Informal descriptions of some terms are also given below. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.a"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("b",{}),"The index contains an entry for every defined term.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.b/2"}),(0,i.jsx)(o.Z,{items:["AI95-00415-01"]}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["The contents of the ",(0,i.jsx)("i",{children:"CRC Concise Encyclopedia of Mathematics, Second Edition"})," can be accessed on ",(0,i.jsx)("a",{href:"http://www.mathworld.com",children:(0,i.jsx)(s.a,{href:"http://www.mathworld.com",children:"http://www.mathworld.com"})}),". The ISBN number of the book is ISBN 1584883472.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.c/5"}),(0,i.jsx)(o.Z,{items:["AI12-0443-1"]}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["The definitions found in this subclause are short, descriptive definitions. These are most useful for comprehension when an exact meaning is not needed. More formal, detailed definitions are found in the body of the Reference Manual; these are needed to determine the exact application of rules to constructs and entities.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.d/5"}),(0,i.jsx)(o.Z,{items:["AI12-0443-1"]}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["To see the difference, consider \u201Caliased view\u201D. The descriptive definition is \u201Ca view of an object that can be designated by an access value\u201D. The formal definition is a lengthy paragraph in ",(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10",children:"3.10"})," that defines 10 separate constructs as aliased views. In order to reason about a language rule that requires an aliased view in a particular context, one needs to look at the list of constructs in order to determine if the object in hand is actually an aliased view. The descriptive definition is no help in this case. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.e/5"}),(0,i.jsx)(o.Z,{items:["AI12-0443-1"]}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("b",{children:"Term entry: "}),"Each term defined in this subclause is marked like this in the body of the AARM near its detailed formal definition. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"1.f/5"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("b",{}),'Here are some AARM-only definitions: The Ada Rapporteur Group (ARG) interprets the Ada Reference Manual. An Ada Issue (AI) is a numbered ruling from the ARG. Ada Issues created for Ada 83 are denoted as "AI83", while Ada Issues created for Ada 95 are denoted as "AI95" in this document. Similarly, Ada Issues created for Ada 2005 are denoted as "AI05", Ada Issues created for Ada 2012 are denoted as "AI12", and Ada Issues created for Ada 2022 are denoted as "AI22". The Ada Commentary Integration Document (ACID) is an edition of the Ada 83 RM in which clearly marked insertions and deletions indicate the effect of integrating the approved AIs. The Uniformity Rapporteur Group (URG) issued recommendations intended to increase uniformity across Ada implementations. The functions of the URG have been assumed by the ARG. A Uniformity Issue (UI) was a numbered recommendation from the URG. A Defect Report and Response is an official query to WG9 about an error in the standard. Defect Reports are processed by the ARG, and are referenced here by their ISO numbers: 8652/nnnn. Most changes to the Ada 95 standard include reference(s) to the Defect Report(s) that prompted the change. The ',(0,i.jsx)("i",{children:"Ada Conformity Assessment Test Suite (ACATS)"})," is a set of tests intended to check the conformity of Ada implementations to this standard. This set of tests was previously known as the Ada Compiler Validation Capability (ACVC). ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_1.3.1"}),"\n",(0,i.jsx)(s.h2,{id:"131--types-objects-and-their-properties",children:"1.3.1  Types, Objects, and their Properties"}),"\n",(0,i.jsx)(c.Z,{children:"1/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"abstract type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["tagged type intended for use as an ancestor of other types, but which is not allowed to have objects of its own",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"2/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"access type"})]}),(0,i.jsxs)("dd",{children:["type that has values that designate aliased objects",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"3/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Access types correspond to \u201Cpointer types\u201D or \u201Creference types\u201D in some other languages.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"4/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"accessibility level"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["representation of the lifetime of an entity in terms of the level of dynamic nesting within which the entity is known to exist",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"5/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"aliased view"})]}),(0,i.jsxs)("dd",{children:["view of an object that can be designated by an access value",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"6/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Objects allocated by allocators are aliased. Objects can also be explicitly declared as aliased with the reserved word aliased. The Access attribute can be used to create an access value designating an aliased object.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"7/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"ancestor of a type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["type itself or, in the case of a type derived from other types, its parent type or one of its progenitor types or one of their ancestors",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"8/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Ancestor and descendant are inverse relationships.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"9/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"array type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["composite type whose components are all of the same type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"10/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"aspect"})]}),(0,i.jsxs)("dd",{children:["specifiable property of an entity",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"11/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-13/AA-13.1#S0346",children:"aspect_specification"})})," on the declaration of the entity. Some aspects can be queried via attributes.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"12/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"attribute"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["characteristic or property of an entity that can be queried, and in some cases specified",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"13/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"category of types"})]}),(0,i.jsxs)("dd",{children:["set of types with one or more common properties, such as primitive operations",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"14/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A category of types that is closed under derivation is also known as a class.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"15/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"character type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["enumeration type whose values include characters",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"16/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"class of types"})]}),(0,i.jsxs)("dd",{children:["set of types that is closed under derivation, which means that if a given type is in the class, then all types derived from that type are also in the class",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"17/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The set of types of a class share common properties, such as their primitive operations.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"18/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"composite type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type with components, such as an array or record",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"19/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"controlled type"})]}),(0,i.jsxs)("dd",{children:["type that supports user-defined assignment and finalization",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"20/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Objects are always finalized before being destroyed.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"21/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"default initial condition"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["property that holds for every default-initialized object of a given type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"22/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"derived type"})]}),(0,i.jsxs)("dd",{children:["type defined in terms of a parent type and zero or more progenitor types given in a derived type definition",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"23/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note 1: A derived type inherits properties such as components and primitive operations from its parent and progenitors.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"24/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note 2: A type together with the types derived from it (directly or indirectly) form a derivation class.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"25/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"descendant of a type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["type itself or a type derived (directly or indirectly) from it",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"26/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Descendant and ancestor are inverse relationships.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"27/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"discrete type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type that is either an integer type or an enumeration type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"28/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"discriminant"})]}),(0,i.jsxs)("dd",{children:["parameter for a composite type, which can control, for example, the bounds of a component that is an array",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"29/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A discriminant for a task type can be used to pass data to a task of the type upon its creation.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"30/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"elementary type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type that does not have components",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"31/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"enumeration type"})]}),(0,i.jsxs)("dd",{children:["type defined by an enumeration of its values, which can be denoted by identifiers or character literals",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"32/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"full type"})]}),(0,i.jsxs)("dd",{children:["type that defines a full view",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"33/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"full view"})]}),(0,i.jsxs)("dd",{children:["view of a type that reveals all of its properties",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"34/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: There can be other views of the type that reveal fewer properties.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"35/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"incomplete type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["type that defines an incomplete view",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"36/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Incomplete types can be used for defining recursive data structures.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"37/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"incomplete view"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["view of a type that reveals minimal properties",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"38/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The remaining properties are defined by the full view given elsewhere.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"39/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"indexable container type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type that has user-defined behavior for indexing, via the Constant","_","Indexing or Variable","_","Indexing aspects",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"40/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"integer type"})]}),(0,i.jsxs)("dd",{children:["type that represents signed or modular integers",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"41/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A signed integer type has a base range that includes both positive and negative numbers, and has operations that can raise an exception when the result is outside the base range. A modular type has a base range whose lower bound is zero, and has operations with \u201Cwraparound\u201D semantics. Modular types subsume what are called \u201Cunsigned types\u201D in some other languages.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"42/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"interface type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["abstract tagged type that has no components or concrete operations except possibly null procedures",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"43/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Interface types are used for composing other interfaces and tagged types and thereby provide multiple inheritance. Only an interface type can be used as a progenitor of another type.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"44/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"invariant"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["assertion that is expected to be True for all objects of a given private type when viewed from outside the defining package",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"45/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"iterable container type"})]}),(0,i.jsxs)("dd",{children:["type that has user-defined behavior for iteration, via the Default","_","Iterator and Iterator","_","Element aspects",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"46/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"limited type"})]}),(0,i.jsxs)("dd",{children:["type for which copying (such as in an ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-5/AA-5.2#S0173",children:"assignment_statement"})}),") is not allowed",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"47/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: All types are either limited types or nonlimited types.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"48/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"needed component"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["component of a record type or record extension that is required to have its value specified within a given aggregate",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"49/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"nominal subtype"})]}),(0,i.jsxs)("dd",{children:["subtype specified when a view of an object is defined",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"50/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"nonlimited type"})]}),(0,i.jsxs)("dd",{children:["type for which copying is allowed",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"51/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"object"})]}),(0,i.jsxs)("dd",{children:["entity that contains a value, and is either a constant or a variable",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"52/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.3#S0032",children:"object_declaration"})})," or by an ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),". A formal parameter is (a view of) an object. A subcomponent of an object is an object.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"53/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"operational aspect"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["aspect that indicates a logical property of an entity, such as the precondition of a subprogram, or the procedure used to write a given type of object to a stream",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"54/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"parent of a derived type"})]}),(0,i.jsxs)("dd",{children:["first ancestor type given in the definition of the derived type",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"55/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The parent can be almost any kind of type, including an interface type.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"56/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"partial view"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["view of a type that reveals only some of its properties",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"57/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The remaining properties are defined by the full view given elsewhere.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"58/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"primitive operations of a type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["operations (such as subprograms) declared together with the type declarations",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"59/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Primitive operations are inherited by other types in the same derivation class of types.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"60/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"private extension"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type that extends another type, with the additional properties hidden from its clients",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"61/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"private type"})]}),(0,i.jsxs)("dd",{children:["type that defines a partial view",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"62/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Private types can be used for defining abstractions that hide unnecessary details from their clients.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"63/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"progenitor"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["type given in the interface list, if any, of an interface, task, protected, or derived type definition",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"64/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A progenitor is always an interface type.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"65/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"protected type"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["composite type whose components are accessible only through one of its protected operations, which synchronize concurrent access by multiple tasks",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"66/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"real type"})]}),(0,i.jsxs)("dd",{children:["type that has values that are approximations of the real numbers",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"67/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Floating point and fixed point types are real types.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"68/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"record extension"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["type that extends another type optionally with additional components",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"69/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"record type"})]}),(0,i.jsxs)("dd",{children:["composite type consisting of zero or more named components, possibly of different types",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"70/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"reference type"})]}),(0,i.jsxs)("dd",{children:["type that has user-defined behavior for \u201C.all\u201D, defined by the Implicit","_","Dereference aspect",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"71/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"representation aspect"})]}),(0,i.jsxs)("dd",{children:["aspect that indicates how an entity is mapped onto the underlying hardware, for example the size or alignment of an object",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"72/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"scalar type"})]}),(0,i.jsxs)("dd",{children:["either a discrete type or a real type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"73/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"stable property"})]}),(0,i.jsxs)("dd",{children:["characteristic associated with objects of a given type that is preserved by many of the primitive operations of the type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"74/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"storage pool object"})]}),(0,i.jsxs)("dd",{children:["object associated with one or more access types from which the storage for objects created by allocators of the access type(s) is obtained",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"75/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Some storage pools can be partitioned into subpools in order to support finer-grained storage management.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"76/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"stream"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["sequence of elements that can be used, along with the stream-oriented attributes, to support marshalling and unmarshalling of values of most types",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"77/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"subtype"})]}),(0,i.jsxs)("dd",{children:["type together with optional constraints, null exclusions, and predicates, which constrain the values of the type to the subset that satisfies the implied conditions",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"78/5_1.3.1"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"synchronized"})]}),(0,i.jsxs)("dd",{children:["can be safely operated on by multiple tasks concurrently",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"79/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Synchronized is used to qualify entities, as in a synchronized interface.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"80/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"tagged type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["type whose objects each have a run-time type tag, which indicates the specific type for which the object was originally created",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"81/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Tagged types can be extended with additional components.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"82/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"task type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["composite type used to represent active entities which execute concurrently and that can communicate via queued task entries",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"83/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The top-level task of a partition is called the environment task.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"84/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"type"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["defining characteristic of each object and expression of the language, with an associated set of values, and a set of primitive operations that implement the fundamental aspects of its semantics",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"85/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Types are grouped into categories. Most language-defined categories of types are also classes of types.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"86/5_1.3.1"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"view of an entity"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["representation of an entity that reveals some or all of the properties of the entity",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"87/5_1.3.1"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A single entity can have multiple views.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_1.3.2"}),"\n",(0,i.jsx)(s.h2,{id:"132--subprograms-and-their-properties",children:"1.3.2  Subprograms and their Properties"}),"\n",(0,i.jsx)(c.Z,{children:"1/5_1.3.2"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"function"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["form of subprogram that returns a result and can be called as part of an expression",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"2/5_1.3.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"overriding operation"})]}),(0,i.jsxs)("dd",{children:["operation that replaces an inherited primitive operation",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"3/5_1.3.2"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Operations can be marked explicitly as overriding or not overriding.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"4/5_1.3.2"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"postcondition"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["assertion that is expected to be True when a given subprogram returns normally",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"5/5_1.3.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"precondition"})]}),(0,i.jsxs)("dd",{children:["assertion that is expected to be True when a given subprogram is called",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"6/5_1.3.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"procedure"})]}),(0,i.jsxs)("dd",{children:["form of subprogram that does not return a result and can only be invoked by a statement",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"7/5_1.3.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"subprogram"})]}),(0,i.jsxs)("dd",{children:["unit of a program that can be brought into execution in various contexts, with the invocation being a subprogram call that can parameterize the effect of the subprogram through the passing of operands",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"8/5_1.3.2"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: There are two forms of subprograms: functions, which return values, and procedures, which do not.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_1.3.3"}),"\n",(0,i.jsx)(s.h2,{id:"133--other-syntactic-constructs",children:"1.3.3  Other Syntactic Constructs"}),"\n",(0,i.jsx)(c.Z,{children:"1/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"aggregate"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["construct used to define a value of a composite type by specifying the values of the components of the type",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"2/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"compilation unit"})]}),(0,i.jsxs)("dd",{children:["program unit that is separately compiled",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"3/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-10/AA-10.1#S0286",children:"compilation_unit"})})," contains either the declaration, the body, or a renaming of a program unit.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"4/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"construct"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["piece of text (explicit or implicit) that is an instance of a syntactic category defined under Syntax",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"5/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"container"})]}),(0,i.jsxs)("dd",{children:["structured object that represents a collection of elements all of the same (potentially class-wide) type, such as a vector or a tree",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"6/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Several predefined container types are provided by the children of package Ada.Containers (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.18#Subclause_A.18.1",children:"A.18.1"}),").",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"7/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"container aggregate"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["construct used to define a value of a type that represents a collection of elements, by explicitly specifying the elements in the collection",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"8/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"core language"})]}),(0,i.jsxs)("dd",{children:["clause or annex in which are defined language constructs or capabilities that are provided by all conforming implementations",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"9/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A construct is said to be part of the core language if it is defined in a core language clause or annex.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"10/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"declaration"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["language construct that associates a name with (a view of) an entity",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"11/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: A declaration can appear explicitly in the program text (an explicit declaration), or can be supposed to occur at a given place in the text as a consequence of the semantics of another construct (an implicit declaration).",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"12/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"generic instance"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["nongeneric unit created by the instantiation of a generic unit",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"13/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"generic unit"})]}),(0,i.jsxs)("dd",{children:["template for a (nongeneric) program unit",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"14/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note 1: The template can be parameterized by objects, types, subprograms, and packages.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"15/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note 2: Generic units can be used to perform the role that macros sometimes play in other languages.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"16/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"iterator"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["construct that is used to loop over the elements of an array or container",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"17/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Iterators can be user defined, and can perform arbitrary computations to access elements from a container.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"18/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"iterator filter"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["construct that is used to restrict the elements produced by an iteration to those for which a boolean condition evaluates to True",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"19/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"library unit"})]}),(0,i.jsxs)("dd",{children:["separately compiled program unit, which is a package, a subprogram, or a generic unit",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"20/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Library units can have other (logically nested) library units as children, and can have other program units physically nested within them. A root library unit, together with its children and grandchildren and so on, form a subsystem.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"21/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"master construct"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["one of certain executable constructs for which there can be objects or tasks whose lifetime ends when the construct completes",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"22/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Execution of a master construct is a master, with which objects and tasks are associated for the purposes of waiting and finalization.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"23/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"needed compilation unit"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["compilation unit that is necessary to produce an executable partition, because some entity declared or defined within the unit is used elsewhere in the partition",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"24/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"package"})]}),(0,i.jsxs)("dd",{children:["program unit that defines the interface to a group of logically related entities, along with their implementation",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"25/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Typically, a package contains the declaration of a type (often a private type or private extension) along with the declarations of primitive subprograms of the type, which can be called from outside the package, while their inner workings remain hidden from outside users.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"26/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"parallel construct"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["executable construct that defines multiple activities of a single task that can proceed in parallel, via the execution of multiple logical threads of control",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"27/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"partition"})]}),(0,i.jsxs)("dd",{children:["part of a program, which consists of a set of interdependent library units",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"28/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Each partition can run in a separate address space, possibly on a separate computer. A program can contain just one partition, or it can be distributed across multiple partitions, which can execute concurrently.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"29/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"pragma"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["compiler directive to provide control over and above that provided by the other syntactic constructs of the language",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"30/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: There are language-defined pragmas that give instructions for optimization, listing control, etc. An implementation can support additional (implementation-defined) pragmas.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"31/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"program"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["set of partitions, each of which can execute in a separate address space, possibly on a separate computer",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"32/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"program unit"})]}),(0,i.jsxs)("dd",{children:["language construct that is a package, a task unit, a protected unit, a protected entry, a generic unit, or an explicitly declared subprogram other than an enumeration literal",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"33/5_1.3.3"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Certain kinds of program units can be separately compiled. Alternatively, they can appear physically nested within other program units.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"34/5_1.3.3"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"reduction expression"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["expression that defines how to map or transform a collection of values into a new set of values, and then summarize the values by applying an operation to reduce the set to a single value",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"35/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"renaming"})]}),(0,i.jsxs)("dd",{children:["declaration that does not define a new entity, but instead defines a new view of an existing entity",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"36/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"specialized needs annex"})]}),(0,i.jsxs)("dd",{children:["annex in which are defined language constructs or capabilities that are not necessarily provided by all conforming implementations",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"37/5_1.3.3"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"subunit"})]}),(0,i.jsxs)("dd",{children:["body of a program unit that can be compiled separately from its enclosing program unit",(0,i.jsx)("br",{})]}),(0,i.jsx)("a",{id:"Subclause_1.3.4"})]}),"\n",(0,i.jsx)(s.h2,{id:"134--runtime-actions",children:"1.3.4  Runtime Actions"}),"\n",(0,i.jsx)(c.Z,{children:"1/5_1.3.4"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"assertion"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["boolean expression that is expected to be True at run time at certain specified places",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"2/5_1.3.4"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Certain pragmas and aspects define various kinds of assertions.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"3/5_1.3.4"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"elaboration"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["process by which a declaration achieves its run-time effect",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"4/5_1.3.4"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Elaboration is one of the forms of execution.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"5/5_1.3.4"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"evaluation"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["process by which an expression achieves its run-time effect",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"6/5_1.3.4"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Evaluation is one of the forms of execution.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"7/5_1.3.4"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"execution"})]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["process by which a construct achieves its run-time effect",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"8/5_1.3.4"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Execution of a declaration is also called elaboration. Execution of an expression is also called evaluation.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.Z,{children:"9/5_1.3.4"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"logical thread of control"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["activity within the execution of a program that can proceed in parallel with other activities of the same task, or of separate tasks",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"10/5_1.3.4"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"master"})]}),(0,i.jsxs)("dd",{children:["execution of a master construct",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"11/5_1.3.4"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: Each object and task is associated with a master. When a master is left, associated tasks are awaited and associated objects are finalized.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_1.3.5"}),"\n",(0,i.jsx)(s.h2,{id:"135--exceptional-situations",children:"1.3.5  Exceptional Situations"}),"\n",(0,i.jsx)(c.Z,{children:"1/5_1.3.5"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"check"})]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["test made during execution to determine whether a language rule has been violated",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"2/5_1.3.5"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"exception"})]}),(0,i.jsxs)("dd",{children:["kind of exceptional situation",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"3/5_1.3.5"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"exception occurrence"})]}),(0,i.jsxs)("dd",{children:["run-time occurrence of an exceptional situation",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"4/5_1.3.5"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"handle an exception"})]}),(0,i.jsxs)("dd",{children:["perform some actions in response to the arising of an exception",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"5/5_1.3.5"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"raise an exception"})]}),(0,i.jsxs)("dd",{children:["abandon normal program execution so as to draw attention to the fact that the corresponding situation has arisen",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.Z,{children:"6/5_1.3.5"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),(0,i.jsx)("b",{children:"suppress a check"})]}),(0,i.jsxs)("dd",{children:["assert that the check cannot fail, and request that the compiler optimize by disabling the check",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(d.Z,{children:[(0,i.jsx)(c.Z,{children:"7/5_1.3.5"}),(0,i.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,i.jsxs)(s.p,{children:["Note: The compiler is not required to honor this request. Suppressing checks that can fail can cause a program to behave in arbitrary ways.",(0,i.jsx)("br",{})]})})]})]})}function b(e={}){let{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);