"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([["685"],{3517:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>r,toc:()=>c,default:()=>h,metadata:()=>t,assets:()=>l,contentTitle:()=>o});var t=JSON.parse('{"id":"style-guide/s4/04","title":"4.4 Summary","description":"high-level structure","source":"@site/docs/style-guide/s4/04.mdx","sourceDirName":"style-guide/s4","slug":"/style-guide/s4/04","permalink":"/docs/style-guide/s4/04","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"4.4 Summary"},"sidebar":"styleGuideSidebar","previous":{"title":"4.3 Exceptions","permalink":"/docs/style-guide/s4/03"},"next":{"title":"5. Programming Practices","permalink":"/docs/style-guide/s5/"}}'),s=n(5893),a=n(65);let r={title:"4.4 Summary"},o=void 0,l={},c=[{value:"high-level structure",id:"high-level-structure",level:3},{value:"visibility",id:"visibility",level:3},{value:"exceptions",id:"exceptions",level:4}];function d(e){let i={a:"a",admonition:"admonition",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h3,{id:"high-level-structure",children:"high-level structure"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Place the specification of each library unit package in a separate\nfile from its body."}),"\n",(0,s.jsx)(i.li,{children:"Avoid defining library unit subprograms that are not intended to be\nused as main programs. If such subprograms are defined, then create\nan explicit specification, in a separate file, for each library unit\nsubprogram."}),"\n",(0,s.jsx)(i.li,{children:"Minimize the use of subunits."}),"\n",(0,s.jsx)(i.li,{children:"In preference to subunits, use child library units to structure a\nsubsystem into manageable units."}),"\n",(0,s.jsx)(i.li,{children:"Place each subunit in a separate file."}),"\n",(0,s.jsx)(i.li,{children:"Use a consistent file naming convention."}),"\n",(0,s.jsx)(i.li,{children:"In preference to nesting in a package body, use a private child and\nwith it to the parent body."}),"\n",(0,s.jsx)(i.li,{children:"Use private child unit specifications for data and subprograms that\nare required by (other) child units that extend a parent unit's\nabstraction or services."}),"\n",(0,s.jsx)(i.li,{children:"When possible, express configuration pragmas through compiler\noptions or other means that do not require modifications to the\nsource code. ."}),"\n",(0,s.jsx)(i.li,{children:"When configuration pragmas must be placed in source code, consider\nisolating them to one compilation unit per partition; if specified,\nthe main subprogram for the partition is recommended."}),"\n",(0,s.jsx)(i.li,{children:"Use subprograms to enhance abstraction."}),"\n",(0,s.jsx)(i.li,{children:"Restrict each subprogram to the performance of a single action."}),"\n",(0,s.jsx)(i.li,{children:"Use a function when the subprogram's primary purpose is to provide a\nsingle value."}),"\n",(0,s.jsx)(i.li,{children:"Minimize the side effect of a function."}),"\n",(0,s.jsx)(i.li,{children:"Consider using a parameterless function when the value does not need\nto be static."}),"\n",(0,s.jsx)(i.li,{children:"Use a parameterless function (instead of a constant) if the value\nshould be inherited by types derived from the type."}),"\n",(0,s.jsx)(i.li,{children:"Use a parameterless function if the value itself is subject to\nchange."}),"\n",(0,s.jsx)(i.li,{children:"Use packages for information hiding."}),"\n",(0,s.jsx)(i.li,{children:"Use packages with tagged types and private types for abstract data\ntypes."}),"\n",(0,s.jsx)(i.li,{children:"Use packages to model abstract entities appropriate to the problem\ndomain."}),"\n",(0,s.jsx)(i.li,{children:"Use packages to group together related type and object declarations\n(e.g., common declarations for two or more library units)."}),"\n",(0,s.jsx)(i.li,{children:"Encapsulate machine dependencies in packages. Place a software\ninterface to a particular device in a package to facilitate a change\nto a different device."}),"\n",(0,s.jsx)(i.li,{children:"Place low-level implementation decisions or interfaces in\nsubprograms within packages."}),"\n",(0,s.jsx)(i.li,{children:"Use packages and subprograms to encapsulate and hide program details\nthat may change (Nissen and Wallis 1984)."}),"\n",(0,s.jsx)(i.li,{children:"If a new library unit represents a logical extension to the original\nabstraction, define it as a child library unit."}),"\n",(0,s.jsx)(i.li,{children:"If a new library unit is independent (e.g., introduces a new\nabstraction that depends only in part on the existing one), then\nencapsulate the new abstraction in a separate library unit."}),"\n",(0,s.jsx)(i.li,{children:"Use child packages to implement a subsystem."}),"\n",(0,s.jsx)(i.li,{children:"Use public child units for those parts of a subsystem that should be\nvisible to clients of the subsystem."}),"\n",(0,s.jsx)(i.li,{children:"Use private child units for those parts of a subsystem that should\nnot be visible to clients of the subsystem."}),"\n",(0,s.jsx)(i.li,{children:"Use private child units for local declarations used only in\nimplementing the package specification."}),"\n",(0,s.jsx)(i.li,{children:"Use child packages to implement constructors, even when they return\naccess values."}),"\n",(0,s.jsx)(i.li,{children:"Make each package serve a single purpose."}),"\n",(0,s.jsx)(i.li,{children:"Use packages to group related data, types, and subprograms."}),"\n",(0,s.jsx)(i.li,{children:"Avoid collections of unrelated objects and subprograms (NASA 1987;\nNissen and Wallis 1984)."}),"\n",(0,s.jsx)(i.li,{children:"Consider restructuring a system to move two highly related units\ninto the same package (or package hierarchy) or to move relatively\nindependent units into separate packages."}),"\n",(0,s.jsx)(i.li,{children:"Avoid declaring variables in package specifications."}),"\n",(0,s.jsx)(i.li,{children:"Use tasks to model abstract, asynchronous entities within the\nproblem domain."}),"\n",(0,s.jsx)(i.li,{children:"Use tasks to define concurrent algorithms for multiprocessor\narchitectures."}),"\n",(0,s.jsx)(i.li,{children:"Use tasks to perform concurrent, cyclic, or prioritized activities\n(NASA 1987)."}),"\n",(0,s.jsx)(i.li,{children:"Use protected types to control or synchronize access to data or\ndevices."}),"\n",(0,s.jsx)(i.li,{children:"Use protected types to implement synchronization tasks, such as a\npassive resource monitor."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"visibility",children:"visibility"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Put only what is needed for the use of a package into its\nspecification."}),"\n",(0,s.jsx)(i.li,{children:"Minimize the number of declarations in package specifications."}),"\n",(0,s.jsx)(i.li,{children:"Do not include extra operations simply because they are easy to\nbuild."}),"\n",(0,s.jsx)(i.li,{children:"Minimize the context (with) clauses in a package specification."}),"\n",(0,s.jsx)(i.li,{children:"Reconsider subprograms that seem to require large numbers of\nparameters."}),"\n",(0,s.jsx)(i.li,{children:"Do not manipulate global data within a subprogram or package merely\nto limit the number of parameters."}),"\n",(0,s.jsx)(i.li,{children:"Avoid unnecessary visibility; hide the implementation details of a\nprogram unit from its users."}),"\n",(0,s.jsx)(i.li,{children:"Use child library units to control the visibility of parts of a\nsubsystem interface."}),"\n",(0,s.jsx)(i.li,{children:"Use private child packages for those declarations that should not be\nused outside the subsystem."}),"\n",(0,s.jsx)(i.li,{children:"Use child library units to present different views of an entity to\ndifferent clients."}),"\n",(0,s.jsx)(i.li,{children:"Design (and redesign) interfaces after having worked out the logic\nof various expected clients of the interface."}),"\n",(0,s.jsx)(i.li,{children:"Use child packages rather than nested packages to present different\nviews of the same abstraction."}),"\n",(0,s.jsx)(i.li,{children:"Nest package specifications within another package specification\nonly for grouping operations or hiding common implementation\ndetails."}),"\n",(0,s.jsx)(i.li,{children:"Consider using private child packages in lieu of nesting."}),"\n",(0,s.jsx)(i.li,{children:"Restrict the visibility of program units as much as possible by\nnesting them inside package bodies (Nissen and Wallis 1984) if you\ncannot use a private child package."}),"\n",(0,s.jsx)(i.li,{children:"Minimize nesting program units inside subprograms and tasks."}),"\n",(0,s.jsx)(i.li,{children:"Minimize the scope within which with clauses apply."}),"\n",(0,s.jsx)(i.li,{children:"Only with those units directly needed."}),"\n",(0,s.jsx)(i.li,{children:"Carefully consider encapsulation of tasks."}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"exceptions",children:"exceptions"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"For unavoidable internal errors for which no user recovery is\npossible, declare a single user-visible exception. Inside the\nabstraction, provide a way to distinguish between the different\ninternal errors."}),"\n",(0,s.jsx)(i.li,{children:"Do not borrow an exception name from another context."}),"\n",(0,s.jsx)(i.li,{children:"Export (declare visibly to the user) the names of all exceptions\nthat can be raised."}),"\n",(0,s.jsx)(i.li,{children:"In a package, document which exceptions can be raised by each\nsubprogram and task entry."}),"\n",(0,s.jsx)(i.li,{children:"Do not raise exceptions for internal errors that can be avoided or\ncorrected within the unit."}),"\n",(0,s.jsx)(i.li,{children:"Do not raise the same exception to report different kinds of errors\nthat are distinguishable by the user of the unit."}),"\n",(0,s.jsx)(i.li,{children:"Provide interrogative functions that allow the user of a unit to\navoid causing exceptions to be raised."}),"\n",(0,s.jsx)(i.li,{children:"When possible, avoid changing state information in a unit before\nraising an exception."}),"\n",(0,s.jsx)(i.li,{children:"Catch and convert or handle all predefined and compiler-defined\nexceptions at the earliest opportunity."}),"\n",(0,s.jsx)(i.li,{children:"Do not explicitly raise predefined or implementation-defined\nexceptions."}),"\n",(0,s.jsx)(i.li,{children:"Never let an exception propagate beyond its scope."}),"\n"]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:['This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,s.jsx)(i.a,{href:"https://en.wikibooks.org/wiki/Ada_Style_Guide",children:"https://en.wikibooks.org/wiki/Ada_Style_Guide"}),", which is\nlicensed under the\n",(0,s.jsx)(i.a,{href:"https://creativecommons.org/licenses/by-sa/3.0/",children:"Creative Commons Attribution-ShareAlike License"}),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work."]})})]})}function h(e={}){let{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);