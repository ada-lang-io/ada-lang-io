"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[2954],{79073:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"learn/lang/being-more-terse","title":"Being More Terse","description":"Ada is known for being more verbose than other languages because it prefers","source":"@site/docs/learn/lang/being-more-terse.md","sourceDirName":"learn/lang","slug":"/learn/lang/being-more-terse","permalink":"/docs/learn/lang/being-more-terse","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":99,"frontMatter":{"sidebar_position":99},"sidebar":"tutorialSidebar","previous":{"title":"Tasks","permalink":"/docs/learn/lang/tasks"},"next":{"title":"How-Tos","permalink":"/docs/category/how-tos"}}');var r=a(74848),i=a(28453);const t={sidebar_position:99},o="Being More Terse",d={},l=[{value:"Expression Functions",id:"expression-functions",level:2},{value:"Don&#39;t repeat parameter types",id:"dont-repeat-parameter-types",level:2},{value:"Locally use packages",id:"locally-use-packages",level:2},{value:"Abbreviate conversions functions",id:"abbreviate-conversions-functions",level:2},{value:"Use default parameters",id:"use-default-parameters",level:2},{value:"Rename subprograms with default parameters",id:"rename-subprograms-with-default-parameters",level:2},{value:"Locally define helper subprograms",id:"locally-define-helper-subprograms",level:2},{value:"Use package renames within <code>package body</code>",id:"use-package-renames-within-package-body",level:2},{value:"Use a package at file scope",id:"use-a-package-at-file-scope",level:2},{value:"Provide abstraction without introducing more code",id:"provide-abstraction-without-introducing-more-code",level:2},{value:"Rename complicated expressions",id:"rename-complicated-expressions",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"being-more-terse",children:"Being More Terse"})}),"\n",(0,r.jsx)(n.p,{children:"Ada is known for being more verbose than other languages because it prefers\nkeywords over symbology. These techniques can help you compact your Ada text\nwhere you need it."}),"\n",(0,r.jsx)(n.h2,{id:"expression-functions",children:"Expression Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'function "-"(V : Vec3) return Vec3 is\nbegin\n    return (-V.X, -V.Y, -V.Z);\nend "-";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Functions can return expressions without using a full ",(0,r.jsx)(n.code,{children:"begin"})," ... ",(0,r.jsx)(n.code,{children:"end"}),"\nsection. Just wrap your expression in parentheses."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'function "-"(V : Vec3) return Vec3 is (-V.X, -V.Y, -V.Z);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dont-repeat-parameter-types",children:"Don't repeat parameter types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"function Add (Left : Integer; Right : Integer)\n    return Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"If parameter types repeat, you can group them."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"function Add (Left, Right : Integer)\n    return Integer;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"locally-use-packages",children:"Locally use packages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'procedure Test_Is_Quoted (Op : in out TT.Operation\'Class) is\nbegin\n    Op.Register;\n    Op.Assert (not Is_Quoted (Ada.Characters.Latin_1.Quotation & "some text"));\nend Test_Is_Quoted;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using packages locally doesn't pollute your global namespace."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'procedure Test_Is_Quoted (Op : in out TT.Operation\'Class) is\n    use Ada.Characters.Latin_1;\nbegin\n    Op.Register;\n    Op.Assert (not Is_Quoted (Quotation & "some text"));\nend Test_Is_Quoted; -- Visibility of Latin_1 ends here.\n'})}),"\n",(0,r.jsx)(n.h2,{id:"abbreviate-conversions-functions",children:"Abbreviate conversions functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'Toggles.Append(Ada.Strings.Unbounded.To_Unbounded_String("--verbose"));\nToggles.Append(Ada.Strings.Unbounded.To_Unbounded_String("--skip-errors"));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The usage of ",(0,r.jsx)(n.code,{children:'"+"'})," as a function to convert from ",(0,r.jsx)(n.code,{children:"String"})," to\n",(0,r.jsx)(n.code,{children:"Ada.Strings.Unbounded.Unbounded_String"})," is common:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'function "+"(S : String) return String renames Ada.Strings.Unbounded.To_Unbounded_String;\nToggles.Append(+"--verbose");\nToggles.Append(+"--skip-errors");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"use-default-parameters",children:"Use default parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"S : Spinner := Make (In_Place, 1);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Default parameters allow you to apply common parameter values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"-- When this function signature is used...\nfunction Make (\n    Style          : Spinner_Style := In_Place;\n    Ticks_Per_Move : Positive := 1) return Spinner;\n\nS : Spinner := Make;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rename-subprograms-with-default-parameters",children:"Rename subprograms with default parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'S : String := Ada.Strings.Fixed.Trim ("  this is a string   ", Ada.Strings.Both);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.code,{children:"rename"})," a procedure with bound default parameters."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'function Strip(Input : String; Sides : Ada.Strings.Trim_End:= Ada.Strings.Both)\n    renames Ada.Strings.Fixed.Trim;\n\nS : String := Strip ("  this is a string   ");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"locally-define-helper-subprograms",children:"Locally define helper subprograms"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'procedure Test_Is_Quoted (Op : in out TT.Operation\'Class) is\n    use Ada.Characters.Latin_1;\nbegin\n    Op.Register;\n\n    Op.Assert (not Is_Quoted(""));\n    Op.Assert (not Is_Quoted ("not quoted"));\nend Test_Is_Quoted;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using a locally defined helper subprogram to simplify repeated local logic. Note\nthat these local subprograms don't pollute the global namespace."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'procedure Test_Is_Quoted (Op : in out TT.Operation\'Class) is\n    use Ada.Characters.Latin_1;\n    procedure Not_Quoted (S : String) is\n    begin\n        Op.Assert (not Is_Quoted(S));\n    end Not_Quoted;\nbegin\n    Op.Register;\n    Not_Quoted ("");\n    Not_Quoted ("not quoted");\nend Test_Is_Quoted;\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"use-package-renames-within-package-body",children:["Use package renames within ",(0,r.jsx)(n.code,{children:"package body"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'with Ada.Text_IO;\npackage body Hello_World is\n    procedure Greet is\n    begin\n        Ada.Text_IO.New_Line;\n        Ada.Text_IO.Put_Line ("Hello, world!");\n        Ada.Text_IO.New_Line;\n    end Greet;\nend Hello_World;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Show indication of where subprograms come from while shortening the names used\nfor them. Names inside package bodies won't be visible."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'with Ada.Text_IO;\npackage body Hello_World is\n    package AIO renames Ada.Text_IO;\n\n    procedure Greet is\n    begin\n        AIO.New_Line;\n        AIO.Put_Line ("Hello, world!");\n        AIO.New_Line;\n    end Greet;\nend Hello_World;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"use-a-package-at-file-scope",children:"Use a package at file scope"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'with Ada.Text_IO;\npackage body Hello_World is\n    procedure Greet is\n    begin\n        Ada.Text_IO.New_Line;\n        Ada.Text_IO.Put_Line ("Hello, world!");\n        Ada.Text_IO.New_Line;\n    end Greet;\nend Hello_World;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Some packages provide well-recognizable subprograms and hence cannot be confused\neasily. When these symbols are used often, using the package at the file scope\ncan cut down significantly on verboseness. You're polluting the namespace\nheavily so this should be used judiciously."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:'with Ada.Text_IO;  use Ada.Text_IO;\npackage body Hello_World is\n    procedure Greet is\n    begin\n        New_Line;\n        Put_Line ("Hello, world!");\n        New_Line;\n    end Greet;\nend Hello_World;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"provide-abstraction-without-introducing-more-code",children:"Provide abstraction without introducing more code"}),"\n",(0,r.jsx)(n.p,{children:"You might not know how you want to use a subprogram, but still want to separate it\nfrom another one which could stand-in for it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"package RT.Debug is\n    procedure Print (Str : String) renames Ada.Text_IO.Put_Line;\nend RT.Debug;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rename-complicated-expressions",children:"Rename complicated expressions"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes you might have long complicated expressions, which you can rename,\nwhich assigns their value when the renaming occurs. This is not text\nsubstitution, so the initial value cannot be modified."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ada",children:"with Ada.Text_IO;\n\nprocedure Sample is\n    use Ada.Text_IO;\n\n    type Int_List is array (1 .. 10) of Integer;\n    Values : Int_List := (others => 0);\n    Index : Integer := 1;\n    First : Integer renames Values(Index);\n    Second : Integer renames Values(2);\nbegin\n    Put_Line (First'Image);\n    Put_Line (Second'Image);\n\n    New_Line;\n    First := 5;\n    Put_Line (\"First changed to 5\");\n    Put_Line (First'Image);\n    Put_Line (Second'Image);\n\n    New_Line;\n    Index := 2;\n    Put_Line (\"Index changed to 2\");\n    Put_Line (First'Image);\n    Put_Line (Second'Image);\n\n    New_Line;\n    First := 7;\n    Put_Line (\"First changed to 7\");\n    Put_Line (First'Image);\n    Put_Line (Second'Image);\nend Sample;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"0\n0\n\nFirst changed to 5\n5\n0\n\nIndex changed to 2\n5\n0\n\nFirst changed to 7\n7\n0\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);