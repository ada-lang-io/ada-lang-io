"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8256],{5265:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"style-guide/s8/05","title":"8.5 Summary","description":"understanding and clarity","source":"@site/docs/style-guide/s8/05.mdx","sourceDirName":"style-guide/s8","slug":"/style-guide/s8/05","permalink":"/docs/style-guide/s8/05","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"8.5 Summary"},"sidebar":"styleGuideSidebar","previous":{"title":"8.4 Independence","permalink":"/docs/style-guide/s8/04"},"next":{"title":"9. Object-Oriented Features","permalink":"/docs/style-guide/s9/"}}');var a=i(74848),s=i(28453);const r={title:"8.5 Summary"},o=void 0,l={},d=[{value:"understanding and clarity",id:"understanding-and-clarity",level:3},{value:"robustness",id:"robustness",level:3},{value:"adaptability",id:"adaptability",level:3},{value:"independence",id:"independence",level:3}];function c(e){const n={a:"a",admonition:"admonition",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"understanding-and-clarity",children:"understanding and clarity"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Select the least restrictive names possible for reusable parts and\ntheir identifiers."}),"\n",(0,a.jsx)(n.li,{children:"Select the generic name to avoid conflicting with the naming\nconventions of instantiations of the generic."}),"\n",(0,a.jsx)(n.li,{children:"Use names that indicate the behavioral characteristics of the\nreusable part, as well as its abstraction ."}),"\n",(0,a.jsx)(n.li,{children:"Do not use abbreviations in identifier or unit names."}),"\n",(0,a.jsx)(n.li,{children:"Document the expected behavior of generic formal parameters just as\nyou document any package specification."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"robustness",children:"robustness"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use named numbers and static expressions to allow multiple\ndependencies to be linked to a small number of symbols."}),"\n",(0,a.jsx)(n.li,{children:"Use unconstrained array types for array formal parameters and array\nreturn values."}),"\n",(0,a.jsx)(n.li,{children:"Make the size of local variables depend on actual parameter size,\nwhere appropriate."}),"\n",(0,a.jsx)(n.li,{children:"Minimize the number of assumptions made by a unit."}),"\n",(0,a.jsx)(n.li,{children:"For assumptions that cannot be avoided, use subtypes or constraints\nto automatically enforce conformance."}),"\n",(0,a.jsx)(n.li,{children:"For assumptions that cannot be automatically enforced by subtypes,\nadd explicit checks to the code."}),"\n",(0,a.jsx)(n.li,{children:"Document all assumptions."}),"\n",(0,a.jsx)(n.li,{children:"If the code depends upon the implementation of a specific Special\nNeeds Annex for proper operation, document this assumption in the\ncode."}),"\n",(0,a.jsx)(n.li,{children:"Use first subtypes when declaring generic formal objects of mode in\nout."}),"\n",(0,a.jsx)(n.li,{children:"Beware of using subtypes as subtype marks when declaring parameters\nor return values of generic formal subprograms."}),"\n",(0,a.jsx)(n.li,{children:"Use attributes rather than literal values."}),"\n",(0,a.jsx)(n.li,{children:"Be careful about overloading the names of subprograms exported by\nthe same generic package."}),"\n",(0,a.jsx)(n.li,{children:"Within a specification, document any tasks that would be activated\nby with'ing the specification and by using any part of the\nspecification."}),"\n",(0,a.jsx)(n.li,{children:"Document which generic formal parameters are accessed from a task\nhidden inside the generic unit."}),"\n",(0,a.jsx)(n.li,{children:"Document any multithreaded components."}),"\n",(0,a.jsx)(n.li,{children:"Propagate exceptions out of reusable parts. Handle exceptions within\nreusable parts only when you are certain that the handling is\nappropriate in all circumstances."}),"\n",(0,a.jsx)(n.li,{children:"Propagate exceptions raised by generic formal subprograms after\nperforming any cleanup necessary to the correct operation of future\ninvocations of the generic instantiation."}),"\n",(0,a.jsx)(n.li,{children:"Leave state variables in a valid state when raising an exception."}),"\n",(0,a.jsx)(n.li,{children:"Leave parameters unmodified when raising an exception."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"adaptability",children:"adaptability"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Provide core functionality in a reusable part or set of parts so\nthat the functionality in this abstraction can be meaningfully\nextended by its reusers."}),"\n",(0,a.jsx)(n.li,{children:"More specifically, provide initialization and finalization\nprocedures for every data structure that may contain dynamic data."}),"\n",(0,a.jsx)(n.li,{children:"For data structures needing initialization and finalization,\nconsider deriving them, when possible, from the types\nAda.Finalization.Controlled or Ada.Finalization.Limited_Controlled."}),"\n",(0,a.jsx)(n.li,{children:"Use generic units to avoid code duplication."}),"\n",(0,a.jsx)(n.li,{children:"Parameterize generic units for maximum adaptability."}),"\n",(0,a.jsx)(n.li,{children:"Reuse common instantiations of generic units, as well as the generic\nunits themselves."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a limited private type for a generic formal type when\nyou do not need assignment on objects of the type inside the generic\nbody."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a nonlimited private type for a generic formal type\nwhen you need normal assignment on objects of the type inside the\nbody of the generic."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a formal tagged type derived from\nAda.Finalization.Controlled when you need to enforce special\nassignment semantics on objects of the type in the body of the\ngeneric."}),"\n",(0,a.jsx)(n.li,{children:"Export the least restrictive type that maintains the integrity of\nthe data and abstraction while allowing alternate implementations."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a limited private abstract type for generic formal\ntypes of a generic that extends a formal private tagged type."}),"\n",(0,a.jsx)(n.li,{children:"Use generic units to encapsulate algorithms independently of data\ntype."}),"\n",(0,a.jsx)(n.li,{children:"Consider using abstract data types (not to be confused with Ada's\nabstract types) in preference to abstract data objects."}),"\n",(0,a.jsx)(n.li,{children:"Consider using generic units to implement abstract data types\nindependently of their component data type."}),"\n",(0,a.jsx)(n.li,{children:"Provide iterators for traversing complex data structures within\nreusable parts."}),"\n",(0,a.jsx)(n.li,{children:"Consider providing both active and passive iterators."}),"\n",(0,a.jsx)(n.li,{children:"Protect the iterators from errors due to modification of the data\nstructure during iteration."}),"\n",(0,a.jsx)(n.li,{children:"Document the behavior of the iterators when the data structure is\nmodified during traversal."}),"\n",(0,a.jsx)(n.li,{children:"Localize the currency symbol, digits separator, radix mark, and fill\ncharacter in picture output."}),"\n",(0,a.jsx)(n.li,{children:"Consider using the # character in picture layouts so that the\nedited numeric output lengths are invariant across currency symbols\nof different lengths."}),"\n",(0,a.jsx)(n.li,{children:'Consider using abstract tagged types and generics to define reusable\nunits of functionality that can be "mixed into" core abstractions\n(also known as mixins).'}),"\n",(0,a.jsx)(n.li,{children:"Consider structuring subsystems so that operations that are only\nused in a particular context are in different child packages than\noperations used in a different context."}),"\n",(0,a.jsx)(n.li,{children:"Consider declaring context-independent functionality in the parent\npackage and context-dependent functionality in child packages."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"independence",children:"independence"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Minimize with clauses on reusable parts, especially on their\nspecifications."}),"\n",(0,a.jsx)(n.li,{children:"Consider using generic parameters instead of with statements to\nreduce the number of context clauses on a reusable part."}),"\n",(0,a.jsx)(n.li,{children:"Consider using generic formal package parameters to import directly\nall the types and operations defined in an instance of a preexisting\ngeneric."}),"\n",(0,a.jsx)(n.li,{children:"In the specification of a generic library unit, use pragma\nElaborate_Body."}),"\n",(0,a.jsx)(n.li,{children:"Create families of generic or other parts with similar\nspecifications."}),"\n",(0,a.jsx)(n.li,{children:"Structure reusable code to take advantage of dead code removal by\nthe compiler."}),"\n",(0,a.jsx)(n.li,{children:"Write table-driven reusable parts wherever possible and appropriate."}),"\n",(0,a.jsx)(n.li,{children:"Use the predefined packages for string handling."}),"\n",(0,a.jsx)(n.li,{children:"Consider using hierarchies of tagged types to promote generalization\nof software for reuse."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a tagged type hierarchy to decouple a generalized\nalgorithm from the details of dependency on specific types."}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:['This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,a.jsx)(n.a,{href:"https://en.wikibooks.org/wiki/Ada_Style_Guide",children:"https://en.wikibooks.org/wiki/Ada_Style_Guide"}),", which is\nlicensed under the\n",(0,a.jsx)(n.a,{href:"https://creativecommons.org/licenses/by-sa/3.0/",children:"Creative Commons Attribution-ShareAlike License"}),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);