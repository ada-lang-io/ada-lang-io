"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([["2704"],{88835:function(e,s,r){r.r(s),r.d(s,{frontMatter:()=>x,toc:()=>A,default:()=>u,metadata:()=>i,assets:()=>j,contentTitle:()=>o});var i=JSON.parse('{"id":"arm/AA-2/AA-2.4","title":"2.4. Numeric Literals","description":"This Reference Manual output has not been verified,","source":"@site/docs/arm/AA-2/AA-2.4.mdx","sourceDirName":"arm/AA-2","slug":"/arm/AA-2/AA-2.4","permalink":"/docs/arm/AA-2/AA-2.4","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"referenceManualSidebar","previous":{"title":"2.3. Identifiers","permalink":"/docs/arm/AA-2/AA-2.3"},"next":{"title":"2.5. Character Literals","permalink":"/docs/arm/AA-2/AA-2.5"}}'),n=r(85893),d=r(50065),a=r(13393),l=r(82315),c=r(88514),h=r(1927),t=r(96470);let x={sidebar_position:12},o="2.4. Numeric Literals",j={},A=[{value:"Syntax",id:"syntax",level:4},{value:"2.4.1  Decimal Literals",id:"241--decimal-literals",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"2.4.2  Based Literals",id:"242--based-literals",level:2},{value:"Syntax",id:"syntax-2",level:4},{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-1",level:4}];function m(e){let s={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"24-numeric-literals",children:"2.4. Numeric Literals"})}),"\n",(0,n.jsx)(s.admonition,{type:"danger",children:(0,n.jsxs)(s.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,n.jsx)(s.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,n.jsx)(h.Z,{children:"1"}),"\n",(0,n.jsxs)("p",{children:["There are two kinds of ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})}),"s, ",(0,n.jsx)("i",{children:"real literals"})," and ",(0,n.jsx)("i",{children:"integer literals"}),". A real literal is a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})})," that includes a point; an integer literal is a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})})," without a point. ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(h.Z,{children:"2"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsxs)("code",{children:["numeric","_","literal"]}),(0,n.jsx)("a",{id:"S0006"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0007",children:"decimal_literal"})})," | ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0011",children:"based_literal"})}),(0,n.jsx)("br",{})]})}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsx)(h.Z,{children:"3"}),(0,n.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,n.jsxs)(s.p,{children:["NOTE   The type of an integer literal is ",(0,n.jsxs)("i",{children:["universal","_","integer"]}),". The type of a real literal is ",(0,n.jsxs)("i",{children:["universal","_","real"]}),". ",(0,n.jsx)("br",{})]})})]}),"\n",(0,n.jsx)("a",{id:"Subclause_2.4.1"}),"\n",(0,n.jsx)(s.h2,{id:"241--decimal-literals",children:"2.4.1  Decimal Literals"}),"\n",(0,n.jsx)(h.Z,{children:"1_2.4.1"}),"\n",(0,n.jsxs)("p",{children:["A ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0007",children:"decimal_literal"})})," is a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})})," in the conventional decimal notation (that is, the base is ten). ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,n.jsx)(h.Z,{children:"2_2.4.1"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsxs)("code",{children:["decimal","_","literal"]}),(0,n.jsx)("a",{id:"S0007"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})})," [.",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})}),"] [",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})}),"]",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"3_2.4.1"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)("code",{children:"numeral"}),(0,n.jsx)("a",{id:"S0008"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0010",children:"digit"})})," ","{","[",(0,n.jsx)("code",{children:"underline"}),"] ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0010",children:"digit"})}),"}",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"4_2.4.1"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)("code",{children:"exponent"}),(0,n.jsx)("a",{id:"S0009"}),(0,n.jsx)("code",{children:" ::= "}),"E [+] ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})})," | E \u2013 ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})}),(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"4.1/2_2.4.1"}),"\n",(0,n.jsx)(t.Z,{items:["AI95-00285-01"]}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)("code",{children:"digit"}),(0,n.jsx)("a",{id:"S0010"}),(0,n.jsx)("code",{children:" ::= "}),"0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"5_2.4.1"}),"\n",(0,n.jsxs)("p",{class:"Indented2",children:["An ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," for an integer literal shall not have a minus sign. ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsx)(h.Z,{children:"5.a_2.4.1"}),(0,n.jsx)(a.Z,{type:"aarm",aarm:"ramification",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)("b",{}),"Although this rule is in this subclause, it applies also to the next subclause. ",(0,n.jsx)("br",{})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,n.jsx)(h.Z,{children:"6_2.4.1"}),"\n",(0,n.jsxs)("p",{children:["An underline character in a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})})," does not affect its meaning. The letter E of an ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," can be written either in lower case or in upper case, with the same meaning. ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsx)(h.Z,{children:"6.a_2.4.1"}),(0,n.jsx)(a.Z,{type:"aarm",aarm:"ramification",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)("b",{}),"Although these rules are in this subclause, they apply also to the next subclause. ",(0,n.jsx)("br",{})]})})]}),"\n",(0,n.jsx)(h.Z,{children:"7_2.4.1"}),"\n",(0,n.jsxs)("p",{children:["An ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," indicates the power of ten by which the value of the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0007",children:"decimal_literal"})})," without the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," is to be multiplied to obtain the value of the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0007",children:"decimal_literal"})})," with the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})}),". ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(h.Z,{children:"8_2.4.1"}),"\n",(0,n.jsxs)("p",{children:[(0,n.jsx)("i",{children:"Examples of decimal literals:"})," ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(h.Z,{children:"9_2.4.1"}),"\n",(0,n.jsx)(c.Z,{language:"ada",children:(0,n.jsxs)(s.p,{children:["12        0      1E6    123","_","456    --  integer literals","\n","\n","12.0      0.0    0.456  3.14159","_","26 --  real literals","\n"]})}),"\n",(0,n.jsx)(l.Z,{children:(0,n.jsx)(s.h4,{id:"wording-changes-from-ada-83",children:"Wording Changes from Ada 83"})}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsx)(h.Z,{children:"9.a_2.4.1"}),(0,n.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,n.jsxs)(s.p,{children:["We have changed the syntactic category name ",(0,n.jsx)("code",{children:"integer"})," to be ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})}),". We got this idea from ACID. It avoids the confusion between this and integers. (Other places don't offer similar confusions. For example, a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.6#S0016",children:"string_literal"})})," is different from a string.) ",(0,n.jsx)("br",{})]})})]}),"\n",(0,n.jsx)("a",{id:"Subclause_2.4.2"}),"\n",(0,n.jsx)(s.h2,{id:"242--based-literals",children:"2.4.2  Based Literals"}),"\n",(0,n.jsx)(h.Z,{children:"1_2.4.2"}),"\n",(0,n.jsxs)("p",{children:["[ A ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0011",children:"based_literal"})})," is a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0006",children:"numeric_literal"})})," expressed in a form that specifies the base explicitly.] ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,n.jsx)(h.Z,{children:"2_2.4.2"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsxs)("code",{children:["based","_","literal"]}),(0,n.jsx)("a",{id:"S0011"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("br",{}),"   ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0012",children:"base"})})," ","#"," ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0013",children:"based_numeral"})})," [.",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0013",children:"based_numeral"})}),"] ","#"," [",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})}),"]",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"3_2.4.2"}),"\n",(0,n.jsxs)(c.Z,{children:[(0,n.jsx)("code",{children:"base"}),(0,n.jsx)("a",{id:"S0012"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})}),(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(h.Z,{children:"4_2.4.2"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsxs)("code",{children:["based","_","numeral"]}),(0,n.jsx)("a",{id:"S0013"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("br",{}),"   ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0014",children:"extended_digit"})})," ","{","[",(0,n.jsx)("code",{children:"underline"}),"] ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0014",children:"extended_digit"})}),"}",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(h.Z,{children:"5_2.4.2"}),"\n",(0,n.jsx)(c.Z,{children:(0,n.jsxs)(s.p,{children:[(0,n.jsxs)("code",{children:["extended","_","digit"]}),(0,n.jsx)("a",{id:"S0014"}),(0,n.jsx)("code",{children:" ::= "}),(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0010",children:"digit"})})," | A | B | C | D | E | F",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsx)(s.h4,{id:"legality-rules",children:"Legality Rules"}),"\n",(0,n.jsx)(h.Z,{children:"6_2.4.2"}),"\n",(0,n.jsxs)("p",{children:["The ",(0,n.jsx)("i",{children:"base"})," (the numeric value of the decimal ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0008",children:"numeral"})})," preceding the first ","#",") shall be at least two and at most sixteen. The ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0014",children:"extended_digit"})}),"s A through F represent the digits ten through fifteen, respectively. The value of each ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0014",children:"extended_digit"})})," of a ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0011",children:"based_literal"})})," shall be less than the base. ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"static-semantics-1",children:"Static Semantics"}),"\n",(0,n.jsx)(h.Z,{children:"7_2.4.2"}),"\n",(0,n.jsxs)("p",{children:["The conventional meaning of based notation is assumed. An ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," indicates the power of the base by which the value of the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0011",children:"based_literal"})})," without the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})})," is to be multiplied to obtain the value of the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0011",children:"based_literal"})})," with the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})}),". The ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0012",children:"base"})})," and the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0009",children:"exponent"})}),", if any, are in decimal notation.",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(h.Z,{children:"8_2.4.2"}),"\n",(0,n.jsxs)("p",{children:["The ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-2/AA-2.4#S0014",children:"extended_digit"})}),"s A through F can be written either in lower case or in upper case, with the same meaning. ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(s.h4,{id:"examples-1",children:"Examples"}),"\n",(0,n.jsx)(h.Z,{children:"9_2.4.2"}),"\n",(0,n.jsxs)("p",{children:[(0,n.jsx)("i",{children:"Examples of based literals:"})," ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(h.Z,{children:"10_2.4.2"}),"\n",(0,n.jsx)(c.Z,{language:"ada",children:(0,n.jsxs)(s.p,{children:["2","#","1111","_","1111","#","  16","#","FF","#","      016","#","0ff","#","  -- integer literals of value 255","\n","16","#","E","#","E1      2","#","1110","_","0000","#","           -- integer literals of value 224","\n","16","#","F.FF","#","E+2  2","#","1.1111","_","1111","_","1110","#","E11 -- real literals of value 4095.0","\n"]})}),"\n",(0,n.jsx)(l.Z,{children:(0,n.jsx)(s.h4,{id:"wording-changes-from-ada-83-1",children:"Wording Changes from Ada 83"})}),"\n",(0,n.jsxs)(l.Z,{children:[(0,n.jsx)(h.Z,{children:"10.a_2.4.2"}),(0,n.jsx)(a.Z,{type:"aarm",aarm:"note",children:(0,n.jsxs)(s.p,{children:["The rule about which letters are allowed is now encoded in BNF, as suggested by Mike Woodger. This is clearly more readable. ",(0,n.jsx)("br",{})]})})]})]})}function u(e={}){let{wrapper:s}={...(0,d.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);