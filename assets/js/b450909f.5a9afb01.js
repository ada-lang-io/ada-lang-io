"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[5004],{8690:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"style-guide/Source_Code_Presentation","title":"2. Source Code Presentation","description":"The physical layout of source text on the page or screen has a strong","source":"@site/docs/style-guide/Source_Code_Presentation.mdx","sourceDirName":"style-guide","slug":"/style-guide/Source_Code_Presentation","permalink":"/docs/style-guide/Source_Code_Presentation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"2. Source Code Presentation","sidebar_position":2},"sidebar":"styleGuideSidebar","previous":{"title":"1. Introduction","permalink":"/docs/style-guide/Introduction"},"next":{"title":"3. Readability","permalink":"/docs/style-guide/s3/"}}');var a=i(4848),s=i(8453);const o={title:"2. Source Code Presentation",sidebar_position:2},r=void 0,l={},d=[{value:"Code Formatting",id:"code-formatting",level:2},{value:"Horizontal Spacing",id:"horizontal-spacing",level:3},{value:"guideline",id:"guideline",level:4},{value:"instantiation",id:"instantiation",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale",level:4},{value:"exceptions",id:"exceptions",level:4},{value:"automation notes",id:"automation-notes",level:4},{value:"Indentation",id:"indentation",level:3},{value:"guideline",id:"guideline-1",level:4},{value:"instantiation",id:"instantiation-1",level:4},{value:"example",id:"example-1",level:4},{value:"rationale",id:"rationale-1",level:4},{value:"exceptions",id:"exceptions-1",level:4},{value:"automation notes",id:"automation-notes-1",level:4},{value:"Alignment of Operators",id:"alignment-of-operators",level:3},{value:"guideline",id:"guideline-2",level:4},{value:"example",id:"example-2",level:4},{value:"rationale",id:"rationale-2",level:4},{value:"exceptions",id:"exceptions-2",level:4},{value:"automation notes",id:"automation-notes-2",level:4},{value:"Alignment of Declarations",id:"alignment-of-declarations",level:3},{value:"guideline",id:"guideline-3",level:4},{value:"instantiation",id:"instantiation-2",level:4},{value:"example",id:"example-3",level:4},{value:"rationale",id:"rationale-3",level:4},{value:"automation notes",id:"automation-notes-3",level:4},{value:"More on Alignment",id:"more-on-alignment",level:3},{value:"guideline",id:"guideline-4",level:4},{value:"instantiation",id:"instantiation-3",level:4},{value:"example",id:"example-4",level:4},{value:"rationale",id:"rationale-4",level:4},{value:"notes",id:"notes",level:4},{value:"exceptions",id:"exceptions-3",level:4},{value:"automation notes",id:"automation-notes-4",level:4},{value:"Blank Lines",id:"blank-lines",level:3},{value:"guideline",id:"guideline-5",level:4},{value:"example",id:"example-5",level:4},{value:"rationale",id:"rationale-5",level:4},{value:"automation notes",id:"automation-notes-5",level:4},{value:"Pagination",id:"pagination",level:3},{value:"guideline",id:"guideline-6",level:4},{value:"instantiation",id:"instantiation-4",level:4},{value:"example",id:"example-6",level:4},{value:"rationale",id:"rationale-6",level:4},{value:"exceptions",id:"exceptions-4",level:4},{value:"automation notes",id:"automation-notes-6",level:4},{value:"Number of Statements Per Line",id:"number-of-statements-per-line",level:3},{value:"guideline",id:"guideline-7",level:4},{value:"example",id:"example-7",level:4},{value:"rationale",id:"rationale-7",level:4},{value:"exceptions",id:"exceptions-5",level:4},{value:"automation notes",id:"automation-notes-7",level:4},{value:"exceptions",id:"exceptions-6",level:4},{value:"Source Code Line Length",id:"source-code-line-length",level:3},{value:"guideline",id:"guideline-8",level:4},{value:"instantiation",id:"instantiation-5",level:4},{value:"rationale",id:"rationale-8",level:4},{value:"exceptions",id:"exceptions-7",level:4},{value:"automation notes",id:"automation-notes-8",level:4},{value:"Summary",id:"summary",level:2},{value:"code formatting",id:"code-formatting-1",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The physical layout of source text on the page or screen has a strong\neffect on its readability. This chapter contains source code\npresentation guidelines intended to make the code more readable."}),"\n",(0,a.jsx)(n.p,{children:'In addition to the general purpose guidelines, specific recommendations\nare made in the "instantiation" sections. If you disagree with the\nspecific recommendations, you may want to adopt your own set of\nconventions that still follow the general purpose guidelines. Above all,\nbe consistent across your entire project.'}),"\n",(0,a.jsx)(n.p,{children:'An entirely consistent layout is hard to achieve or check manually.\nTherefore, you may prefer to automate layout with a tool for\nparameterized code formatting or incorporate the guidelines into an\nautomatic coding template. Some of the guidelines and specific\nrecommendations presented in this chapter cannot be enforced by a\nformatting tool because they are based on the semantics, not the syntax,\nof the Ada code. More details are given in the "automation notes"\nsections.'}),"\n",(0,a.jsx)(n.h2,{id:"code-formatting",children:"Code Formatting"}),"\n",(0,a.jsx)(n.p,{children:'The "code formatting" of Ada source code affects how the code looks, not\nwhat the code does. Topics included here are horizontal spacing,\nindentation, alignment, pagination, and line length. The most important\nguideline is to be consistent throughout the compilation unit as well as\nthe project.'}),"\n",(0,a.jsx)(n.h3,{id:"horizontal-spacing",children:"Horizontal Spacing"}),"\n",(0,a.jsx)(n.h4,{id:"guideline",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use consistent spacing around delimiters."}),"\n",(0,a.jsx)(n.li,{children:"Use the same spacing as you would in regular prose."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"Specifically, leave at least one blank space in the following places, as\nshown in the examples throughout this book. More spaces may be required\nfor the vertical alignment recommended in subsequent guidelines."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Before and after the following delimiters and binary operators:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"  + - * / &\n  < = > /= <= >=\n  := => | ..\n  :\n  <>\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Outside of the quotes for string (\") and character (' ) literals,\nexcept where prohibited."}),"\n",(0,a.jsx)(n.li,{children:"Outside, but not inside, parentheses."}),"\n",(0,a.jsx)(n.li,{children:"After commas (,) and semicolons (;)."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Do not leave any blank spaces in the following places, even if this\nconflicts with the above recommendations."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"After the plus (+) and minus (-) signs when used as unary operators."}),"\n",(0,a.jsx)(n.li,{children:"After a function call."}),"\n",(0,a.jsx)(n.li,{children:"Inside of label delimiters (<< >>)."}),"\n",(0,a.jsx)(n.li,{children:"Before and after the exponentiation operator (**), apostrophe ('),\nand period (.)"}),"\n",(0,a.jsx)(n.li,{children:"Between multiple consecutive opening or closing parentheses."}),"\n",(0,a.jsx)(n.li,{children:"Before commas (,) and semicolons (;)."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"When superfluous parentheses are omitted because of operator precedence\nrules, spaces may optionally be removed around the highest precedence\noperators in that expression."}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'Default_String : constant String :=\n      "This is the long string returned by" &\n      " default. It is broken into multiple" &\n      " Ada source lines for convenience.";\n\ntype Signed_Whole_16 is range -2**15 .. 2**15 - 1;\ntype Address_Area  is array (Natural range <>) of Signed_Whole_16;\n\nRegister : Address_Area (16#7FF0# .. 16#7FFF#);\nMemory   : Address_Area (       0 .. 16#7FEC#);\n\nRegister (Pc) := Register (A);\n\nX := Signed_Whole_16 (Radius * Sin (Angle));\n\nRegister (Index) := Memory (Base_Address + Index * Element_Length);\n\nGet (Value => Sensor);\n\nError_Term := 1.0 - (Cos (Theta)**2 + Sin (Theta)**2);\n\nZ      := X**3;\nY      := C * X + B;\nVolume := Length * Width * Height;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"rationale",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"It is a good idea to use white space around delimiters and operators\nbecause they are typically short sequences (one or two characters) that\ncan easily get lost among the longer keywords and identifiers. Putting\nwhite space around them makes them stand out. Consistency in spacing\nalso helps make the source code easier to scan visually."}),"\n",(0,a.jsx)(n.p,{children:"However, many of the delimiters (commas, semicolons, parentheses, etc.)\nare familiar as normal punctuation marks. It is distracting to see them\nspaced differently in a computer program than in normal text. Therefore,\nuse the same spacing as in text (no spaces before commas and semicolons,\nno spaces inside parentheses, etc.)."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"The one notable exception is the colon (:). In Ada, it is useful to use\nthe colon as a tabulator or a column separator (see Guideline 2.1.4). In\nthis context, it makes sense to put spaces before and after the colon\nrather than only after it as in normal text."}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"The guidelines in this section are easily enforced with an automatic\ncode formatter."}),"\n",(0,a.jsx)(n.h3,{id:"indentation",children:"Indentation"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-1",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Indent and align nested control structures, continuation lines, and\nembedded units consistently."}),"\n",(0,a.jsx)(n.li,{children:"Distinguish between indentation for nested control structures and\nfor continuation lines."}),"\n",(0,a.jsx)(n.li,{children:"Use spaces for indentation, not the tab character (Nissen and Wallis\n1984, \xa72.2)."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation-1",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"Specifically, the following indentation conventions are recommended, as\nshown in the examples throughout this book. Note that the minimum\nindentation is described. More spaces may be required for the vertical\nalignment recommended in subsequent guidelines."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use the recommended paragraphing shown in the Ada Reference Manual\n(1995)."}),"\n",(0,a.jsx)(n.li,{children:"Use three spaces as the basic unit of indentation for nesting."}),"\n",(0,a.jsx)(n.li,{children:"Use two spaces as the basic unit of indentation for continuation\nlines."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"A label is outdented three spaces:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"begin\n<<label>>\n   <statement>\nend;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"<long statement with line break>\n  <trailing part of same statement>\n"})}),"\n",(0,a.jsx)(n.p,{children:"The if statement and the plain loop:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"if <condition> then\n   <statements>\nelsif <condition> then\n   <statements>\nelse\n   <statements>\nend if;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"<name>:\nloop\n   <statements>\n   exit when <condition>;\n   <statements>\nend loop <name>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Loops with the for and while iteration schemes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"<name>:\n   for <scheme> loop\n      <statements>\n   end loop <name>;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"<name>:\n   while <condition> loop\n      <statements>\n   end loop <name>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"The block and the case statement as recommended in the Ada Reference\nManual (1995):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"<name>:\n   declare\n      <declarations>\n   begin\n      <statements>\n   exception\n      when <choice> =>\n         <statements>\n      when others =>\n         <statements>\n   end <name>;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"case <expression> is\n   when <choice> =>\n      <statements>\n   when <choice> =>\n      <statements>\n   when others =>\n      <statements>\nend case;  --<comment>\n"})}),"\n",(0,a.jsx)(n.p,{children:"These case statements save space over the Ada Reference Manual (1995)\nrecommendation and depend on very short statement lists, respectively.\nWhichever you choose, be consistent:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"case <expression> is\nwhen <choice> =>\n     <statements>\nwhen <choice> =>\n     <statements>\nwhen others =>\n     <statements>\nend case;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"case <expression> is\n   when <choice> => <statements>\n                    <statements>\n   when <choice> => <statements>\n   when others   => <statements>\nend case;\n"})}),"\n",(0,a.jsx)(n.p,{children:"The various forms of selective accept and the timed and conditional\nentry calls:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"select\n   when <guard> =>\n      <accept statement>\n      <statements>\nor\n   <accept statement>\n   <statements>\nor\n   when <guard> =>\n      delay <interval>;\n      <statements>\nor\n   when <guard> =>\n      terminate;\nelse\n   <statements>\nend select;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"select\n   <entry call>;\n   <statements>\nor\n   delay <interval>;\n   <statements>\nend select;\n\nselect\n   <entry call>;\n   <statements>\nelse\n   <statements>\nend select;\n\nselect\n   <triggering alternative>\nthen abort\n   <abortable part>\nend select;\n"})}),"\n",(0,a.jsx)(n.p,{children:"The accept statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"accept <specification> do\n   <statements>\nend <name>;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"separate (<parent unit>)\n<proper body>\n"})}),"\n",(0,a.jsx)(n.p,{children:"A subunit:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"separate (<parent unit>)\n<proper body>\nend <name>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Proper bodies of program units:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"procedure <specification> is\n   <declarations>\nbegin\n   <statements>\nexception\n   when <choice> =>\n      <statements>\nend <name>;\n\nfunction <specification>\n  return <type name> is\n   <declarations>\nbegin\n   <statements>\nexception\n   when <choice> =>\n      <statements>\nend <name>;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"package body <name> is\n   <declarations>\nbegin\n   <statements>\nexception\n   when <choice>=>\n      <statements>\nend <name>;\n\ntask body <name> is\n   <declarations>\nbegin\n   <statements>\nexception\n   when <choice>=>\n      <statements>\nend <name>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Context clauses on compilation units are arranged as a table. Generic\nformal parameters do not obscure the unit itself. Function, package, and\ntask specifications use standard indentation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"with <name>; use <name>;\nwith <name>;\nwith <name>;\n\n<compilation unit>\n\ngeneric\n   <formal parameters>\n<compilation unit>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"function <specification>\n  return <type>;\n\npackage <name> is\n   <declarations>\nprivate\n   <declarations>\nend <name>;\n\ntask type <name> is\n   <entry declarations>\nend <name>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Instantiations of generic units and record indentation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"procedure <name> is\n   new <generic name> <actuals>\n\nfunction <name> is\n   new <generic name> <actuals>\n\npackage <name> is\n   new <generic name> <actuals>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"type ... is\n   record\n      <component list>\n      case <discriminant name> is\n         when <choice> =>\n            <component list>\n         when <choice> =>\n            <component list>\n      end case;\n   end record;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Indentation for record alignment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"for <name> use\n   record <mod clause>\n      <component clause>\n   end record;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tagged types and type extension:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"type ... is tagged\n   record\n      <component list>\n   end record;\n\ntype ... is new ... with\n   record\n      <component list>\n   end record;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'Default_String : constant String :=\n      "This is the long string returned by" &\n      " default.  It is broken into multiple" &\n      " Ada source lines for convenience.";\n\n...\n\n   if Input_Found then\n      Count_Characters;\n\n   else  --not Input_Found\n      Reset_State;\n      Character_Total :=\n        First_Part_Total  * First_Part_Scale_Factor  +\n        Second_Part_Total * Second_Part_Scale_Factor +\n        Default_String\'Length + Delimiter_Size;\n   end if;\n\nend loop;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-1",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"Indentation improves the readability of the code because it gives you a\nvisual indicator of the program structure. The levels of nesting are\nclearly identified by indentation, and the first and last keywords in a\nconstruct can be matched visually."}),"\n",(0,a.jsx)(n.p,{children:"While there is much discussion on the number of spaces to indent, the\nreason for indentation is code clarity. The fact that the code is\nindented consistently is more important than the number of spaces used\nfor indentation."}),"\n",(0,a.jsx)(n.p,{children:'Additionally, the Ada Reference Manual (1995, \xa71.1.4) states that the\nlayout shown in the examples and syntax rules in the manual is the\nrecommended code layout to be used for Ada programs: "The syntax rules\ndescribing structured constructs are presented in a form that\ncorresponds to the recommended paragraphing . . . . Different lines are\nused for parts of a syntax rule if the corresponding parts of the\nconstruct described by the rule are intended to be on different lines .\n. . . It is recommended that all indentation be by multiples of a basic\nstep of indentation (the number of spaces for the basic step is not\ndefined)."'}),"\n",(0,a.jsx)(n.p,{children:"It is important to indent continuation lines differently from nested\ncontrol structures to make them visually distinct. This prevents them\nfrom obscuring the structure of the code as you scan it."}),"\n",(0,a.jsx)(n.p,{children:"Listing context clauses on individual lines allows easier maintenance;\nchanging a context clause is less error-prone."}),"\n",(0,a.jsx)(n.p,{children:"Indenting with spaces is more portable than indenting with tabs because\ntab characters are displayed differently by different terminals and\nprinters."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-1",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"If you are using a variable width font, tabs will align better than\nspaces. However, depending on your tab setting, lines of successive\nindentation may leave you with a very short line length."}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-1",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"The guidelines in this section are easily enforced with an automatic\ncode formatter."}),"\n",(0,a.jsx)(n.h3,{id:"alignment-of-operators",children:"Alignment of Operators"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-2",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Align operators vertically to emphasize local program structure and\nsemantics."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    if Slot_A >= Slot_B then\n       Temporary := Slot_A;\n       Slot_A    := Slot_B;\n       Slot_B    := Temporary;\n    end if;\n\n    ----------------------------------------------------------------\n    Numerator   := B**2 - 4.0 * A * C;\n    Denominator := 2.0 * A;\n    Solution_1 := (B + Square_Root(Numerator)) / Denominator;\n    Solution_2 := (B - Square_Root(Numerator)) / Denominator;\n    ----------------------------------------------------------------\n\n    X := A * B +\n         C * D +\n         E * F;\n\n    Y := (A * B + C) +  (2.0 * D - E) -  -- basic equation\n         3.5;                            -- account for error factor\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-2",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"Alignment makes it easier to see the position of the operators and,\ntherefore, puts visual emphasis on what the code is doing."}),"\n",(0,a.jsx)(n.p,{children:"The use of lines and spacing on long expressions can emphasize terms,\nprecedence of operators, and other semantics. It can also leave room for\nhighlighting comments within an expression."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-2",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"If vertical alignment of operators forces a statement to be broken over\ntwo lines, especially if the break is at an inappropriate spot, it may\nbe preferable to relax the alignment guideline."}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-2",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:'The last example above shows a kind of "semantic alignment" that is not\ntypically enforced or even preserved by automatic code formatters. If\nyou break expressions into semantic parts and put each on a separate\nline, beware of using a code formatter later. It is likely to move the\nentire expression to a single line and accumulate all the comments at\nthe end. However, there are some formatters that are intelligent enough\nto leave a line break intact when the line contains a comment. A good\nformatter will recognize that the last example above does not violate\nthe guidelines and would, therefore, preserve it as written.'}),"\n",(0,a.jsx)(n.h3,{id:"alignment-of-declarations",children:"Alignment of Declarations"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-3",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use vertical alignment to enhance the readability of declarations."}),"\n",(0,a.jsx)(n.li,{children:"Provide, at most, one declaration per line."}),"\n",(0,a.jsx)(n.li,{children:"Indent all declarations in a single declarative part at the same\nlevel."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation-2",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"For declarations not separated by blank lines, follow these alignment\nrules:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Align the colon delimiters."}),"\n",(0,a.jsx)(n.li,{children:"Align the := initialization delimiter."}),"\n",(0,a.jsx)(n.li,{children:"When trailing comments are used, align the comment delimiter."}),"\n",(0,a.jsx)(n.li,{children:"When the declaration overflows a line, break the line and add an\nindentation level for those lines that wrap. The preferred places to\nbreak, in order, are: (1) the comment delimiter; (2) the\ninitialization delimiter; (3) the colon delimiter."}),"\n",(0,a.jsx)(n.li,{children:"For enumeration type declarations that do not fit on a single line,\nput each literal on a separate line, using the next level of\nindentation. When appropriate, semantically related literals can be\narranged by row or column to form a table."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"Variable and constant declarations can be laid out in a tabular format\nwith columns separated by the symbols :, :=, and --"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'    Prompt_Column : constant        := 40;\n    Question_Mark : constant String := " ? "; -- prompt on error input\n    Prompt_String : constant String := " ==> ";\n'})}),"\n",(0,a.jsx)(n.p,{children:"If this results in lines that are too long, they can be laid out with\neach part on a separate line with its unique indentation level:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    subtype User_Response_Text_Frame is String (1 .. 72);\n    -- If the declaration needed a comment, it would fit here.\n    Input_Line_Buffer : User_Response_Text_Frame\n           := Prompt_String &\n              String'(1 .. User_Response_Text_Frame'Length -\n                           Prompt_String'Length => ' ');\n"})}),"\n",(0,a.jsx)(n.p,{children:"Declarations of enumeration literals can be listed in one or more\ncolumns as:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"  type Op_Codes_In_Column is\n        (Push,\n         Pop,\n         Add,\n         Subtract,\n         Multiply,\n         Divide,\n         Subroutine_Call,\n         Subroutine_Return,\n         Branch,\n         Branch_On_Zero,\n         Branch_On_Negative);\n"})}),"\n",(0,a.jsx)(n.p,{children:"or, to save space:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    type Op_Codes_Multiple_Columns is\n          (Push,            Pop,                Add,\n           Subtract,        Multiply,           Divide,\n           Subroutine_Call, Subroutine_Return,  Branch,\n           Branch_On_Zero,  Branch_On_Negative);\n"})}),"\n",(0,a.jsx)(n.p,{children:"or, to emphasize related groups of values:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    type Op_Codes_In_Table is\n          (Push,            Pop,\n           Add,             Subtract,          Multiply,    Divide,\n           Subroutine_Call, Subroutine_Return,\n           Branch,          Branch_On_Zero,    Branch_On_Negative);\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-3",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:'Many programming standards documents require tabular repetition of\nnames, types, initial values, and meaning in unit header comments. These\ncomments are redundant and can become inconsistent with the code.\nAligning the declarations themselves in tabular fashion (see the\nexamples above) provides identical information to both compiler and\nreader; enforces, at most, one declaration per line; and eases\nmaintenance by providing space for initializations and necessary\ncomments. A tabular layout enhances readability, thus preventing names\nfrom "hiding" in a mass of declarations. This applies to all\ndeclarations: types, subtypes, objects, exceptions, named numbers, and\nso forth.'}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-3",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"Most of the guidelines in this section are easily enforced with an\nautomatic code formatter. The one exception is the last enumerated type\nexample, which is laid out in rows based on the semantics of the\nenumeration literals. An automatic code formatter will not be able to do\nthis and will likely move the enumeration literals to different lines.\nHowever, tools that are checking only for violations of the guidelines\nshould accept the tabular form of an enumeration type declaration."}),"\n",(0,a.jsx)(n.h3,{id:"more-on-alignment",children:"More on Alignment"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-4",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Align parameter modes and parentheses vertically."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation-3",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"Specifically, it is recommended that you:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Place one formal parameter specification per line."}),"\n",(0,a.jsx)(n.li,{children:"Vertically align parameter names, colons, the reserved word in, the\nreserved word out, and parameter subtypes."}),"\n",(0,a.jsx)(n.li,{children:"Place the first parameter specification on the same line as the\nsubprogram or entry name. If any parameter subtypes are forced\nbeyond the line length limit, place the first parameter\nspecification on a new line indented the same as a continuation\nline."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-4",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    procedure Display_Menu (Title   : in     String;\n                            Options : in     Menus;\n                            Choice  :    out Alpha_Numerics);\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following two examples show alternate instantiations of this\nguideline:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    procedure Display_Menu_On_Primary_Window\n          (Title   : in     String;\n           Options : in     Menus;\n           Choice  :    out Alpha_Numerics);\n"})}),"\n",(0,a.jsx)(n.p,{children:"or:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    procedure Display_Menu_On_Screen (\n          Title   : in     String;\n          Options : in     Menus;\n          Choice  :    out Alpha_Numerics\n        );\n"})}),"\n",(0,a.jsx)(n.p,{children:"Aligning parentheses makes complicated relational expressions more\nclear:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    if not (First_Character in Alpha_Numerics and then\n            Valid_Option(First_Character))        then\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-4",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"This alignment facilitates readability and understandability, and it is\neasy to achieve given automated support. Aligning parameter modes\nprovides the effect of a table with columns for parameter name, mode,\nsubtype, and, if necessary, parameter-specific comments. Vertical\nalignment of parameters across subprograms within a compilation unit\nincreases the readability even more."}),"\n",(0,a.jsx)(n.h4,{id:"notes",children:"notes"}),"\n",(0,a.jsx)(n.p,{children:"Various options are available for subprogram layout. The second example\nabove aligns all of the subprogram names and parameter names in a\nprogram. This has the disadvantage of occupying an unnecessary line\nwhere subprogram names are short and looking awkward if there is only\none parameter."}),"\n",(0,a.jsx)(n.p,{children:"The third example is a format commonly used to reduce the amount of\nediting required when parameter lines are added, deleted, or reordered.\nThe parentheses do not have to be moved from line to line. However, the\nlast parameter line is the only one without a semicolon."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-3",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"When an operator function has two or more formal parameters of the same\ntype, it is more readable to declare the parameters in a single one-line\nlist rather than to separate the formal parameter list into multiple\nformal parameter specifications."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'    type Color_Scheme is (Red, Purple, Blue, Green, Yellow, White, Black, Brown, Gray, Pink);\n\n    function "&" (Left, Right : Color_Scheme) return Color_Scheme;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-4",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"Most of the guidelines in this section are easily enforced with an\nautomatic code formatter. The one exception is the last example, which\nshows vertical alignment of parentheses to emphasize terms of an\nexpression. This is difficult to achieve with an automatic code\nformatter unless the relevant terms of the expression can be determined\nstrictly through operator precedence."}),"\n",(0,a.jsx)(n.h3,{id:"blank-lines",children:"Blank Lines"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-5",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use blank lines to group logically related lines of text (NASA\n1987)."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-5",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    if ... then\n\n       for ... loop\n          ...\n       end loop;\n\n    end if;\n"})}),"\n",(0,a.jsx)(n.p,{children:"This example separates different kinds of declarations with blank lines:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    type Employee_Record is\n       record\n          Legal_Name    : Name;\n          Date_Of_Birth : Date;\n          Date_Of_Hire  : Date;\n          Salary        : Money;\n       end record;\n\n    type Day is\n          (Monday,    Tuesday,   Wednesday, Thursday,  Friday,\n           Saturday,  Sunday);\n\n    subtype Weekday is Day range Monday   .. Friday;\n    subtype Weekend is Day range Saturday .. Sunday;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-5",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"When blank lines are used in a thoughtful and consistent manner,\nsections of related code are more visible to readers."}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-5",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"Automatic formatters do not enforce this guideline well because the\ndecision on where to insert blank lines is a semantic one. However, many\nformatters have the ability to leave existing blank lines intact. Thus,\nyou can manually insert the lines and not lose the effect when you run\nsuch a formatter."}),"\n",(0,a.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-6",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Highlight the top of each package or task specification, the top of\neach program unit body, and the end statement of each program unit."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation-4",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"Specifically, it is recommended that you:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use file prologues, specification headers, and body headers to\nhighlight those structures as recommended in Guideline 3.3."}),"\n",(0,a.jsx)(n.li,{children:"Use a line of dashes, beginning at the same column as the current\nindentation to highlight the definition of nested units embedded in\na declarative part. Insert the line of dashes immediately before and\nimmediately after the definition."}),"\n",(0,a.jsx)(n.li,{children:"If two dashed lines are adjacent, omit the longer of the two."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-6",children:"example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    with Basic_Types;\n    package body SPC_Numeric_Types is\n       ---------------------------------------------------------------------\n       function Max\n             (Left  : in     Basic_Types.Tiny_Integer;\n              Right : in     Basic_Types.Tiny_Integer)\n             return Basic_Types.Tiny_Integer is\n       begin\n          if Right < Left then\n             return Left;\n          else\n             return Right;\n          end if;\n       end Max;\n       ---------------------------------------------------------------------\n       function Min\n             (Left  : in     Basic_Types.Tiny_Integer;\n              Right : in     Basic_Types.Tiny_Integer)\n             return Basic_Types.Tiny_Integer is\n       begin\n          if Left < Right then\n             return Left;\n          else\n             return Right;\n          end if;\n       end Min;\n       ---------------------------------------------------------------------\n       use Basic_Types;\n    begin  -- SPC_Numeric_Types\n       Max_Tiny_Integer := Min(System_Max, Local_Max);\n       Min_Tiny_Integer := Max(System_Min, Local_Min);\n       -- ...\n    end SPC_Numeric_Types;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-6",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"It is easy to overlook parts of program units that are not visible on\nthe current page or screen. The page lengths of presentation hardware\nand software vary widely. By clearly marking the program's logical page\nboundaries (e.g., with a dashed line), you enable a reader to quickly\ncheck whether all of a program unit is visible. Such pagination also\nmakes it easier to scan a large file quickly, looking for a particular\nprogram unit."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-4",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:'This guideline does not address code layout on the physical "page"\nbecause the dimensions of such pages vary widely and no single guideline\nis appropriate.'}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-6",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"The guidelines in this section are easily enforced with an automatic\ncode formatter."}),"\n",(0,a.jsx)(n.h3,{id:"number-of-statements-per-line",children:"Number of Statements Per Line"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-7",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Start each statement on a new line."}),"\n",(0,a.jsx)(n.li,{children:"Write no more than one simple statement per line."}),"\n",(0,a.jsx)(n.li,{children:"Break compound statements over multiple lines."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-7",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"Use:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    if End_Of_File then\n       Close_File;\n    else\n       Get_Next_Record;\n    end if;\n"})}),"\n",(0,a.jsx)(n.p,{children:"rather than:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"    if End_Of_File then Close_File; else Get_Next_Record; end if;\n"})}),"\n",(0,a.jsx)(n.p,{children:"exceptional case:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'    Put("A=");    Natural_IO.Put(A);    New_Line;\n    Put("B=");    Natural_IO.Put(B);    New_Line;\n    Put("C=");    Natural_IO.Put(C);    New_Line;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-7",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"A single statement on each line enhances the reader's ability to find\nstatements and helps prevent statements being missed. Similarly, the\nstructure of a compound statement is clearer when its parts are on\nseparate lines."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-5",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"If a statement is longer than the remaining space on the line, continue\nit on the next line. This guideline includes declarations, context\nclauses, and subprogram parameters."}),"\n",(0,a.jsx)(n.p,{children:'According to the Ada Reference Manual (1995, \xa71.1.4), "The preferred\nplaces for other line breaks are after semicolons."'}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-7",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"The guidelines in this section are easily enforced with an automatic\ncode formatter, with the single exception of the last example, which\nshows a semantic grouping of multiple statements onto a single line."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-6",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"The example of Put and New_Line statements shows a legitimate\nexception. This grouping of closely related statements on the same line\nmakes the structural relationship between the groups clear."}),"\n",(0,a.jsx)(n.h3,{id:"source-code-line-length",children:"Source Code Line Length"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-8",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adhere to a maximum line length limit for source code (Nissen and\nWallis 1984, \xa72.3)."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"instantiation-5",children:"instantiation"}),"\n",(0,a.jsx)(n.p,{children:"Specifically, it is recommended that you:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Limit source code line lengths to a maximum of 72 characters."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"rationale-8",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"When Ada code is ported from one system to another, there may be\nrestrictions on the record size of source line statements, possibly for\none of the following reasons: some operating systems may not support\nvariable length records for tape I/O, or some printers and terminals\nsupport an 80-character line width with no line-wrap. See further\nrationale in the note for Guideline 7.1.2."}),"\n",(0,a.jsx)(n.p,{children:"Source code must sometimes be published for various reasons, and\nletter-size paper is not as forgiving as a computer listing in terms of\nthe number of usable columns."}),"\n",(0,a.jsx)(n.p,{children:"In addition, there are human limitations in the width of the field of\nview for understanding at the level required for reading source code.\nThese limitations correspond roughly to the 70- to 80-column range."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions-7",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"An alternate instantiation is to limit source code length to 79\ncharacters. The 79-character limit differentiates the code from the\nFORTRAN 72-character limit. It also avoids problems with 80-character\nwidth terminals where the character in the last column may not print\ncorrectly."}),"\n",(0,a.jsx)(n.h4,{id:"automation-notes-8",children:"automation notes"}),"\n",(0,a.jsx)(n.p,{children:"The guidelines in this section are easily enforced with an automatic\ncode formatter."}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.h3,{id:"code-formatting-1",children:"code formatting"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use consistent spacing around delimiters."}),"\n",(0,a.jsx)(n.li,{children:"Use the same spacing as you would in regular prose."}),"\n",(0,a.jsx)(n.li,{children:"Indent and align nested control structures, continuation lines, and\nembedded units consistently."}),"\n",(0,a.jsx)(n.li,{children:"Distinguish between indentation for nested control structures and\nfor continuation lines."}),"\n",(0,a.jsx)(n.li,{children:"Use spaces for indentation, not the tab character (Nissen and Wallis\n1984, \xa72.2)."}),"\n",(0,a.jsx)(n.li,{children:"Align operators vertically to emphasize local program structure and\nsemantics."}),"\n",(0,a.jsx)(n.li,{children:"Use vertical alignment to enhance the readability of declarations."}),"\n",(0,a.jsx)(n.li,{children:"Provide, at most, one declaration per line."}),"\n",(0,a.jsx)(n.li,{children:"Indent all declarations in a single declarative part at the same\nlevel."}),"\n",(0,a.jsx)(n.li,{children:"Align parameter modes and parentheses vertically."}),"\n",(0,a.jsx)(n.li,{children:"Use blank lines to group logically related lines of text (NASA\n1987)."}),"\n",(0,a.jsx)(n.li,{children:"Highlight the top of each package or task specification, the top of\neach program unit body, and the end statement of each program unit."}),"\n",(0,a.jsx)(n.li,{children:"Start each statement on a new line."}),"\n",(0,a.jsx)(n.li,{children:"Write no more than one simple statement per line."}),"\n",(0,a.jsx)(n.li,{children:"Break compound statements over multiple lines."}),"\n",(0,a.jsx)(n.li,{children:"Adhere to a maximum line length limit for source code (Nissen and\nWallis 1984, \xa72.3)."}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:['This page of the "Ada Quality and Style Guide" has been adapted from the\noriginal work at ',(0,a.jsx)(n.a,{href:"https://en.wikibooks.org/wiki/Ada_Style_Guide",children:"https://en.wikibooks.org/wiki/Ada_Style_Guide"}),", which is\nlicensed under the\n",(0,a.jsx)(n.a,{href:"https://creativecommons.org/licenses/by-sa/3.0/",children:"Creative Commons Attribution-ShareAlike License"}),";\nadditional terms may apply. Page not endorsed by Wikibooks or the Ada\nStyle Guide Wikibook authors. This page is licensed under the same license\nas the original work."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);