"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[6205],{70057:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>m,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>h,toc:()=>u});var s=n(74848),a=n(28453),t=n(13842),i=n(91435),o=(n(21432),n(79162)),c=n(34421);const l={sidebar_position:50},d="6 Subprograms",h={id:"arm/AA-6/AA-6",title:"6 Subprograms",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-6/AA-6.mdx",sourceDirName:"arm/AA-6",slug:"/arm/AA-6/",permalink:"/docs/arm/AA-6/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"referenceManualSidebar",previous:{title:"5.8 Goto Statements",permalink:"/docs/arm/AA-5/AA-5.8"},next:{title:"6.1 Subprogram Declarations",permalink:"/docs/arm/AA-6/AA-6.1"}},m={},u=[];function p(e){const r={a:"a",admonition:"admonition",h1:"h1",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"6-subprograms",children:"6 Subprograms"}),"\n",(0,s.jsx)(r.admonition,{type:"danger",children:(0,s.jsxs)(r.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,s.jsx)(r.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,s.jsx)(o.A,{children:"1"}),"\n",(0,s.jsxs)("p",{children:["A subprogram is a program unit or intrinsic operation whose execution is invoked by a subprogram call. There are two forms of subprogram: procedures and functions. A procedure call is a ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-5/AA-5.1#S0167",children:"statement"})}),"; a function call is an expression and returns a value. The definition of a subprogram can be given in two parts: a subprogram declaration defining its interface, and a ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-6/AA-6.3#S0216",children:"subprogram_body"})})," defining its execution. [Operators and enumeration literals are functions.] ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{children:"1.a"}),(0,s.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("strong",{children:"To be honest: "}),"A function call is an expression, but more specifically it is a ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})}),". ",(0,s.jsx)("br",{})]})})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{children:"1.b/5"}),(0,s.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("strong",{children:"Term entry: "}),(0,s.jsx)("strong",{children:"subprogram"})," \u2014 unit of a program that can be brought into execution in various contexts, with the invocation being a subprogram call that can parameterize the effect of the subprogram through the passing of operands",(0,s.jsx)("br",{}),"Note: There are two forms of subprograms: functions, which return values, and procedures, which do not.",(0,s.jsx)("br",{})]})})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{children:"1.c/5"}),(0,s.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("strong",{children:"Term entry: "}),(0,s.jsx)("strong",{children:"function"})," \u2014 form of subprogram that returns a result and can be called as part of an expression",(0,s.jsx)("br",{})]})})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{children:"1.d/5"}),(0,s.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("strong",{children:"Term entry: "}),(0,s.jsx)("strong",{children:"procedure"})," \u2014 form of subprogram that does not return a result and can only be invoked by a statement",(0,s.jsx)("br",{})]})})]}),"\n",(0,s.jsx)(o.A,{children:"2/3"}),"\n",(0,s.jsx)(c.A,{items:["AI05-0299-1"]}),"\n",(0,s.jsxs)("p",{children:["A ",(0,s.jsx)("em",{children:"callable entity"})," is a subprogram or entry (see Section 9). A callable entity is invoked by a ",(0,s.jsx)("em",{children:"call"}),"; that is, a subprogram call or entry call. A ",(0,s.jsx)("em",{children:"callable construct"})," is a construct that defines the action of a call upon a callable entity: a ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-6/AA-6.3#S0216",children:"subprogram_body"})}),", ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-9/AA-9.5#S0260",children:"entry_body"})}),", or ",(0,s.jsx)("code",{children:(0,s.jsx)("a",{href:"/docs/arm/AA-9/AA-9.5#S0258",children:"accept_statement"})}),". ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{children:"2.a"}),(0,s.jsx)(t.A,{type:"aarm",aarm:"ramification",children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("strong",{}),"Note that \u201ccallable entity\u201d includes predefined operators, enumeration literals, and abstract subprograms. \u201cCall\u201d includes calls of these things. They do not have callable constructs, since they don't have completions. ",(0,s.jsx)("br",{})]})})]})]})}function x(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);