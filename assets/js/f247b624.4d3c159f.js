"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8394],{6953:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>p,contentTitle:()=>x,default:()=>m,frontMatter:()=>h,metadata:()=>n,toc:()=>j});const n=JSON.parse('{"id":"arm/AA-13/AA-13.11","title":"13.11. Storage Management","description":"This Reference Manual output has not been verified,","source":"@site/docs/arm/AA-13/AA-13.11.mdx","sourceDirName":"arm/AA-13","slug":"/arm/AA-13/AA-13.11","permalink":"/docs/arm/AA-13/AA-13.11","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":115,"frontMatter":{"sidebar_position":115},"sidebar":"referenceManualSidebar","previous":{"title":"13.10. Unchecked Access Value Creation","permalink":"/docs/arm/AA-13/AA-13.10"},"next":{"title":"13.12. Pragma Restrictions and Pragma Profile","permalink":"/docs/arm/AA-13/AA-13.12"}}');var o=a(4848),t=a(8453),i=a(3204),r=a(4220),l=a(8069),c=a(8011),d=a(6465);const h={sidebar_position:115},x="13.11. Storage Management",p={},j=[{value:"Legality Rules",id:"legality-rules",level:4},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Erroneous Execution",id:"erroneous-execution",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Documentation Requirements",id:"documentation-requirements",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Examples",id:"examples",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"Incompatibilities With Ada 95",id:"incompatibilities-with-ada-95",level:4},{value:"Extensions to Ada 95",id:"extensions-to-ada-95",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005",level:4},{value:"Extensions to Ada 2012",id:"extensions-to-ada-2012",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4},{value:"13.11.1  Storage Allocation Attributes",id:"13111--storage-allocation-attributes",level:2},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95-1",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005",level:4},{value:"13.11.2  Unchecked Storage Deallocation",id:"13112--unchecked-storage-deallocation",level:2},{value:"Static Semantics",id:"static-semantics-2",level:4},{value:"Legality Rules",id:"legality-rules-1",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics",level:4},{value:"Bounded (Run-Time) Errors",id:"bounded-run-time-errors",level:4},{value:"Erroneous Execution",id:"erroneous-execution-1",level:4},{value:"Implementation Advice",id:"implementation-advice-1",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95-2",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005-1",level:4},{value:"Inconsistencies With Ada 2012",id:"inconsistencies-with-ada-2012",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012-1",level:4},{value:"13.11.3  Default Storage Pools",id:"13113--default-storage-pools",level:2},{value:"Syntax",id:"syntax",level:4},{value:"Name Resolution Rules",id:"name-resolution-rules",level:4},{value:"Legality Rules",id:"legality-rules-2",level:4},{value:"Static Semantics",id:"static-semantics-3",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-1",level:4},{value:"Incompatibilities With Ada 2005",id:"incompatibilities-with-ada-2005",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005-1",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005-2",level:4},{value:"Extensions to Ada 2012",id:"extensions-to-ada-2012-1",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012-2",level:4},{value:"13.11.4  Storage Subpools",id:"13114--storage-subpools",level:2},{value:"Static Semantics",id:"static-semantics-4",level:4},{value:"Legality Rules",id:"legality-rules-3",level:4},{value:"Dynamic Semantics",id:"dynamic-semantics-1",level:4},{value:"Erroneous Execution",id:"erroneous-execution-2",level:4},{value:"Implementation Permissions",id:"implementation-permissions-1",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005-2",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012-3",level:4},{value:"13.11.5  Subpool Reclamation",id:"13115--subpool-reclamation",level:2},{value:"Static Semantics",id:"static-semantics-5",level:4},{value:"Extensions to Ada 2005",id:"extensions-to-ada-2005-3",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012-4",level:4},{value:"13.11.6  Storage Subpool Example",id:"13116--storage-subpool-example",level:2},{value:"Examples",id:"examples-1",level:4},{value:"Wording Changes from Ada 2005",id:"wording-changes-from-ada-2005-3",level:4}];function A(e){const s={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"1311-storage-management",children:"13.11. Storage Management"})}),"\n",(0,o.jsx)(s.admonition,{type:"danger",children:(0,o.jsxs)(s.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,o.jsx)(s.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,o.jsx)(c.A,{children:"1"}),"\n",(0,o.jsxs)("p",{children:["[ Each access-to-object type has an associated storage pool. The storage allocated by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," comes from the pool; instances of Unchecked","_","Deallocation return storage to the pool. Several access types can share the same pool.]",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"2/2"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00435-01"]}),"\n",(0,o.jsxs)("p",{children:["[A storage pool is a variable of a type in the class rooted at Root","_","Storage","_","Pool, which is an abstract limited controlled type. By default, the implementation chooses a ",(0,o.jsx)("i",{children:"standard storage pool"})," for each access-to-object type. The user may define new pool types, and may override the choice of pool for an access-to-object type by specifying Storage","_","Pool for the type.] ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"2.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"By default, the implementation might choose to have a single global storage pool, which is used (by default) by all access types, which might mean that storage is reclaimed automatically only upon partition completion. Alternatively, it might choose to create a new pool at each accessibility level, which might mean that storage is reclaimed for an access type when leaving the appropriate scope. Other schemes are possible. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"2.b/5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Term entry: "}),(0,o.jsx)("b",{children:"storage pool object"})," \u2014 object associated with one or more access types from which the storage for objects created by allocators of the access type(s) is obtained",(0,o.jsx)("br",{}),"Note: Some storage pools can be partitioned into subpools in order to support finer-grained storage management.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"legality-rules",children:"Legality Rules"}),"\n",(0,o.jsx)(c.A,{children:"3"}),"\n",(0,o.jsxs)("p",{children:["If Storage","_","Pool is specified for a given access type, Storage","_","Size shall not be specified for it. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"3.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The Storage","_","Pool determines the Storage","_","Size; hence it would not make sense to specify both. Note that this rule is simplified by the fact that the aspects in question cannot be specified for derived types, nor for nonfirst subtypes, so we don't have to worry about whether, say, Storage","_","Pool on a derived type overrides Storage","_","Size on the parent type. For the same reason, \u201cspecified\u201d means the same thing as \u201cdirectly specified\u201d here. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"4"}),"\n",(0,o.jsxs)("p",{children:["The following language-defined library package exists: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"5/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0235-1"]}),"\n",(0,o.jsxs)(l.A,{language:"ada",children:[(0,o.jsxs)(s.p,{children:["with Ada.Finalization;","\n","with System.Storage","_","Elements;","\n","package System.Storage","_","Pools ","\n","    with Pure, Nonblocking =",">"," False is","\n","\n",(0,o.jsx)(c.A,{children:"6/5"})]}),(0,o.jsx)(d.A,{items:["AI95-00161-01","AI12-0399-1"]}),(0,o.jsxs)(s.p,{children:["type Root","_","Storage","_","Pool is","\n","        abstract new Ada.Finalization.Limited","_","Controlled with private","\n","        with Preelaborable","_","Initialization;","\n","\n",(0,o.jsx)(c.A,{children:"7"}),"\nprocedure Allocate(","\n","      Pool : in out Root","_","Storage","_","Pool;","\n","      Storage","_","Address : out Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Elements.Storage","_","Count;","\n","      Alignment : in Storage","_","Elements.Storage","_","Count) is abstract;","\n","\n",(0,o.jsx)(c.A,{children:"8"}),"\nprocedure Deallocate(","\n","      Pool : in out Root","_","Storage","_","Pool;","\n","      Storage","_","Address : in Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Elements.Storage","_","Count;","\n","      Alignment : in Storage","_","Elements.Storage","_","Count) is abstract;","\n","\n",(0,o.jsx)(c.A,{children:"9"}),"\nfunction Storage","_","Size(Pool : Root","_","Storage","_","Pool)","\n","        return Storage","_","Elements.Storage","_","Count is abstract;","\n","\n",(0,o.jsx)(c.A,{children:"10"}),"\nprivate","\n","   ... -- not specified by the language","\n","end System.Storage","_","Pools;","\n"]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The Alignment parameter is provided to Deallocate because some allocation strategies require it. If it is not needed, it can be ignored. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"11"}),"\n",(0,o.jsxs)("p",{children:["A ",(0,o.jsx)("i",{children:"storage pool type"})," (or ",(0,o.jsx)("i",{children:"pool type"}),") is a descendant of Root","_","Storage","_","Pool. The ",(0,o.jsx)("i",{children:"elements"})," of a storage pool are the objects allocated in the pool by ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"11.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"In most cases, an element corresponds to a single memory block allocated by Allocate. However, in some cases the implementation may choose to associate more than one memory block with a given pool element. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"12/2"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00137-01","AI95-00435-01"]}),"\n",(0,o.jsxs)("p",{children:["{",(0,o.jsx)("i",{children:"8652/0009"}),"}"," For every access-to-object subtype S, the following representation attributes are defined: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"13"}),"\n",(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"S'Storage","_","Pool"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsxs)("dd",{children:["Denotes the storage pool of the type of S. The type of this attribute is Root","_","Storage","_","Pool'Class.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"14"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"S'Storage","_","Size"]}),(0,o.jsxs)("dd",{children:["Yields the result of calling Storage","_","Size(S'Storage","_","Pool)[, which is intended to be a measure of the number of storage elements reserved for the pool.] The type of this attribute is ",(0,o.jsxs)("i",{children:["universal","_","integer"]}),". ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"14.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Storage","_","Size is also defined for task subtypes and objects \u2014 see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.3",children:"13.3"}),".",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"14.b"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Storage","_","Size is not a measure of how much un-allocated space is left in the pool. That is, it includes both allocated and unallocated space. Implementations and users may provide a Storage","_","Available function for their pools, if so desired. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"15/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0319-1"]}),"\n",(0,o.jsxs)("p",{children:["Storage","_","Size or Storage","_","Pool may be specified for a nonderived access-to-object type via an ",(0,o.jsx)("code",{children:(0,o.jsxs)("a",{href:"/docs/arm/AA-13/AA-13.3#S0349",children:["attribute","_","definition","_","clause"]})}),"; the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," in a Storage","_","Pool clause shall denote a variable. If the nominal subtype of the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," specified for Storage","_","Pool is nonblocking (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-9/AA-9.5",children:"9.5"}),"), then the primitive Allocate, Deallocate, and Storage","_","Size subprograms of that type shall be nonblocking. Additionally, if the pool is one that supports subpools (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.4",children:"13.11.4"}),"), the primitive Default","_","Subpool","_","for","_","Pool, Allocate","_","From","_","Subpool, and Deallocate","_","Subpool subprograms shall be nonblocking.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.a/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Aspect Description for "}),(0,o.jsxs)("b",{children:["Storage","_","Pool: "]}),"Pool of memory from which ",(0,o.jsx)("b",{children:"new"})," will allocate for a given access type.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.b/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Aspect Description for "}),(0,o.jsxs)("b",{children:["Storage","_","Size (access): "]}),"Sets memory size for allocations for an access type.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.c/5"}),(0,o.jsx)(d.A,{items:["AI12-0319-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We need to be able to describe in contracts (especially for generic units) whether the operations of a storage pool allow blocking, and we do that with the nonblocking status of the type. We make the check when the pool is specified so we can avoid adding a special check to the declaration of a pool type \u2013 we want pool types to follow the same rules as any other type. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"16/3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0107-1","AI05-0111-3","AI05-0116-1"]}),"\n",(0,o.jsxs)("p",{children:["An ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of a type ",(0,o.jsx)("i",{children:"T"})," that does not support subpools allocates storage from ",(0,o.jsx)("i",{children:"T"}),"'s storage pool. If the storage pool is a user-defined object, then the storage is allocated by calling Allocate as described below. ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"Allocator"})}),"s for types that support subpools are described in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.4",children:"13.11.4"}),". ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"16.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If the implementation chooses to represent the designated subtype in multiple pieces, one ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," evaluation might result in more than one call upon Allocate. In any case, ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s for the access type obtain all the required storage for an object of the designated type by calling the specified Allocate procedure.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"16.b/3"}),(0,o.jsx)(d.A,{items:["AI05-0107-1"]}),(0,o.jsxs)(i.A,{type:"aarm",aarm:"note",children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"16.b.1/1"}),(0,o.jsx)(d.A,{items:["AI95-00103-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["{",(0,o.jsx)("i",{children:"8652/0111"}),"}"," If ",(0,o.jsx)("i",{children:"D"})," (the designated type of ",(0,o.jsx)("i",{children:"T"}),") includes subcomponents of other access types, they will be allocated from the storage pools for those types, even if those ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s are executed as part of the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of ",(0,o.jsx)("i",{children:"T"})," (as part of the initialization of the object). For instance, an access-to-task type ",(0,o.jsx)("i",{children:"TT"})," may allocate the data structures used to implement the task value from other storage pools. (In particular, the task stack does not necessarily need to be allocated from the storage pool for ",(0,o.jsx)("i",{children:"TT"}),".) ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"17"}),"\n",(0,o.jsxs)("p",{children:["If Storage","_","Pool is not specified for a type defined by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#S0080",children:"access_to_object_definition"})}),", then the implementation chooses a standard storage pool for it in an implementation-defined manner. In this case, the exception Storage","_","Error is raised by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," if there is not enough storage. It is implementation defined whether or not the implementation provides user-accessible names for the standard pool type(s). ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.a/2"}),(0,o.jsxs)(i.A,{type:"aarm",aarm:"note",children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.a.1/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The manner of choosing a storage pool is covered by a Documentation Requirement below, so it is not summarized here. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.b"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-defined",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Whether or not the implementation provides user-accessible names for the standard pool type(s).",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.b.1/5"}),(0,o.jsx)(d.A,{items:["AI12-0005-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"To be honest: "}),(0,o.jsx)("b",{children:"pragma"})," Default","_","Storage","_","Pool (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.3",children:"13.11.3"}),") can be used to specify a specific pool (or none at all) to be used with access types declared in a particular declaration list, rather than a standard storage pool.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.b.2/5"}),(0,o.jsx)(d.A,{items:["AI12-0005-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Although there is no language-defined user-accessible name for the standard pool type(s), the default use of a standard pool may be indicated using the identifier Standard in the ",(0,o.jsx)("b",{children:"pragma"})," Default","_","Storage","_","Pool. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.c/2"}),(0,o.jsx)(d.A,{items:["AI95-00230-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"An access-to-object type defined by a ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.4#S0035",children:"derived_type_definition"})})," inherits its pool from its parent type, so all access-to-object types in the same derivation class share the same pool. Hence the \u201cdefined by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#S0080",children:"access_to_object_definition"})}),"\u201d wording above.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.d"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["There is no requirement that all storage pools be implemented using a contiguous block of memory (although each allocation returns a pointer to a contiguous block of memory). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"17.1/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0319-1","AI12-0424-1"]}),"\n",(0,o.jsxs)("p",{children:["The type(s) of the standard pool(s), and the primitive Allocate, Deallocate, and Storage","_","Size subprograms for the standard pool(s) are nonblocking. Concurrent invocations of these subprograms do not conflict with one another (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-9/AA-9.10",children:"9.10"}),") when applied to standard storage pools.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.e/5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We need to specify that the type is nonblocking so that an instance of Unchecked","_","Deallocation is nonblocking if the object type is nonblocking (as the type is used in the contract). Ada 95 did not declare standard allocation/deallocation as potentially blocking, so these things can be used in protected types, and we want that to remain true (with static checking). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"18/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0043-1","AI12-0319-1"]}),"\n",(0,o.jsxs)("p",{children:["If Storage","_","Size is specified for an access type ",(0,o.jsx)("i",{children:"T"}),", an implementation-defined pool ",(0,o.jsx)("i",{children:"P"})," is used for the type. The Storage","_","Size of ",(0,o.jsx)("i",{children:"P"})," is at least that requested, and the storage for ",(0,o.jsx)("i",{children:"P"})," is reclaimed when the master containing the declaration of the access type is left. If the implementation cannot satisfy the request, Storage","_","Error is raised at the freezing point of type ",(0,o.jsx)("i",{children:"T"}),". The storage pool ",(0,o.jsx)("i",{children:"P"})," is used only for allocators returning type ",(0,o.jsx)("i",{children:"T"})," or other access types specified to use ",(0,o.jsx)("i",{children:"T"}),"'Storage","_","Pool. Storage","_","Error is raised by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," returning such a type if the storage space of ",(0,o.jsx)("i",{children:"P"})," is exhausted (additional memory is not allocated). The type of ",(0,o.jsx)("i",{children:"P"}),", and the primitive Allocate, Deallocate, and Storage","_","Size subprograms of ",(0,o.jsx)("i",{children:"P"})," are nonblocking.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"18.1/4"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0043-1"]}),"\n",(0,o.jsxs)("p",{children:["If neither Storage","_","Pool nor Storage","_","Size are specified, then the meaning of Storage","_","Size is implementation defined.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18.a/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-defined",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The meaning of Storage","_","Size when neither the Storage","_","Size nor the Storage","_","Pool is specified for an access type.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18.b"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The Storage","_","Size function and attribute will return the actual size, rather than the requested size. Comments about rounding up, zero, and negative on task Storage","_","Size apply here, as well. See also AI83-00557, AI83-00558, and AI83-00608.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18.c"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The expression in a Storage","_","Size clause need not be static.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18.d"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The reclamation happens after the master is finalized. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18.e"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"For a pool allocated on the stack, normal stack cut-back can accomplish the reclamation. For a library-level pool, normal partition termination actions can accomplish the reclamation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"19"}),"\n",(0,o.jsxs)("p",{children:["If Storage","_","Pool is specified for an access type, then the specified pool is used.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"20"}),"\n",(0,o.jsxs)("p",{children:["The effect of calling Allocate and Deallocate for a standard storage pool directly (rather than implicitly via an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," or an instance of Unchecked","_","Deallocation) is unspecified. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"20.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"For example, an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," might put the pool element on a finalization list. If the user directly Deallocates it, instead of calling an instance of Unchecked","_","Deallocation, then the implementation would probably try to finalize the object upon master completion, which would be bad news. Therefore, the implementation should define such situations as erroneous. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"erroneous-execution",children:"Erroneous Execution"}),"\n",(0,o.jsx)(c.A,{children:"21"}),"\n",(0,o.jsxs)("p",{children:["If Storage","_","Pool is specified for an access type, then if Allocate can satisfy the request, it should allocate a contiguous block of memory, and return the address of the first storage element in Storage","_","Address. The block should contain Size","_","In","_","Storage","_","Elements storage elements, and should be aligned according to Alignment. The allocated storage should not be used for any other purpose while the pool element remains in existence. If the request cannot be satisfied, then Allocate should propagate an exception [(such as Storage","_","Error)]. If Allocate behaves in any other manner, then the program execution is erroneous. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"implementation-requirements",children:"Implementation Requirements"}),"\n",(0,o.jsx)(c.A,{children:"21.1/3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0107-1","AI05-0262-1"]}),"\n",(0,o.jsxs)("p",{children:["The Allocate procedure of a user-defined storage pool object ",(0,o.jsx)("i",{children:"P"})," may be called by the implementation only to allocate storage for a type ",(0,o.jsx)("i",{children:"T"})," whose pool is ",(0,o.jsx)("i",{children:"P"}),", only at the following points:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"21.2/3"}),"\n",(0,o.jsx)("ul",{children:(0,o.jsxs)("li",{children:["During the execution of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of type ",(0,o.jsx)("i",{children:"T"}),";",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.a/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This includes during the evaluation of the initializing expression such as an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.3#S0106",children:"aggregate"})}),"; this is important if the initializing expression is built in place. We need to allow allocation to be deferred until the size of the object is known. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21.3/3"}),"\n",(0,o.jsx)("ul",{children:(0,o.jsxs)("li",{children:["During the execution of a return statement for a function whose result is built-in-place in the result of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of type ",(0,o.jsx)("i",{children:"T"}),";",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.b/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We need this bullet as well as the preceding one in order that exceptions that propagate from such a call to Allocate can be handled within the return statement. We don't want to require the generation of special handling code in this unusual case, as it would add overhead to most return statements of composite types. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21.4/3"}),"\n",(0,o.jsx)("ul",{children:(0,o.jsxs)("li",{children:["During the execution of an assignment operation with a target of an allocated object of type ",(0,o.jsx)("i",{children:"T"})," with a part that has an unconstrained discriminated subtype with defaults.",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.c/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),'We allow Allocate to be called during assignment of objects with mutable parts so that mutable objects can be implemented with reallocation on assignment. (Unfortunately, the term "mutable" is only defined in the AARM, so we have to use the long-winded wording shown here.) ',(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.d/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Of course, explicit calls to Allocate are also allowed and are not bound by any of the rules found here. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21.5/3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0107-1","AI05-0116-1","AI05-0193-1","AI05-0262-1","AI05-0269-1"]}),"\n",(0,o.jsxs)("p",{children:["For each of the calls of Allocate described above, ",(0,o.jsx)("i",{children:"P"})," (equivalent to ",(0,o.jsx)("i",{children:"T"}),"'Storage","_","Pool) is passed as the Pool parameter. The Size","_","In","_","Storage","_","Elements parameter indicates the number of storage elements to be allocated, and is no more than ",(0,o.jsx)("i",{children:"D"}),"'Max","_","Size","_","In","_","Storage","_","Elements, where ",(0,o.jsx)("i",{children:"D"})," is the designated subtype of ",(0,o.jsx)("i",{children:"T"}),". The Alignment parameter is a nonzero integral multiple of ",(0,o.jsx)("i",{children:"D"}),"'Alignment if ",(0,o.jsx)("i",{children:"D"})," is a specific type, and otherwise is a nonzero integral multiple of the alignment of the specific type identified by the tag of the object being created; it is unspecified if there is no such value. The Alignment parameter is no more than ",(0,o.jsx)("i",{children:"D"}),"'Max","_","Alignment","_","For","_","Allocation. The result returned in the Storage","_","Address parameter is used as the address of the allocated storage, which is a contiguous block of memory of Size","_","In","_","Storage","_","Elements storage elements. [Any exception propagated by Allocate is propagated by the construct that contained the call.]",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.e/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Note that the implementation does not turn other exceptions into Storage","_","Error.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.f/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["\u201cNonzero integral multiple\u201d of an alignment includes the alignment value itself, of course. The value is unspecified if the alignment of the specific type is zero. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21.6/5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0107-1","AI12-0445-1"]}),"\n",(0,o.jsxs)("p",{children:["The number of calls to Allocate that will be used to implement an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for any particular type is unspecified. The number of calls to Deallocate that will be used to implement an instance of Unchecked","_","Deallocation (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.2",children:"13.11.2"}),") for any particular object is the same as the number of Allocate calls for that object.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.g/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This supports objects that are allocated in one or more parts. The second sentence prevents extra or missing calls to Deallocate. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.h/3"}),(0,o.jsx)(d.A,{items:["AI05-0005-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"To be honest: "}),"The number of calls to Deallocate from all sources for an object always will be the same as the number of calls to Allocate from all sources for that object. However, in unusual cases, not all of those Deallocate calls may be made by an instance of Unchecked","_","Deallocation. Specifically, in the unusual case of assigning to an object of a mutable variant record type such that the variant changes, some of the Deallocate calls may be made by the assignment (as may some of the Allocate calls). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.i/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We do not define the relative order of multiple calls used to deallocate the same object \u2014 that is, if the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," allocated two pieces ",(0,o.jsx)("i",{children:"x"})," and ",(0,o.jsx)("i",{children:"y"}),", then an instance of Unchecked","_","Deallocation might deallocate ",(0,o.jsx)("i",{children:"x"})," and then ",(0,o.jsx)("i",{children:"y"}),", or it might deallocate ",(0,o.jsx)("i",{children:"y"})," and then ",(0,o.jsx)("i",{children:"x"}),". ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21.7/3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0107-1"]}),"\n",(0,o.jsxs)("p",{children:["The Deallocate procedure of a user-defined storage pool object ",(0,o.jsx)("i",{children:"P"})," may be called by the implementation to deallocate storage for a type ",(0,o.jsx)("i",{children:"T"})," whose pool is ",(0,o.jsx)("i",{children:"P"})," only at the places when an Allocate call is allowed for ",(0,o.jsx)("i",{children:"P"}),", during the execution of an instance of Unchecked","_","Deallocation for ",(0,o.jsx)("i",{children:"T"}),", or as part of the finalization of the collection of ",(0,o.jsx)("i",{children:"T"}),". For such a call of Deallocate, ",(0,o.jsx)("i",{children:"P"})," (equivalent to ",(0,o.jsx)("i",{children:"T"}),"'Storage","_","Pool) is passed as the Pool parameter. The value of the Storage","_","Address parameter for a call to Deallocate is the value returned in the Storage","_","Address parameter of the corresponding successful call to Allocate. The values of the Size","_","In","_","Storage","_","Elements and Alignment parameters are the same values passed to the corresponding Allocate call. Any exception propagated by Deallocate is propagated by the construct that contained the call.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.j/3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We allow Deallocate to be called anywhere that Allocate is, in order to allow the recovery of storage from failed allocations (that is, those that raise exceptions); from extended return statements that exit via a goto, exit, or locally handled exception; and from objects that are reallocated when they are assigned. In each of these cases, we would have a storage leak if the implementation did not recover the storage (there is no way for the programmer to do it). We do not require such recovery, however, as it could be a serious performance drag on these operations. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"documentation-requirements",children:"Documentation Requirements"}),"\n",(0,o.jsx)(c.A,{children:"22/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0445-1"]}),"\n",(0,o.jsxs)("p",{children:["An implementation shall document the set of values that a user-defined Allocate procedure has to accept for the Alignment parameter. An implementation shall document how the standard storage pool is chosen, and how storage is allocated by standard storage pools. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"22.a/2"}),(0,o.jsxs)(i.A,{type:"aarm",aarm:"note",children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"22.b/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Documentation Requirement: "}),"The set of values that a user-defined Allocate procedure needs to accept for the Alignment parameter. How the standard storage pool is chosen, and how storage is allocated by standard storage pools.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"implementation-advice",children:"Implementation Advice"}),"\n",(0,o.jsx)(c.A,{children:"23"}),"\n",(0,o.jsxs)("p",{children:["An implementation should document any cases in which it dynamically allocates heap storage for a purpose other than the evaluation of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),". ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"23.a.1/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Any cases in which heap storage is dynamically allocated other than as part of the evaluation of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," should be documented.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"23.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This is \u201c\u201d because the term \u201cheap storage\u201d is not formally definable; therefore, it is not testable whether the implementation obeys this advice. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"24"}),"\n",(0,o.jsxs)("p",{children:["A default (implementation-provided) storage pool for an access-to-constant type should not have overhead to support deallocation of individual objects. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"24.a.1/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"A default storage pool for an access-to-constant type should not have overhead to support deallocation of individual objects.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"24.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Unchecked","_","Deallocation is not defined for such types. If the access-to-constant type is library-level, then no deallocation (other than at partition completion) will ever be necessary, so if the size needed by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of the type is known at link-time, then the allocation should be performed statically. If, in addition, the initial value of the designated object is known at compile time, the object can be allocated to read-only memory. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"24.b"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If the Storage","_","Size for an access type is specified, the storage pool should consist of a contiguous block of memory, possibly allocated on the stack. The pool should contain approximately this number of storage elements. These storage elements should be reserved at the place of the Storage","_","Size clause, so that ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s cannot raise Storage","_","Error due to running out of pool space until the appropriate number of storage elements has been used up. This approximate (possibly rounded-up) value should be used as a maximum; the implementation should not increase the size of the pool on the fly. If the Storage","_","Size for an access type is specified as zero, then the pool should not take up any storage space, and any ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for the type should raise Storage","_","Error. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"24.c"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Note that most of this is approximate, and so cannot be (portably) tested. That's why we make it an Implementation Note. There is no particular number of allocations that is guaranteed to succeed, and there is no particular number of allocations that is guaranteed to fail. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"25/2"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00230-01"]}),"\n",(0,o.jsxs)("p",{children:["The storage pool used for an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," of an anonymous access type should be determined as follows:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"25.1/2"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00230-01","AI95-00416-01"]}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["If the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," is defining a coextension (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#Subclause_3.10.2",children:"3.10.2"}),") of an object being created by an outer ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),", then the storage pool used for the outer ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," should also be used for the coextension;",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"25.2/2"}),(0,o.jsx)(d.A,{items:["AI95-00230-01"]}),(0,o.jsxs)("li",{children:["For other access discriminants and access parameters, the storage pool should be created at the point of the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),", and be reclaimed when the allocated object becomes inaccessible;",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"25.3/3"}),(0,o.jsx)(d.A,{items:["AI05-0051-1"]}),(0,o.jsxs)("li",{children:["If the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," defines the result of a function with an access result, the storage pool is determined as though the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," were in place of the call of the function. If the call is the operand of a type conversion, the storage pool is that of the target access type of the conversion. If the call is itself defining the result of a function with an access result, this rule is applied recursively;",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"25.4/5"}),(0,o.jsx)(d.A,{items:["AI95-00230-01","AI12-0444-1"]}),(0,o.jsxs)("li",{children:["Otherwise, a default storage pool should be created at the point where the anonymous access type is elaborated; such a storage pool may have no mechanism for the deallocation of individual objects. ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"25.a.1/2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Usually, a storage pool for an access discriminant or access parameter should be created at the point of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),", and be reclaimed when the designated object becomes inaccessible. For other anonymous access types, the pool should be created at the point where the type is elaborated and may have no mechanism for the deallocation of individual objects.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"25.a/2"}),(0,o.jsx)(d.A,{items:["AI95-00230-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),'For access parameters and access discriminants, the "storage pool" for an anonymous access type would not normally exist as a separate entity. Instead, the designated object of the allocator would be allocated, in the case of an access parameter, as a local aliased variable at the call site, and in the case of an access discriminant, contiguous with the object containing the discriminant. This is similar to the way storage for ',(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.3#S0106",children:"aggregate"})}),"s is typically managed.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"25.b/2"}),(0,o.jsx)(d.A,{items:["AI95-00230-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["For other sorts of anonymous access types, this implementation is not possible in general, as the accessibility of the anonymous access type is that of its declaration, while the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),' could be more nested. In this case, a "real" storage pool is required. Note, however, that this storage pool need not support (separate) deallocation, as it is not possible to instantiate Unchecked',"_","Deallocation with an anonymous access type. (If deallocation is needed, the object should be allocated for a named access type and converted.) Thus, deallocation only need happen when the anonymous access type itself goes out of scope; this is similar to the case of an access-to-constant type. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"26/5"}),(0,o.jsx)(d.A,{items:["AI12-0442-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 1   A user-defined storage pool type can be obtained by extending the Root","_","Storage","_","Pool type, and overriding the primitive subprograms Allocate, Deallocate, and Storage","_","Size. A user-defined storage pool can then be obtained by declaring an object of the type extension. The user can override Initialize and Finalize if there is any desire for nontrivial initialization and finalization for a user-defined pool type. For example, Finalize can reclaim blocks of storage that are allocated separately from the pool object itself.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"27"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 2   The writer of the user-defined allocation and deallocation procedures, and users of ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s for the associated access type, are responsible for dealing with any interactions with tasking. In particular: ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"28"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["If the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s are used in different tasks, they require mutual exclusion.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"29"}),(0,o.jsxs)("li",{children:["If they are used inside protected objects, they cannot block.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"30"}),(0,o.jsxs)("li",{children:["If they are used by interrupt handlers (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-C/AA-C.3",children:"C.3"}),", \u201c",(0,o.jsx)("a",{href:"/docs/arm/AA-C/AA-C.3",children:"Interrupt Support"}),"\u201d), the mutual exclusion mechanism has to work properly in that context. ",(0,o.jsx)("br",{})]})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"31"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 3   The primitives Allocate, Deallocate, and Storage","_","Size are declared as abstract (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.9#Subclause_3.9.3",children:"3.9.3"}),"), and therefore they have to be overridden when a new (nonabstract) storage pool type is declared. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"31.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Note that the Storage","_","Pool attribute denotes an object, rather than a value, which is somewhat unusual for attributes.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"31.b"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The calls to Allocate, Deallocate, and Storage","_","Size are dispatching calls \u2014 this follows from the fact that the actual parameter for Pool is T'Storage","_","Pool, which is of type Root","_","Storage","_","Pool'Class. In many cases (including all cases in which Storage","_","Pool is not specified), the compiler can determine the tag statically. However, it is possible to construct cases where it cannot.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"31.c"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["All access types in the same derivation class share the same pool, whether implementation defined or user defined. This is necessary because we allow type conversions among them (even if they are pool-specific), and we want pool-specific access values to always designate an element of the right pool. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"31.d"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If an access type has a standard storage pool, then the implementation doesn't actually have to follow the pool interface described here, since this would be semantically invisible. For example, the allocator could conceivably be implemented with inline code. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(c.A,{children:"32"}),"\n",(0,o.jsxs)("p",{children:["To associate an access type with a storage pool object, the user first declares a pool object of some type derived from Root","_","Storage","_","Pool. Then, the user defines its Storage","_","Pool attribute, as follows:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"33"}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["Pool","_","Object : Some","_","Storage","_","Pool","_","Type;","\n","\n",(0,o.jsx)(c.A,{children:"34"}),"\ntype T is access Designated;","\n","for T'Storage","_","Pool use Pool","_","Object;","\n"]})}),"\n",(0,o.jsx)(c.A,{children:"35/5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0440-1"]}),"\n",(0,o.jsxs)("p",{children:["Another access type can be added to an existing storage pool, via: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"36"}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["for T2'Storage","_","Pool use T'Storage","_","Pool;","\n"]})}),"\n",(0,o.jsx)(c.A,{children:"37"}),"\n",(0,o.jsxs)("p",{children:["The semantics of this is implementation defined for a standard storage pool. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"37.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"For example, the implementation is allowed to choose a storage pool for T that takes advantage of the fact that T is of a certain size. If T2 is not of that size, then the above will probably not work. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"38/5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0440-1"]}),"\n",(0,o.jsxs)("p",{children:["As usual, a derivative of Root","_","Storage","_","Pool can define additional operations. For example, consider the Mark","_","Release","_","Pool","_","Type defined in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.6",children:"13.11.6"}),", that has two additional operations, Mark and Release, the following is a possible use: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"39/3"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00066-01","AI05-0111-3"]}),"\n",(0,o.jsxs)(l.A,{language:"ada",children:[(0,o.jsxs)(s.p,{children:["{","8652/0041","}"," type Mark","_","Release","_","Pool","_","Type","\n","   (Pool","_","Size : Storage","_","Elements.Storage","_","Count)","\n","        is new Subpools.Root","_","Storage","_","Pool","_","With","_","Subpools with private;","\n","           -- As defined in package MR","_","Pool, see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.6",children:"13.11.6"}),"\n","\n",(0,o.jsx)(c.A,{children:"40"}),"\n...","\n","\n",(0,o.jsx)(c.A,{children:"41/5"})]}),(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0178-1"]}),(0,o.jsxs)(s.p,{children:["Our","_","Pool : Mark","_","Release","_","Pool","_","Type (Pool","_","Size =",">"," 2000);","\n","My","_","Mark : Subpool","_","Handle; -- As declared in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.6",children:"13.11.6"}),"\n","\n",(0,o.jsx)(c.A,{children:"42/3"})]}),(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),(0,o.jsxs)(s.p,{children:["type Acc is access ...;","\n","for Acc'Storage","_","Pool use Our","_","Pool;","\n","...","\n","\n",(0,o.jsx)(c.A,{children:"43/3"})]}),(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),(0,o.jsxs)(s.p,{children:["My","_","Mark := Mark(Our","_","Pool);","\n","... -- Allocate objects using \u201cnew (My","_","Mark) Designated(...)\u201d.","\n","Release(My","_","Mark); -- Finalize objects and reclaim storage.","\n"]})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-83",children:"Extensions to Ada 83"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.a"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["User-defined storage pools are new to Ada 95. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-83",children:"Wording Changes from Ada 83"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.b/3"}),(0,o.jsx)(d.A,{items:["AI05-0005-1","AI05-0190-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Ada 83 originally introduced the concept called a \u201ccollection\u201d, which is similar to what we call a storage pool. All access types in the same derivation class share the same collection. Ada 95 introduces the storage pool, which is similar in that all access types in the same derivation class share the same storage pool, but other (unrelated) access types can also share the same storage pool, either by default, or as specified by the user. A collection is an amorphous grouping of objects (mainly used to describe finalization of access types); a storage pool is a more concrete concept \u2014 hence the different name.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.c"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["RM83 states the erroneousness of reading or updating deallocated objects incorrectly by missing various cases. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"incompatibilities-with-ada-95",children:"Incompatibilities With Ada 95"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.d/2"}),(0,o.jsx)(d.A,{items:["AI95-00435-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Amendment "})," Storage pools (and Storage","_","Size) are not defined for access-to-subprogram types. The original Ada 95 wording defined the attributes, but said nothing about their values. If a program uses attributes Storage","_","Pool or Storage","_","Size on an access-to-subprogram type, it will need to be corrected for Ada 2005. That's a good thing, as such a use is a bug \u2014 the concepts never were defined for such types. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-95",children:"Extensions to Ada 95"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.e/2"}),(0,o.jsx)(d.A,{items:["AI95-00161-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Amendment "})," Added ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Preelaborable","_","Initialization to type Root","_","Storage","_","Pool, so that extensions of it can be used to declare default-initialized objects in preelaborated units. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-95",children:"Wording Changes from Ada 95"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.f/2"}),(0,o.jsx)(d.A,{items:["AI95-00137-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["{",(0,o.jsx)("i",{children:"8652/0009"}),"}"," ",(0,o.jsx)("b",{children:"Corrigendum:"})," Added wording to specify that these are representation attributes.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.g/2"}),(0,o.jsx)(d.A,{items:["AI95-00230-01","AI95-00416-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Added wording to clarify that an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for a coextension nested inside an outer ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," shares the pool with the outer ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),". ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2005",children:"Wording Changes from Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.h/3"}),(0,o.jsx)(d.A,{items:["AI05-0051-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Added the missing definition of the storage pool of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for an anonymous access result type.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.i/3"}),(0,o.jsx)(d.A,{items:["AI05-0107-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Clarified when an implementation is allowed to call Allocate and Deallocate, and the requirements on such calls.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.j/3"}),(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Added wording to support subpools and refer to the subpool example, see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.4",children:"13.11.4"}),".",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.k/3"}),(0,o.jsx)(d.A,{items:["AI05-0116-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Added wording to specify that the alignment for an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," with a class-wide designated type comes from the specific type that is allocated.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.l/3"}),(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Added wording to allow larger alignments for calls to Allocate made by ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s, up to Max","_","Alignment","_","For","_","Allocation. This eases implementation in some cases. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2012",children:"Extensions to Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.m/5"}),(0,o.jsx)(d.A,{items:["AI12-0235-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Package System.Storage","_","Pools now has Pure categorization, so it can be mentioned for any package. Note that this does not allow storage pool objects to be shared between partitions, as these necessarily must be variables; however, this does allow a storage pool type to be shared. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2012",children:"Wording Changes from Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.n/4"}),(0,o.jsx)(d.A,{items:["AI12-0043-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"})," Tightened up the description of the implementation-defined pool used when Storage","_","Size is specified. This is not intended to change any implementation.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"43.o/5"}),(0,o.jsx)(d.A,{items:["AI12-0319-1","AI12-0424-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Specified that the standard pool(s), and the pool(s) used to implement a specified Storage","_","Size, are nonblocking and support concurrent use. This was always true (which is why this is not documented as an incompatibility), but it never was explicitly stated before. In the past, the absence of wording defining something to be potentially blocking determined if blocking was not allowed. Similarly, the absence of a statement that allocation was not allowed in multiple tasks implied that it was allowed. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.1"}),"\n",(0,o.jsx)(s.h2,{id:"13111--storage-allocation-attributes",children:"13.11.1  Storage Allocation Attributes"}),"\n",(0,o.jsx)(c.A,{children:"1/3_13.11.1"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),"\n",(0,o.jsxs)("p",{children:["[The Max","_","Size","_","In","_","Storage","_","Elements and Max","_","Alignment","_","For","_","Allocation attributes may be useful in writing user-defined pool types.] ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics-1",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"2/3_13.11.1"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),"\n",(0,o.jsxs)("p",{children:["For every subtype S, the following attributes are defined: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3/5_13.11.1"}),"\n",(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"S'Max","_","Size","_","In","_","Storage","_","Elements"]}),"\n",(0,o.jsx)(d.A,{items:["AI95-00256-01","AI95-00416-01","AI05-0193-1","AI12-0439-1"]}),"\n",(0,o.jsx)("dl",{children:(0,o.jsxs)("dd",{children:["Denotes the maximum value for Size","_","In","_","Storage","_","Elements that can be requested by the implementation via Allocate for an access type whose designated subtype is S. The value of this attribute is of type ",(0,o.jsxs)("i",{children:["universal","_","integer"]}),". ",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"3.a_13.11.1"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If S is an unconstrained array subtype, or an unconstrained subtype with discriminants, S'Max","_","Size","_","In","_","Storage","_","Elements might be very large. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"4/5_13.11.1"}),"\n",(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"S'Max","_","Alignment","_","For","_","Allocation"]}),"\n",(0,o.jsx)(d.A,{items:["AI05-0193-1","AI12-0439-1"]}),"\n",(0,o.jsx)("dl",{children:(0,o.jsxs)("dd",{children:["Denotes the maximum value for Alignment that can be requested by the implementation via Allocate for an access type whose designated subtype is S. The value of this attribute is of type ",(0,o.jsxs)("i",{children:["universal","_","integer"]}),". ",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsx)(c.A,{children:"5/5_13.11.1"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0193-1","AI12-0439-1"]}),"\n",(0,o.jsxs)("p",{children:["For a type with access discriminants, if the implementation allocates space for a coextension in the same pool as that of the object having the access discriminant, then these attributes account for any calls on Allocate that can be performed to provide space for such coextensions. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.a/3_13.11.1"}),(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The values of these attributes should reflect only the calls that might be made to the pool specified for an access type with designated type S. Thus, if the coextensions would normally be allocated from a different pool than the one used for the main object (that is, the  of ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"})," for determining the pool of an anonymous access discriminant is not followed), then these attributes should not reflect any calls on Allocate used to allocate the coextensions. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.b/3_13.11.1"}),(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Coextensions of coextensions of this type (and so on) are included in the values of these attributes if they are allocated from the same pool. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-95-1",children:"Wording Changes from Ada 95"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.c/2_13.11.1"}),(0,o.jsx)(d.A,{items:["AI95-00256-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Corrected the wording so that a fortune-telling compiler that can see the future execution of the program is not required. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2005",children:"Extensions to Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.d/3_13.11.1"}),(0,o.jsx)(d.A,{items:["AI05-0193-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The Max","_","Alignment","_","For","_","Allocation attribute is new. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.2"}),"\n",(0,o.jsx)(s.h2,{id:"13112--unchecked-storage-deallocation",children:"13.11.2  Unchecked Storage Deallocation"}),"\n",(0,o.jsx)(c.A,{children:"1_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["[ Unchecked storage deallocation of an object designated by a value of an access type is achieved by a call to an instance of the generic procedure Unchecked","_","Deallocation.] ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics-2",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"2_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["The following language-defined generic library procedure exists: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3/5_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0229-1","AI12-0241-1","AI12-0302-1","AI12-0319-1"]}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["generic","\n","   type Object(","<",">",") is limited private;","\n","   type Name   is access  Object;","\n","procedure Ada.Unchecked","_","Deallocation(X : in out Name)","\n","   with Preelaborate, Nonblocking,","\n","        Global =",">"," in out Name'Storage","_","Pool,","\n","        Convention =",">"," Intrinsic;","\n"]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"3.a/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0229-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The aspect Convention implies that the attribute Access is not allowed for instances of Unchecked","_","Deallocation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"legality-rules-1",children:"Legality Rules"}),"\n",(0,o.jsx)(c.A,{children:"3.1/3_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0157-1"]}),"\n",(0,o.jsxs)("p",{children:["A call on an instance of Unchecked","_","Deallocation is illegal if the actual access type of the instance is a type for which the Storage","_","Size has been specified by a static expression with value zero or is defined by the language to be zero. In addition to the places where Legality Rules normally apply (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-12/AA-12.3",children:"12.3"}),"), this rule applies also in the private part of an instance of a generic unit.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"3.b/3_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This rule is the same as the rule for ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s. We could have left the last sentence out, as a call to Unchecked","_","Deallocation cannot occur in a specification as it is a procedure call, but we left it for consistency and to avoid future maintenance hazards. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"dynamic-semantics",children:"Dynamic Semantics"}),"\n",(0,o.jsx)(c.A,{children:"4_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["Given an instance of Unchecked","_","Deallocation declared as follows: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"5_13.11.2"}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["procedure Free is","\n","    new Ada.Unchecked","_","Deallocation(","\n","        object","_","subtype","_","name, access","_","to","_","variable","_","subtype","_","name);","\n"]})}),"\n",(0,o.jsx)(c.A,{children:"6_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["Procedure Free has the following effect: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"7_13.11.2"}),"\n",(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"1."]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsxs)("dd",{children:["After executing Free(X), the value of X is ",(0,o.jsx)("b",{children:"null"}),".",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"8_13.11.2"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"2."]}),(0,o.jsxs)("dd",{children:["Free(X), when X is already equal to ",(0,o.jsx)("b",{children:"null"}),", has no effect.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"9/5_13.11.2"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"3."]}),(0,o.jsx)(d.A,{items:["AI95-00416-01","AI05-0107-1","AI12-0445-1"]}),(0,o.jsxs)("dd",{children:["Free(X), when X is not equal to ",(0,o.jsx)("b",{children:"null"})," first performs finalization of the object designated by X (and any coextensions of the object \u2014 see ",(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#Subclause_3.10.2",children:"3.10.2"}),"), as described in ",(0,o.jsx)("a",{href:"/docs/arm/AA-7/AA-7.6#Subclause_7.6.1",children:"7.6.1"}),". It then deallocates the storage occupied by the object designated by X (and any coextensions). If the storage pool is a user-defined object, then the storage is deallocated by calling Deallocate as described in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),". There is one exception: if the object being freed contains tasks, it is unspecified whether the object is deallocated. ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.a/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0107-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Free calls only the specified Deallocate procedure to do deallocation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"10/4_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI95-00416-01","AI12-0148-1"]}),"\n",(0,o.jsxs)("p",{children:["After the finalization step of Free(X), the object designated by X, and any subcomponents (and coextensions) thereof, no longer exist; their storage can be reused for other purposes. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"bounded-run-time-errors",children:"Bounded (Run-Time) Errors"}),"\n",(0,o.jsx)(c.A,{children:"11_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["It is a bounded error to free a discriminated, unterminated task object. The possible consequences are: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"11.a_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This is an error because the task might refer to its discriminants, and the discriminants might be deallocated by freeing the task object. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"12_13.11.2"}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["No exception is raised.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"13_13.11.2"}),(0,o.jsxs)("li",{children:["Program","_","Error or Tasking","_","Error is raised at the point of the deallocation. ",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"14_13.11.2"}),(0,o.jsxs)("li",{children:["Program","_","Error or Tasking","_","Error is raised in the task the next time it references any of the discriminants. ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"14.a_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This last case presumes an implementation where the task references its discriminants indirectly, and the pointer is nulled out when the task object is deallocated. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"15_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["In the first two cases, the storage for the discriminants (and for any enclosing object if it is designated by an access discriminant of the task) is not reclaimed prior to task termination. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.a_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The storage might never be reclaimed. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"15.1/4_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),"\n",(0,o.jsxs)("p",{children:["An access value that designates a nonexistent object is called a ",(0,o.jsx)("i",{children:"dangling reference"}),".",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.b/4_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"These can result from use of Unchecked","_","Deallocation, Unchecked","_","Deallocate","_","Subpool, and attribute Unchecked","_","Access. Bad results from Unchecked","_","Conversion and from stream-oriented attributes are abnormal by ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.9#Subclause_13.9.1",children:"13.9.1"}),", which is stronger and thus takes precedence. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"15.2/4_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),"\n",(0,o.jsxs)("p",{children:["[If a dangling reference is dereferenced (implicitly or explicitly), execution is erroneous (see below).] If there is no explicit or implicit dereference, then it is a bounded error to evaluate an expression whose result is a dangling reference. If the error is detected, either Constraint","_","Error or Program","_","Error is raised. Otherwise, execution proceeds normally, but with the possibility that the access value designates some other existing object.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.c/4_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If a dangling reference is compared with another access value, a result of either True or False is allowed. We need to allow this so that simple implementations of access values (for instance, as a bare address) can work if the memory in question is reused. (The formal definition of access equality is that it returns True if both access values designate the same object; that can never be True if one of the values is a dangling reference, and the other is not, but both values could refer to the same memory.) Membership tests that do not involve an implicit dereference generally do not depend on the access value at all.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.d/4_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["We allow Constraint","_","Error to be raised here so that dangling reference and null pointer checks can be combined into a single check. If different exceptions are required, then the checks have to be made separately - but there's little semantic difference (neither designate a usable object). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.e/4_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If a dangling reference is assigned into an object, including being passed to a formal parameter, that object also contains a dangling reference afterwards. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"15.f/4_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"For equality and membership operations on composite types, this applies to any parts that are access types, as these operations are created based on the operations of the components (which triggers the bounded error). For other operations on composite types, the bounded error is not triggered. For instance, an assignment of a composite object with a subcomponent that is a dangling reference has to work normally; no exception can be raised, but the target object will have a subcomponent that is a dangling references, and a (direct) use of that subcomponent is again a bounded error. This is similar to the way that assignments of invalid subcomponents are handled (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.9#Subclause_13.9.1",children:"13.9.1"}),"). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"erroneous-execution-1",children:"Erroneous Execution"}),"\n",(0,o.jsx)(c.A,{children:"16/3_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0033-1","AI05-0262-1"]}),"\n",(0,o.jsxs)("p",{children:["Evaluating a name that denotes a nonexistent object, or a protected subprogram or subprogram renaming whose associated object (if any) is nonexistent, is erroneous. The execution of a call to an instance of Unchecked","_","Deallocation is erroneous if the object was created other than by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for an access type whose pool is Name'Storage","_","Pool.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"16.a/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0033-1","AI05-0262-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The part about a protected subprogram is intended to cover the case of an access-to-protected-subprogram where the associated object has been deallocated. The part about a subprogram renaming is intended to cover the case of a renaming of a prefixed view where the prefix object has been deallocated, or the case of a renaming of an entry or protected subprogram where the associated task or protected object has been deallocated. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"16.b/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0157-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This text does not cover the case of a name that contains a null access value, as ",(0,o.jsx)("b",{children:"null"})," does not denote an object (rather than denoting a nonexistent object). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"implementation-advice-1",children:"Implementation Advice"}),"\n",(0,o.jsx)(c.A,{children:"17_13.11.2"}),"\n",(0,o.jsxs)("p",{children:["For a standard storage pool, Free should actually reclaim the storage. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.a.1/2_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"For a standard storage pool, an instance of Unchecked","_","Deallocation should actually reclaim the storage.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.a/2_13.11.2"}),(0,o.jsx)(d.A,{items:["AI95-00114-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This is not a testable property, since we do not know how much storage is used by a given pool element, nor whether fragmentation can occur. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"17.1/3_13.11.2"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0157-1"]}),"\n",(0,o.jsxs)("p",{children:["A call on an instance of Unchecked","_","Deallocation with a nonnull access value should raise Program","_","Error if the actual access type of the instance is a type for which the Storage","_","Size has been specified to be zero or is defined by the language to be zero. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.a.1/3_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-advice",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"A call on an instance of Unchecked","_","Deallocation with a nonnull access value should raise Program","_","Error if the actual access type of the instance is a type for which the Storage","_","Size has been specified to be zero or is defined by the language to be zero.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"17.b_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"If the call is not illegal (as in a generic body), we recommend that it raise Program","_","Error. Since the execution of this call is erroneous (any allocator from the pool will have raised Storage","_","Error, so the nonnull access value must have been allocated from a different pool or be a stack-allocated object), we can't require any behavior \u2014 anything at all would be a legitimate implementation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"18_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 1   The rules here that refer to Free apply to any instance of Unchecked","_","Deallocation.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19_13.11.2"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 2   Unchecked","_","Deallocation cannot be instantiated for an access-to-constant type. This is implied by the rules of ",(0,o.jsx)("a",{href:"/docs/arm/AA-12/AA-12.5#Subclause_12.5.4",children:"12.5.4"}),". ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-95-2",children:"Wording Changes from Ada 95"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.a/2_13.11.2"}),(0,o.jsx)(d.A,{items:["AI95-00416-01"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The rules for coextensions are clarified (mainly by adding that term). In theory, this reflects no change from Ada 95 (coextensions existed in Ada 95, they just didn't have a name). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2005-1",children:"Wording Changes from Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.b/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0033-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Added a rule that using an access-to-protected-subprogram is erroneous if the associated object no longer exists. It is hard to imagine an alternative meaning here, and this has no effect on correct programs.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.c/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0107-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Moved the requirements on an implementation-generated call to Deallocate to ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),", in order to put all of the rules associated with implementation-generated calls to Allocate and Deallocate together.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.d/3_13.11.2"}),(0,o.jsx)(d.A,{items:["AI05-0157-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"correction",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{})," Added wording so that calling an instance of Unchecked","_","Deallocation is treated similarly to ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s for access types where ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s would be banned. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"inconsistencies-with-ada-2012",children:"Inconsistencies With Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.e/4_13.11.2"}),(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"}),' Defined a "dangling reference", and specified that a dangling reference might designate some other existing object. This allows simple implementations of access values and reuse of object memory after deallocation. In prior versions of Ada, "=" between a dangling reference and an access to an existing object has to return False, even if the existing object and the object designated by the dangling reference are allocated in the same memory. A program that depended upon that could break with this revised rule. However, as a practical matter, almost all Ada implementations use simple implementations of access types that do not meet that requirement. So such a program would not work (consistently) on most Ada implementations; thus the change shouldn\'t break any existing programs - it just aligns the Standard with actual practice.',(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.f/4_13.11.2"}),(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["A side effect of this change is to allow an Ada implementation to detect dangling references in more places. This does not require any Ada implementation to change, and if the implementation does change, it just means that errors will be detected earlier. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2012-1",children:"Wording Changes from Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.g/4_13.11.2"}),(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"})," Clarified that deallocated objects cease to exist after finalization but before Deallocate is called. This is necessary to prevent erroneous execution from being triggered by the rules in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"})," in the time between the end of finalization and the end of the call to the instance of Unchecked","_","Deallocation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.3"}),"\n",(0,o.jsx)(s.h2,{id:"13113--default-storage-pools",children:"13.11.3  Default Storage Pools"}),"\n",(0,o.jsx)(c.A,{children:"1/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0229-1","AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["[Pragma and aspect Default","_","Storage","_","Pool specify the storage pool that will be used in the absence of an explicit specification of a storage pool or storage size for an access type.] ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(c.A,{children:"2/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{class:"Indented2",children:["The form of a ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Default","_","Storage","_","Pool is as follows: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{class:"Indented2",children:["  ",(0,o.jsx)("b",{children:"pragma"})," Default","_","Storage","_","Pool (",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})}),"); ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3.1/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0003-1"]}),"\n",(0,o.jsx)(l.A,{children:(0,o.jsxs)(s.p,{children:[(0,o.jsxs)("code",{children:["storage","_","pool","_","indicator"]}),(0,o.jsx)("a",{id:"S0358"}),(0,o.jsx)("code",{children:" ::= "}),(0,o.jsxs)("i",{children:["storage","_","pool","_"]}),(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," | ",(0,o.jsx)("b",{children:"null"})," | Standard",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsx)(c.A,{children:"3.2/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),"\n",(0,o.jsxs)("p",{class:"Indented2",children:["A ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Default","_","Storage","_","Pool is allowed immediately within the visible part of a ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-7/AA-7.1#S0230",children:"package_specification"})}),", immediately within a ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.11#S0086",children:"declarative_part"})}),", or as a configuration pragma. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"name-resolution-rules",children:"Name Resolution Rules"}),"\n",(0,o.jsx)(c.A,{children:"3.3/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),"\n",(0,o.jsxs)("p",{children:["The ",(0,o.jsxs)("i",{children:["storage","_","pool","_"]}),(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," is expected to be of type Root","_","Storage","_","Pool'Class. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"legality-rules-2",children:"Legality Rules"}),"\n",(0,o.jsx)(c.A,{children:"4/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{children:["The ",(0,o.jsxs)("i",{children:["storage","_","pool","_"]}),(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," shall denote a variable.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"4.1/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["The Standard ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," is an identifier specific to a pragma (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8",children:"2.8"}),") and does not denote any declaration. If the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," is Standard, then there shall not be a declaration with ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.1#S0022",children:"defining_identifier"})})," Standard that is immediately visible at the point of the pragma, other than package Standard itself.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"4.a.1/4_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We considered having the Standard ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," resolve to package Standard rather than being an identifier specific to a pragma. That would eliminate the need for a special check. But it would be bizarre to have something that could resolve to either an object or a (single) package, and resolving to package Standard would imply that the standard pool is an object declared in that package. A storage pool object must be a variable (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),"), yet preelaborable packages depend on package Standard, which would require implementers to implement the standard storage pool with Preelaborable","_","Initialization, which is an unnecessary restriction.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"4.a.2/4_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["No declaration of Standard can ever be use-visible, as the language-defined nonoverloadable definition of Standard will hide any use-visible declarations. Thus we need only concern ourselves with eliminating any possible confusion with regard to immediately visible declarations with the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.1#S0022",children:"defining_identifier"})})," Standard. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"4.2/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["If the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," is used as a configuration pragma, the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," shall be either ",(0,o.jsx)("b",{children:"null"})," or Standard, and it defines the ",(0,o.jsx)("i",{children:"default pool"})," to be the given ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," within all applicable compilation units (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-10/AA-10.1#Subclause_10.1.5",children:"10.1.5"}),"), except within the immediate scope of another ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Default","_","Storage","_","Pool. Otherwise, [the pragma occurs immediately within a sequence of declarations, and] it defines the default pool within the immediate scope of the pragma to be the given ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})}),", except within the immediate scope of a later pragma Default","_","Storage","_","Pool. [Thus, an inner pragma overrides an outer one.]",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"4.3/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0262-1"]}),"\n",(0,o.jsxs)("p",{children:["A ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Default","_","Storage","_","Pool shall not be used as a configuration pragma that applies to a compilation unit that is within the immediate scope of another ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-2/AA-2.8#S0019",children:"pragma"})})," Default","_","Storage","_","Pool.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"4.a/3_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This is to prevent confusion in cases like this: ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"4.b/3_13.11.3"}),(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["package Parent is","\n","   pragma Default","_","Storage","_","Pool(...);","\n","   ...","\n","end Parent;","\n","\n",(0,o.jsx)(c.A,{children:"4.c/3_13.11.3"}),"\npragma Default","_","Storage","_","Pool(...); -- Illegal!","\n","package Parent.Child is","\n","   ...","\n","end Parent.Child;","\n"]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"4.d/3_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["where the Default","_","Storage","_","Pool on Parent.Child would not (if it were legal) override the one in Parent. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics-3",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"5/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1","AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["The language-defined aspect Default","_","Storage","_","Pool may be specified for a generic instance; it defines the default pool for access types within an instance. .",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"5.1/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["The Default","_","Storage","_","Pool aspect may be specified as Standard, which is an identifier specific to an aspect (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.1#Subclause_13.1.1",children:"13.1.1"}),") and defines the default pool to be Standard. In this case, there shall not be a declaration with ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-3/AA-3.1#S0022",children:"defining_identifier"})})," Standard that is immediately visible at the point of the aspect specification, other than package Standard itself.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"5.2/5_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0003-1","AI12-0445-1"]}),"\n",(0,o.jsxs)("p",{children:["Otherwise, the expected type for the Default","_","Storage","_","Pool aspect is Root","_","Storage","_","Pool'Class and the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.1#S0348",children:"aspect_definition"})})," shall be a ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," that denotes a variable. This aspect overrides any Default","_","Storage","_","Pool pragma that applies to the generic unit; if the aspect is not specified, the default pool of the instance is that defined for the generic unit.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.a/3_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Aspect Description for "}),(0,o.jsxs)("b",{children:["Default","_","Storage","_","Pool: "]}),"Default storage pool for a generic instance.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"5.3/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0136-1"]}),"\n",(0,o.jsxs)("p",{children:["The effect of specifying the aspect Default","_","Storage","_","Pool on an instance of a language-defined generic unit is implementation-defined.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"5.a.1/4_13.11.3"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"implementation-defined",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The effect of specifying aspect Default","_","Storage","_","Pool on an instance of a language-defined generic unit.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"6/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{children:["For nonderived access types declared in places where the default pool is defined by the pragma or aspect, their Storage","_","Pool or Storage","_","Size attribute is determined as follows, unless Storage","_","Pool or Storage","_","Size is specified for the type:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"6.1/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["If the default pool is ",(0,o.jsx)("b",{children:"null"}),", the Storage","_","Size attribute is defined by the language to be zero. [Therefore, an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for such a type is illegal.]",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"6.2/4_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0003-1"]}),(0,o.jsxs)("li",{children:["If the default pool is neither ",(0,o.jsx)("b",{children:"null"})," nor Standard, the Storage","_","Pool attribute is that pool.",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsx)(c.A,{children:"6.3/4_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0003-1"]}),"\n",(0,o.jsxs)("p",{children:["Otherwise (including when the default pool is specified as Standard), the standard storage pool is used for the type as described in ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),".",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"6.a/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"ramification",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Default","_","Storage","_","Pool is the only way to specify the storage pool for an anonymous access type.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"6.b/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Note that coextensions should be allocated in the same pool (or on the stack) as the outer object (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),"); the Storage","_","Pool of the access discriminant (and hence the Default","_","Storage","_","Pool) is supposed to be ignored for coextensions. This matches the required finalization point for coextensions.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"6.b.1/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The default storage pool for an allocator that occurs within an instance of a generic is defined by the Default","_","Storage","_","Pool aspect of the instantiation (if specified), or by the Default","_","Storage","_","Pool pragma that applied to the generic; the Default","_","Storage","_","Pool pragma that applies to the instantiation is irrelevant.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"6.b.2/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["It is possible to specify the Default","_","Storage","_","Pool aspect for an instantiation such that allocations will fail. For example, the generic unit might be expecting a pool that supports certain sizes and alignments, and the one on the instance might be more restrictive. It is the programmer's responsibility to get this right.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"6.b.3/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The semantics of the Default","_","Storage","_","Pool aspect are similar to passing a pool object as a generic formal, and putting pragma Default","_","Storage","_","Pool at the top of the generic's visible part, specifying that formal. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"7/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"implementation-permissions",children:"Implementation Permissions"}),"\n",(0,o.jsx)(c.A,{children:"8/3_13.11.3"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0190-1","AI05-0229-1"]}),"\n",(0,o.jsxs)("p",{children:["An object created by an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," that is passed as the actual parameter to an access parameter may be allocated on the stack, and automatically reclaimed, regardless of the default pool. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"8.a/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This matches the required finalization point for such an allocated object. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9/5_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0440-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE   Default","_","Storage","_","Pool can be used with restrictions No","_","Coextensions and No","_","Access","_","Parameter","_","Allocators (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-H/AA-H.4",children:"H.4"}),") to ensure that all ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),"s use the default pool. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-83-1",children:"Wording Changes from Ada 83"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.a/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0229-1"]}),(0,o.jsxs)(i.A,{type:"aarm",aarm:"note",children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"incompatibilities-with-ada-2005",children:"Incompatibilities With Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.b/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0229-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Pragma Controlled has been dropped from Ada, as it has no effect in any known Ada implementations and it seems to promise capabilities not expected in Ada implementations. This is usually not an incompatibility, as the pragma merely becomes unrecognized (with a warning) and can be implemented as an implementation-defined pragma if desired. However, it is incompatible if it is (now) implemented as an implementation-defined pragma, someone used this pragma in a unit, and they also used restriction No","_","Implementation","_","Pragmas on that unit. In that case, the pragma would now violate the restriction; but use of this pragma (which does nothing) should be very rare, so this is not a significant issue. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2005-1",children:"Extensions to Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.c/4_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0190-1","AI12-0005-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The pragma Default","_","Storage","_","Pool and aspect Default","_","Storage","_","Pool are new. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2005-2",children:"Wording Changes from Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.d/3_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0229-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["The entire discussion of garbage collection (and especially that of controlled objects) is deleted. Ada 2012 provides subpools (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.4",children:"13.11.4"}),") for storage management of objects, including controlled objects, a mechanism which is much more predictable than garbage collection. Note that no version of Ada allows early finalization of controlled objects (other than via the use of Unchecked","_","Deallocation or Unchecked","_","Deallocate","_","Subpool), so that garbage collection of such objects would be ineffective in the standard mode anyway. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2012-1",children:"Extensions to Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.e/4_13.11.3"}),(0,o.jsx)(d.A,{items:["AI05-0003-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"})," The ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#S0358",children:"storage_pool_indicator"})})," Standard is new. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2012-2",children:"Wording Changes from Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"9.f/4_13.11.3"}),(0,o.jsx)(d.A,{items:["AI12-0136-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"})," We now explicitly say that the behavior of language-defined generic units when given the Default","_","Storage","_","Pool aspect is implementation-defined. Portable code cannot rely on such a package using a particular pool implementation. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.4"}),"\n",(0,o.jsx)(s.h2,{id:"13114--storage-subpools",children:"13.11.4  Storage Subpools"}),"\n",(0,o.jsx)(c.A,{children:"1/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["This subclause defines a package to support the partitioning of a storage pool into subpools. A subpool may be specified as the default to be used for allocation from the associated storage pool, or a particular subpool may be specified as part of an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8",children:"4.8"}),"). ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics-4",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"2/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["The following language-defined library package exists:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3/5_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0302-1"]}),"\n",(0,o.jsxs)(l.A,{language:"ada",children:[(0,o.jsxs)(s.p,{children:["package System.Storage","_","Pools.Subpools","\n","    with Preelaborate, Global =",">"," in out synchronized is","\n","\n",(0,o.jsx)(c.A,{children:"4/5_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI12-0356-1","AI12-0399-1"]}),(0,o.jsxs)(s.p,{children:["type Root","_","Storage","_","Pool","_","With","_","Subpools is","\n","      abstract new Root","_","Storage","_","Pool with private","\n","      with Preelaborable","_","Initialization;","\n","\n",(0,o.jsx)(c.A,{children:"5/5_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI12-0356-1","AI12-0399-1"]}),(0,o.jsxs)(s.p,{children:["type Root","_","Subpool is abstract tagged limited private","\n","      with Preelaborable","_","Initialization;","\n","\n",(0,o.jsx)(c.A,{children:"6/3_13.11.4"}),"\ntype Subpool","_","Handle is access all Root","_","Subpool'Class;","\n","   for Subpool","_","Handle'Storage","_","Size use 0;","\n","\n",(0,o.jsx)(c.A,{children:"7/3_13.11.4"}),"\nfunction Create","_","Subpool (Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools)","\n","      return not null Subpool","_","Handle is abstract;","\n","\n",(0,o.jsx)(c.A,{children:"8/3_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI05-0252-1"]}),(0,o.jsxs)(s.p,{children:["-- The following operations are intended for pool implementers:","\n","\n",(0,o.jsx)(c.A,{children:"9/3_13.11.4"}),"\nfunction Pool","_","of","_","Subpool (Subpool : not null Subpool","_","Handle)","\n","      return access Root","_","Storage","_","Pool","_","With","_","Subpools'Class;","\n","\n",(0,o.jsx)(c.A,{children:"10/5_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI12-0302-1"]}),(0,o.jsxs)(s.p,{children:["procedure Set","_","Pool","_","of","_","Subpool (","\n","      Subpool : in not null Subpool","_","Handle;","\n","      To : in out Root","_","Storage","_","Pool","_","With","_","Subpools'Class)","\n","         with Global =",">"," overriding in out Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"11/5_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI12-0302-1"]}),(0,o.jsxs)(s.p,{children:["procedure Allocate","_","From","_","Subpool (","\n","      Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools;","\n","      Storage","_","Address : out Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Elements.Storage","_","Count;","\n","      Alignment : in Storage","_","Elements.Storage","_","Count;","\n","      Subpool : in not null Subpool","_","Handle) is abstract","\n","         with Pre'Class =",">"," Pool","_","of","_","Subpool(Subpool) = Pool'Access,","\n","              Global =",">"," overriding in out Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"12/3_13.11.4"}),"\nprocedure Deallocate","_","Subpool (","\n","      Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools;","\n","      Subpool : in out Subpool","_","Handle) is abstract","\n","         with Pre'Class =",">"," Pool","_","of","_","Subpool(Subpool) = Pool'Access;","\n","\n",(0,o.jsx)(c.A,{children:"13/3_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["function Default","_","Subpool","_","for","_","Pool (","\n","      Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools)","\n","         return not null Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"14/3_13.11.4"}),"\noverriding","\n","   procedure Allocate (","\n","      Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools;","\n","      Storage","_","Address : out Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Elements.Storage","_","Count;","\n","      Alignment : in Storage","_","Elements.Storage","_","Count);","\n","\n",(0,o.jsx)(c.A,{children:"15/3_13.11.4"}),"\noverriding","\n","   procedure Deallocate (","\n","      Pool : in out Root","_","Storage","_","Pool","_","With","_","Subpools;","\n","      Storage","_","Address : in Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Elements.Storage","_","Count;","\n","      Alignment : in Storage","_","Elements.Storage","_","Count) is null;","\n","\n",(0,o.jsx)(c.A,{children:"16/3_13.11.4"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["overriding","\n","   function Storage","_","Size (Pool : Root","_","Storage","_","Pool","_","With","_","Subpools)","\n","      return Storage","_","Elements.Storage","_","Count","\n","          is (Storage","_","Elements.Storage","_","Count'Last);","\n","\n",(0,o.jsx)(c.A,{children:"17/3_13.11.4"}),"\nprivate","\n","   ... -- not specified by the language","\n","end System.Storage","_","Pools.Subpools;","\n"]})]}),"\n",(0,o.jsx)(c.A,{children:"18/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["A ",(0,o.jsx)("i",{children:"subpool"})," is a separately reclaimable portion of a storage pool, identified by an object of type Subpool","_","Handle (a ",(0,o.jsx)("i",{children:"subpool handle"}),"). A subpool handle also identifies the enclosing storage pool, a ",(0,o.jsx)("i",{children:"storage pool that supports subpools"}),", which is a storage pool whose type is descended from Root","_","Storage","_","Pool","_","With","_","Subpools. A subpool is created by calling Create","_","Subpool or a similar constructor; the constructor returns the subpool handle.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"19/5_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI05-0269-1","AI12-0445-1"]}),"\n",(0,o.jsxs)("p",{children:["A ",(0,o.jsx)("i",{children:"subpool object"})," is an object of a type descended from Root","_","Subpool. [Typically, subpool objects are managed by the containing storage pool; only the handles have to be exposed to clients of the storage pool. Subpool objects are designated by subpool handles, and are the run-time representation of a subpool.]",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"19.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"proof",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"We know that subpool handles designate subpool objects because the declaration of Subpool","_","Handle says so. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"20/4_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0145-1"]}),"\n",(0,o.jsxs)("p",{children:["Each subpool ",(0,o.jsx)("i",{children:"belongs"})," to a single storage pool [(which will always be a pool that supports subpools)]. An access to the pool that a subpool belongs to can be obtained by calling Pool","_","of","_","Subpool with the subpool handle. Set","_","Pool","_","of","_","Subpool causes the subpool of the subpool handle to belong to the given pool[; this is intended to be called from subpool constructors like Create","_","Subpool.] Set","_","Pool","_","of","_","Subpool propagates Program","_","Error if the subpool already belongs to a pool. If Set","_","Pool","_","of","_","Subpool has not yet been called for a subpool, Pool","_","of","_","Subpool returns ",(0,o.jsx)("b",{children:"null"}),".",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"20.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Pool","_","of","_","Subpool and Set","_","Pool","_","of","_","Subpool are provided by the Ada implementation and typically will not be overridden by the pool implementer. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"21/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["When an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," for a type whose storage pool supports subpools is evaluated, a call is made on Allocate","_","From","_","Subpool passing in a Subpool","_","Handle, in addition to the parameters as defined for calls on Allocate (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),"). The subpool designated by the ",(0,o.jsxs)("i",{children:["subpool","_","handle","_"]}),(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," is used, if specified in an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})}),". Otherwise, Default","_","Subpool","_","for","_","Pool of the Pool is used to provide a subpool handle. All requirements on the Allocate procedure also apply to Allocate","_","from","_","Subpool.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"Deallocate","_","Subpool is expected to do whatever is needed to deallocate all of the objects contained in the subpool; it is called from Unchecked","_","Deallocate","_","Subpool (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11#Subclause_13.11.5",children:"13.11.5"}),").",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"21.b/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Typically, the pool implementer will not override Allocate. In the canonical definition of the language, it will never be called for a pool that supports subpools (there is an Implementation Permission below that allows it to be called in certain rare cases). ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(s.h4,{id:"legality-rules-3",children:"Legality Rules"}),"\n",(0,o.jsx)(c.A,{children:"22/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["If a storage pool that supports subpools is specified as the Storage","_","Pool for an access type, the access type is called a ",(0,o.jsx)("i",{children:"subpool access type"}),". A subpool access type shall be a pool-specific access type.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"23/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI05-0252-1"]}),"\n",(0,o.jsxs)("p",{children:["The accessibility level of a subpool access type shall not be statically deeper than that of the storage pool object. If the specified storage pool object is a storage pool that supports subpools, then the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," that denotes the object shall not denote part of a formal parameter, nor shall it denote part of a dereference of a value of a non-library-level general access type. In addition to the places where Legality Rules normally apply (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-12/AA-12.3",children:"12.3"}),"), these rules also apply in the private part of an instance of a generic unit. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"dynamic-semantics-1",children:"Dynamic Semantics"}),"\n",(0,o.jsx)(c.A,{children:"24/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI05-0252-1"]}),"\n",(0,o.jsxs)("p",{children:["When an access type with a specified storage pool is frozen (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.14",children:"13.14"}),"), if the tag of the storage pool object identifies a storage pool that supports subpools, the following checks are made:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"25/3_13.11.4"}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["the ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.1#S0091",children:"name"})})," used to specify the storage pool object does not denote part of a formal parameter nor part of a dereference of a value of a non-library-level general access type; and",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"26/3_13.11.4"}),(0,o.jsxs)("li",{children:["the accessibility level of the access type is not deeper than that of the storage pool object. ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsx)(c.A,{children:"27/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0252-1"]}),"\n",(0,o.jsxs)("p",{children:["Program","_","Error is raised if either of these checks fail.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"27.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This check (and its static counterpart) ensures that the type of the allocated objects exists at least as long as the storage pool object, so that the subpools are finalized (which finalizes any remaining allocated objects) before the type of the objects ceases to exist. The access type itself (and the associated collection) will cease to exist before the storage pool ceases to exist.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"27.b/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:['We also disallow the use of formal parameters and dereferences of non-library-level general access types when specifying a storage pool object if it supports subpools, because the "apparent" accessibility level is potentially deeper than that of the underlying object. Neither of these cases is very likely to occur in practice. ',(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"28/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["A call to Subpools.Allocate(P, Addr, Size, Align) does the following:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"29/3_13.11.4"}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["Allocate","_","From","_","Subpool","\n","  (Root","_","Storage","_","Pool","_","With","_","Subpools'Class(P),","\n","   Addr, Size, Align,","\n","   Subpool =",">"," Default","_","Subpool","_","for","_","Pool","\n","                (Root","_","Storage","_","Pool","_","With","_","Subpools'Class(P)));","\n"]})}),"\n",(0,o.jsx)(c.A,{children:"30/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["An ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," that allocates in a subpool raises Program","_","Error if the allocated object has task parts.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"30.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This is to ease implementation. We envision relaxing this restriction in a future version of Ada, once implementation experience has been gained. At this time, we are unable to come up with a set of rules for task termination that is both useful, and surely feasible to implement. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"31/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["Unless overridden, Default","_","Subpool","_","for","_","Pool propagates Program","_","Error.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"erroneous-execution-2",children:"Erroneous Execution"}),"\n",(0,o.jsx)(c.A,{children:"31.1/4_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0142-1"]}),"\n",(0,o.jsxs)("p",{children:["If Allocate","_","From","_","Subpool does not meet one or more of the requirements on the Allocate procedure as given in the Erroneous Execution rules of ",(0,o.jsx)("a",{href:"/docs/arm/AA-13/AA-13.11",children:"13.11"}),", then the program execution is erroneous. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"implementation-permissions-1",children:"Implementation Permissions"}),"\n",(0,o.jsx)(c.A,{children:"32/3_13.11.4"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["When an allocator for a type whose storage pool is of type Root","_","Storage","_","Pool'Class is evaluated, but supports subpools, the implementation may call Allocate rather than Allocate","_","From","_","Subpool. [This will have the same effect, so long as Allocate has not been overridden.]",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"32.a/3_13.11.4"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"reason",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"This ensures either of two implementation models are possible for an ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0164",children:"allocator"})})," with no ",(0,o.jsx)("code",{children:(0,o.jsx)("a",{href:"/docs/arm/AA-4/AA-4.8#S0165",children:"subpool_specification"})}),'. Note that the "supports subpools" property is not known at compile time for a pool of the class-wide type.',(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"32.b/3_13.11.4"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["The implementation can dispatch to Storage","_","Pools.Allocate. If the pool supports subpools, this will call Allocate","_","From","_","Subpool with the default subpool so long as Allocate has not been overridden.",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"32.c/3_13.11.4"}),(0,o.jsxs)("li",{children:["The implementation can declare Allocate","_","From","_","Subpool as a primitive of Root","_","Storage","_","Pool in the private part of Storage","_","Pools. This means that the Allocate","_","From","_","Subpool for Root","_","Storage","_","Pool","_","With","_","Subpools overrides that private one. The implementation can thus call the private one, which will call Allocate for non-subpool-supporting pools. The effect of this implementation does not change if Allocate is overridden for a pool that supports subpools. ",(0,o.jsx)("br",{})]})]})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"33/5_13.11.4"}),(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0442-1","AI12-0447-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 1   A user-defined storage pool type that supports subpools can be implemented by extending the Root","_","Storage","_","Pool","_","With","_","Subpools type, and overriding the primitive subprograms Create","_","Subpool, Allocate","_","From","_","Subpool, and Deallocate","_","Subpool. Create","_","Subpool is expected to call Set","_","Pool","_","Of","_","Subpool before returning the subpool handle. To make use of such a pool, a user can declare an object of the type extension, can use it to define the Storage","_","Pool attribute of one or more access types, and then can invoke Create","_","Subpool to obtain subpool handles associated with the pool.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"34/5_13.11.4"}),(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0440-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 2   A user-defined storage pool type that supports subpools can define additional subpool constructors similar to Create","_","Subpool (these typically will have additional parameters).",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"35/5_13.11.4"}),(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0442-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["NOTE 3   The pool implementor can override Default","_","Subpool","_","For","_","Pool if they want the pool to support a default subpool for the pool. The implementor can override Deallocate if individual object reclamation is to be supported, and can override Storage","_","Size if there is some limit on the total size of the storage pool. The implementor can override Initialize and Finalize if there is any desire for nontrivial initialization and finalization for the pool as a whole. For example, Finalize can reclaim blocks of storage that are allocated over and above the space occupied by the pool object itself. The pool implementor can extend the Root","_","Subpool type as necessary to carry additional information with each subpool provided by Create","_","Subpool.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2005-2",children:"Extensions to Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"35.a/3_13.11.4"}),(0,o.jsx)(d.A,{items:["AI05-0111-3","AI05-0252-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Subpools and the package System.Storage","_","Pools.Subpools are new. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2012-3",children:"Wording Changes from Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"35.b/4_13.11.4"}),(0,o.jsx)(d.A,{items:["AI12-0142-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum"}),": Clarified that an incorrect implementation of Allocate","_","From","_","Subpool causes execution to become erroneous. The wording already said that the requirements of Allocate apply to Allocate","_","From","_","Subpool, so we're just confirming the consequences of violating those requirements also apply.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"35.c/4_13.11.4"}),(0,o.jsx)(d.A,{items:["AI12-0145-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum"}),": Clarified that Pool","_","of","_","Subpool returns ",(0,o.jsx)("b",{children:"null"})," if Set","_","Pool","_","of","_","Subpool has not been called. As that can be inferred from the definition, and all known existing implementations return ",(0,o.jsx)("b",{children:"null"})," in this case, we document this as a wording change rather than a possible inconsistency. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.5"}),"\n",(0,o.jsx)(s.h2,{id:"13115--subpool-reclamation",children:"13.11.5  Subpool Reclamation"}),"\n",(0,o.jsx)(c.A,{children:"1/3_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["A subpool may be explicitly deallocated using Unchecked","_","Deallocate","_","Subpool. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(s.h4,{id:"static-semantics-5",children:"Static Semantics"}),"\n",(0,o.jsx)(c.A,{children:"2/3_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["The following language-defined library procedure exists:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"3/5_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI12-0302-1"]}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["with System.Storage","_","Pools.Subpools;","\n","procedure Ada.Unchecked","_","Deallocate","_","Subpool","\n","   (Subpool : in out System.Storage","_","Pools.Subpools.Subpool","_","Handle)","\n","   with Global =",">"," in out all;","\n"]})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"3.a/5_13.11.5"}),(0,o.jsx)(d.A,{items:["AI12-0005-1","AI12-0302-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"The Global specification for this routine needs to account for the dispatching call to the user-defined Deallocate","_","Subpool routine. We can't use the Dispatching aspect (see ",(0,o.jsx)("a",{href:"/docs/arm/AA-H/AA-H.7#Subclause_H.7.1",children:"H.7.1"}),") as that requires a statically named object (we have a function call here), so we have to use ",(0,o.jsx)("b",{children:"in out all"})," in order to allow the user-defined subprogram to do anything it needs to do. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(c.A,{children:"4/3_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["If Subpool is ",(0,o.jsx)("b",{children:"null"}),", a call on Unchecked","_","Deallocate","_","Subpool has no effect. Otherwise, the subpool is finalized, and Subpool is set to ",(0,o.jsx)("b",{children:"null"}),".",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"5/5_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3","AI12-0331-1"]}),"\n",(0,o.jsxs)("p",{children:["Finalization of a subpool has the following effects in the given order:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"6/5_13.11.5"}),"\n",(0,o.jsx)("dt",{children:(0,o.jsx)("br",{})}),"\n",(0,o.jsx)(d.A,{items:["AI12-0331-1"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsxs)("dd",{children:[(0,o.jsx)("i",{children:"This paragraph was deleted."}),(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"7/3_13.11.5"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"1."]}),(0,o.jsxs)("dd",{children:["Any of the objects allocated from the subpool that still exist are finalized in an arbitrary order;",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"7.1/4_13.11.5"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"2."]}),(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),(0,o.jsxs)("dd",{children:["All of the objects allocated from the subpool cease to exist;",(0,o.jsx)("br",{})]}),(0,o.jsx)(c.A,{children:"8/3_13.11.5"}),(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"3."]}),(0,o.jsxs)("dd",{children:["The following [dispatching] call is then made: ",(0,o.jsx)("br",{})]})]}),"\n",(0,o.jsx)(c.A,{children:"9/3_13.11.5"}),"\n",(0,o.jsx)(l.A,{language:"ada",children:(0,o.jsxs)(s.p,{children:["Deallocate","_","Subpool(Pool","_","of","_","Subpool(Subpool).all, Subpool);","\n"]})}),"\n",(0,o.jsx)(c.A,{children:"9.1/5_13.11.5"}),"\n",(0,o.jsxs)("dt",{children:[(0,o.jsx)("br",{}),"4."]}),"\n",(0,o.jsx)(d.A,{items:["AI12-0331-1"]}),"\n",(0,o.jsx)("dl",{children:(0,o.jsxs)("dd",{children:["The subpool ceases to belong to any pool.",(0,o.jsx)("br",{})]})}),"\n",(0,o.jsx)(c.A,{children:"10/3_13.11.5"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["Finalization of a Root","_","Storage","_","Pool","_","With","_","Subpools object finalizes all subpools that belong to that pool that have not yet been finalized.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.a/3_13.11.5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"discussion",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{}),"There is no need to call Unchecked","_","Deallocation on an object allocated in a subpool. Such objects are deallocated all at once, when Unchecked","_","Deallocate","_","Subpool is called.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.b/3_13.11.5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["If Unchecked","_","Deallocation is called, the object is finalized, and then Deallocate is called on the Pool, which typically will do nothing. If it wants to free memory, it will need some way to get from the address of the object to the subpool.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.c/3_13.11.5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["There is no Deallocate","_","From","_","Subpool. There is no efficient way for the implementation to determine the subpool for an arbitrary object, and if the pool implementer can determine that, they can use that as part of the implementation of Deallocate.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.d/3_13.11.5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["If Unchecked","_","Deallocation is not called (the usual case), the object will be finalized when Unchecked","_","Deallocate","_","Subpool is called.",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.e/3_13.11.5"}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["If that's never called, then the object will be finalized when the Pool","_","With","_","Subpools is finalized (by permission \u2014 it might happen when the collection of the access type is finalized).",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"extensions-to-ada-2005-3",children:"Extensions to Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.f/3_13.11.5"}),(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Unchecked","_","Deallocate","_","Subpool is new. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2012-4",children:"Wording Changes from Ada 2012"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.g/4_13.11.5"}),(0,o.jsx)(d.A,{items:["AI12-0148-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)("b",{children:"Corrigendum:"})," Added missing wording to state that the objects cease to exist after the completion of finalization. This is formally an inconsistency (it would be possible to depend on the fact that objects finalized by Unchecked","_","Deallocate","_",'Subpool still exist), but that violates every sane expectation for a procedure called "Deallocate" something.',(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"10.h/5_13.11.5"}),(0,o.jsx)(d.A,{items:["AI12-0331-1"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["Clarified that the steps of deallocating a subpool occur in a specific order. This shouldn't change any implementation; no implementation is going to finalize deallocated objects or implement Unchecked","_","Deallocate","_","Subpool so it is certain to raise Constraint","_","Error. ",(0,o.jsx)("br",{})]})})]}),"\n",(0,o.jsx)("a",{id:"Subclause_13.11.6"}),"\n",(0,o.jsx)(s.h2,{id:"13116--storage-subpool-example",children:"13.11.6  Storage Subpool Example"}),"\n",(0,o.jsx)(s.h4,{id:"examples-1",children:"Examples"}),"\n",(0,o.jsx)(c.A,{children:"1/3_13.11.6"}),"\n",(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),"\n",(0,o.jsxs)("p",{children:["The following example is a simple but complete implementation of the classic Mark/Release pool using subpools:",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(c.A,{children:"2/3_13.11.6"}),"\n",(0,o.jsxs)(l.A,{language:"ada",children:[(0,o.jsxs)(s.p,{children:["with System.Storage","_","Pools.Subpools;","\n","with System.Storage","_","Elements;","\n","with Ada.Unchecked","_","Deallocate","_","Subpool;","\n","package MR","_","Pool is","\n","\n",(0,o.jsx)(c.A,{children:"3/3_13.11.6"}),"\nuse System.Storage","_","Pools;","\n","      -- For uses of Subpools.","\n","   use System.Storage","_","Elements;","\n","      -- For uses of Storage","_","Count and Storage","_","Array.","\n","\n",(0,o.jsx)(c.A,{children:"4/3_13.11.6"}),"\n-- Mark and Release work in a stack fashion, and allocations are not allowed","\n","   -- from a subpool other than the one at the top of the stack. This is also","\n","   -- the default pool.","\n","\n",(0,o.jsx)(c.A,{children:"5/3_13.11.6"}),"\nsubtype Subpool","_","Handle is Subpools.Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"6/3_13.11.6"}),"\ntype Mark","_","Release","_","Pool","_","Type (Pool","_","Size : Storage","_","Count) is new","\n","      Subpools.Root","_","Storage","_","Pool","_","With","_","Subpools with private;","\n","\n",(0,o.jsx)(c.A,{children:"7/3_13.11.6"}),"\nfunction Mark (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"8/3_13.11.6"}),"\nprocedure Release (Subpool : in out Subpool","_","Handle) renames","\n","      Ada.Unchecked","_","Deallocate","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"9/3_13.11.6"}),"\nprivate","\n","\n",(0,o.jsx)(c.A,{children:"10/3_13.11.6"}),"\ntype MR","_","Subpool is new Subpools.Root","_","Subpool with record","\n","      Start : Storage","_","Count;","\n","   end record;","\n","   subtype Subpool","_","Indexes is Positive range 1 .. 10;","\n","   type Subpool","_","Array is array (Subpool","_","Indexes) of aliased MR","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"11/4_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1","AI12-0134-1"]}),(0,o.jsxs)(s.p,{children:["type Mark","_","Release","_","Pool","_","Type (Pool","_","Size : Storage","_","Count) is new","\n","      Subpools.Root","_","Storage","_","Pool","_","With","_","Subpools with record","\n","      Storage         : Storage","_","Array (0 .. Pool","_","Size);","\n","      Next","_","Allocation : Storage","_","Count := 0;","\n","      Markers         : Subpool","_","Array;","\n","      Current","_","Pool    : Subpool","_","Indexes := 1;","\n","   end record;","\n","\n",(0,o.jsx)(c.A,{children:"12/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["overriding","\n","   function Create","_","Subpool (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"13/3_13.11.6"}),"\nfunction Mark (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle renames Create","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"14/3_13.11.6"}),"\noverriding","\n","   procedure Allocate","_","From","_","Subpool (","\n","      Pool : in out Mark","_","Release","_","Pool","_","Type;","\n","      Storage","_","Address : out System.Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Count;","\n","      Alignment : in Storage","_","Count;","\n","      Subpool : not null Subpool","_","Handle);","\n","\n",(0,o.jsx)(c.A,{children:"15/3_13.11.6"}),"\noverriding","\n","   procedure Deallocate","_","Subpool (","\n","      Pool : in out Mark","_","Release","_","Pool","_","Type;","\n","      Subpool : in out Subpool","_","Handle);","\n","\n",(0,o.jsx)(c.A,{children:"16/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["overriding","\n","   function Default","_","Subpool","_","for","_","Pool (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"17/3_13.11.6"}),"\noverriding","\n","   procedure Initialize (Pool : in out Mark","_","Release","_","Pool","_","Type);","\n","\n",(0,o.jsx)(c.A,{children:"18/3_13.11.6"}),"\n-- We don't need Finalize.","\n","\n",(0,o.jsx)(c.A,{children:"19/3_13.11.6"}),"\nend MR","_","Pool;","\n","\n",(0,o.jsx)(c.A,{children:"20/3_13.11.6"}),"\npackage body MR","_","Pool is","\n","\n",(0,o.jsx)(c.A,{children:"21/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["use type Subpool","_","Handle;","\n","\n",(0,o.jsx)(c.A,{children:"22/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["procedure Initialize (Pool : in out Mark","_","Release","_","Pool","_","Type) is","\n","      -- Initialize the first default subpool.","\n","   begin","\n","      Pool.Markers(1).Start := 1;","\n","      Subpools.Set","_","Pool","_","of","_","Subpool","\n","         (Pool.Markers(1)'Unchecked","_","Access, Pool);","\n","   end Initialize;","\n","\n",(0,o.jsx)(c.A,{children:"23/3_13.11.6"}),"\nfunction Create","_","Subpool (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle is","\n","      -- Mark the current allocation location.","\n","   begin","\n","      if Pool.Current","_","Pool = Subpool","_","Indexes'Last then","\n","         raise Storage","_","Error; -- No more subpools.","\n","      end if;","\n","      Pool.Current","_","Pool := Pool.Current","_","Pool + 1; -- Move to the next subpool","\n","\n",(0,o.jsx)(c.A,{children:"24/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["return Result : constant not null Subpool","_","Handle :=","\n","         Pool.Markers(Pool.Current","_","Pool)'Unchecked","_","Access","\n","      do","\n","         Pool.Markers(Pool.Current","_","Pool).Start := Pool.Next","_","Allocation;","\n","         Subpools.Set","_","Pool","_","of","_","Subpool (Result, Pool);","\n","      end return;","\n","   end Create","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"25/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["procedure Deallocate","_","Subpool (","\n","      Pool : in out Mark","_","Release","_","Pool","_","Type;","\n","      Subpool : in out Subpool","_","Handle) is","\n","   begin","\n","      if Subpool /= Pool.Markers(Pool.Current","_","Pool)'Unchecked","_","Access then","\n","         raise Program","_","Error; -- Only the last marked subpool can be released.","\n","      end if;","\n","      if Pool.Current","_","Pool /= 1 then","\n","         Pool.Next","_","Allocation := Pool.Markers(Pool.Current","_","Pool).Start;","\n","         Pool.Current","_","Pool := Pool.Current","_","Pool - 1; -- Move to the previous subpool","\n","      else -- Reinitialize the default subpool:","\n","         Pool.Next","_","Allocation := 1;","\n","         Subpools.Set","_","Pool","_","of","_","Subpool","\n","            (Pool.Markers(1)'Unchecked","_","Access, Pool);","\n","      end if;","\n","   end Deallocate","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"26/3_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI05-0298-1"]}),(0,o.jsxs)(s.p,{children:["function Default","_","Subpool","_","for","_","Pool (Pool : in out Mark","_","Release","_","Pool","_","Type)","\n","      return not null Subpool","_","Handle is","\n","   begin","\n","      return Pool.Markers(Pool.Current","_","Pool)'Unchecked","_","Access;","\n","   end Default","_","Subpool","_","for","_","Pool;","\n","\n",(0,o.jsx)(c.A,{children:"27/3_13.11.6"}),"\nprocedure Allocate","_","From","_","Subpool (","\n","      Pool : in out Mark","_","Release","_","Pool","_","Type;","\n","      Storage","_","Address : out System.Address;","\n","      Size","_","In","_","Storage","_","Elements : in Storage","_","Count;","\n","      Alignment : in Storage","_","Count;","\n","      Subpool : not null Subpool","_","Handle) is","\n","   begin","\n","      if Subpool /= Pool.Markers(Pool.Current","_","Pool)'Unchecked","_","Access then","\n","         raise Program","_","Error; -- Only the last marked subpool can be used for allocations.","\n","      end if;","\n","\n",(0,o.jsx)(c.A,{children:"28/4_13.11.6"})]}),(0,o.jsx)(d.A,{items:["AI12-0080-1"]}),(0,o.jsxs)(s.p,{children:["-- Check for the maximum supported alignment, which is the alignment of the storage area:","\n","      if Alignment ",">"," Pool.Storage'Alignment then","\n","         raise Program","_","Error;","\n","      end if;","\n","      -- Correct the alignment if necessary:","\n","      Pool.Next","_","Allocation := Pool.Next","_","Allocation +","\n","         ((-Pool.Next","_","Allocation) mod Alignment);","\n","      if Pool.Next","_","Allocation + Size","_","In","_","Storage","_","Elements ",">","\n","         Pool.Pool","_","Size then","\n","         raise Storage","_","Error; -- Out of space.","\n","      end if;","\n","      Storage","_","Address := Pool.Storage (Pool.Next","_","Allocation)'Address;","\n","      Pool.Next","_","Allocation :=","\n","         Pool.Next","_","Allocation + Size","_","In","_","Storage","_","Elements;","\n","   end Allocate","_","From","_","Subpool;","\n","\n",(0,o.jsx)(c.A,{children:"29/3_13.11.6"}),"\nend MR","_","Pool;","\n"]})]}),"\n",(0,o.jsx)(r.A,{children:(0,o.jsx)(s.h4,{id:"wording-changes-from-ada-2005-3",children:"Wording Changes from Ada 2005"})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(c.A,{children:"29.a/3_13.11.6"}),(0,o.jsx)(d.A,{items:["AI05-0111-3"]}),(0,o.jsx)(i.A,{type:"aarm",aarm:"note",children:(0,o.jsxs)(s.p,{children:["This example of subpools is new. ",(0,o.jsx)("br",{})]})})]})]})}function m(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(A,{...e})}):A(e)}}}]);