"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9747],{25071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var a=t(74848),i=t(28453);const s={title:"6.3 Termination"},o=void 0,r={id:"style-guide/s6/03",title:"6.3 Termination",description:"The ability of tasks to interact with each other using Ada's intertask",source:"@site/docs/style-guide/s6/03.mdx",sourceDirName:"style-guide/s6",slug:"/style-guide/s6/03",permalink:"/docs/style-guide/s6/03",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"6.3 Termination"},sidebar:"styleGuideSidebar",previous:{title:"6.2 Communication",permalink:"/docs/style-guide/s6/02"},next:{title:"6.4 Summary",permalink:"/docs/style-guide/s6/04"}},l={},d=[{value:"Avoiding Undesired Termination",id:"avoiding-undesired-termination",level:3},{value:"guideline",id:"guideline",level:4},{value:"example",id:"example",level:4},{value:"rationale",id:"rationale",level:4},{value:"notes",id:"notes",level:4},{value:"Normal Termination",id:"normal-termination",level:3},{value:"guideline",id:"guideline-1",level:4},{value:"example",id:"example-1",level:4},{value:"rationale",id:"rationale-1",level:4},{value:"exceptions",id:"exceptions",level:4},{value:"The Abort Statement",id:"the-abort-statement",level:3},{value:"guideline",id:"guideline-2",level:4},{value:"example",id:"example-2",level:4},{value:"rationale",id:"rationale-2",level:4},{value:"Abnormal Termination",id:"abnormal-termination",level:3},{value:"guideline",id:"guideline-3",level:4},{value:"example",id:"example-3",level:4},{value:"rationale",id:"rationale-3",level:4},{value:"Circular Task Calls",id:"circular-task-calls",level:3},{value:"guideline",id:"guideline-4",level:4},{value:"rationale",id:"rationale-4",level:4},{value:"Setting Exit Status",id:"setting-exit-status",level:3},{value:"guideline",id:"guideline-5",level:4},{value:"rationale",id:"rationale-5",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The ability of tasks to interact with each other using Ada's intertask\ncommunication features makes it especially important to manage planned\nor unplanned (e.g., in response to a catastrophic exception condition)\ntermination in a disciplined way. To do otherwise can lead to a\nproliferation of undesired and unpredictable side effects as a result of\nthe termination of a single task. The guidelines on termination focus on\nthe termination of tasks. Wherever possible, you should use protected\nobjects (see Guideline 6.1.1), thus avoiding the termination problems\nassociated with tasks."}),"\n",(0,a.jsx)(n.h3,{id:"avoiding-undesired-termination",children:"Avoiding Undesired Termination"}),"\n",(0,a.jsx)(n.h4,{id:"guideline",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Consider using an exception handler for a rendezvous within the main\nloop inside each task."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"In the following example, an exception raised using the primary sensor\nis used to change Mode to Degraded still allowing execution of the\nsystem:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"...\nloop\n\n   Recognize_Degraded_Mode:\n      begin\n\n         case Mode is\n            when Primary =>\n               select\n                  Current_Position_Primary.Request_New_Coordinates (X, Y);\n               or\n                  delay 0.25;\n                  -- Decide whether to switch modes;\n               end select;\n\n            when Degraded =>\n\n               Current_Position_Backup.Request_New_Coordinates (X, Y);\n\n         end case;\n\n         ...\n      exception\n         when Tasking_Error | Program_Error =>\n            Mode := Degraded;\n      end Recognize_Degraded_Mode;\n\nend loop;\n...\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"Allowing a task to terminate might not support the requirements of the\nsystem. Without an exception handler for the rendezvous within the main\ntask loop, the functions of the task might not be performed."}),"\n",(0,a.jsx)(n.h4,{id:"notes",children:"notes"}),"\n",(0,a.jsx)(n.p,{children:"The use of an exception handler is the only way to guarantee recovery\nfrom an entry call to an abnormal task. Use of the 'Terminated attribute\nto test a task's availability before making the entry call can introduce\na race condition where the tested task fails after the test but before\nthe entry call (see Guideline 6.2.3)."}),"\n",(0,a.jsx)(n.h3,{id:"normal-termination",children:"Normal Termination"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-1",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Do not create nonterminating tasks unintentionally."}),"\n",(0,a.jsx)(n.li,{children:"Explicitly shut down tasks that depend on library packages."}),"\n",(0,a.jsx)(n.li,{children:"Confirm that a task is terminated before freeing it with\nAda.Unchecked_Deallocation."}),"\n",(0,a.jsx)(n.li,{children:"Consider using a select statement with a terminate alternative\nrather than an accept statement alone."}),"\n",(0,a.jsx)(n.li,{children:"Consider providing a terminate alternative for every selective\naccept that does not require an else part or a delay ."}),"\n",(0,a.jsx)(n.li,{children:"Do not declare or create a task within a user-defined Finalize\nprocedure after the environment task has finished waiting for other\ntasks."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"This task will never terminate:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"---------------------------------------------------------------------\ntask body Message_Buffer is\n   ...\nbegin  -- Message_Buffer\n   loop\n      select\n         when Head /= Tail => -- Circular buffer not empty\n            accept Retrieve (Value :    out Element) do\n               ...\n            end Retrieve;\n\n      or\n         when not ((Head  = Index'First and then\n                    Tail  = Index'Last) or else\n                   (Head /= Index'First and then\n                    Tail  = Index'Pred(Head))    )\n                 => -- Circular buffer not full\n            accept Store (Value : in     Element);\n      end select;\n   end loop;\n...\nend Message_Buffer;\n---------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-1",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"The implicit environment task does not terminate until all other tasks\nhave terminated. The environment task serves as a master for all other\ntasks created as part of the execution of the partition; it awaits\ntermination of all such tasks in order to perform finalization of any\nremaining objects of the partition. Thus, a partition will exist until\nall library tasks are terminated."}),"\n",(0,a.jsx)(n.p,{children:"A nonterminating task is a task whose body consists of a nonterminating\nloop with no selective accept with terminate or a task that depends on a\nlibrary package. Execution of a subprogram or block containing a task\ncannot complete until the task terminates. Any task that calls a\nsubprogram containing a nonterminating task will be delayed\nindefinitely."}),"\n",(0,a.jsx)(n.p,{children:"A task that depends on a library package cannot be forced to terminate\nusing a selective accept construct with alternative and should be\nterminated explicitly during program shutdown. One way to explicitly\nshut down tasks that depend on library packages is to provide them with\nexit entries and have the main subprogram call the exit entry just\nbefore it terminates."}),"\n",(0,a.jsx)(n.p,{children:"The Ada Reference Manual (1995, \xa713.11.2) states that a bounded error\nresults from freeing a discriminated, unterminated task object. The\ndanger lies in deallocating the discriminants as a result of freeing the\ntask object. The effect of unterminated tasks containing bounded errors\nat the end of program execution is undefined."}),"\n",(0,a.jsx)(n.p,{children:'Execution of an accept statement or of a selective accept statement\nwithout an else part, a delay, or a terminate alternative cannot proceed\nif no task ever calls the entry(s) associated with that statement. This\ncould result in deadlock. Following the guideline to provide a terminate\nalternative for every selective accept without an else or a delay\nentails programming multiple termination points in the task body. A\nreader can easily "know where to look" for the normal termination points\nin a task body. The termination points are the end of the body\'s\nsequence of statements and alternatives to select statements.'}),"\n",(0,a.jsx)(n.p,{children:"When the environment task has been terminated, either normally or\nabnormally, the language does not specify whether to await a task\nactivated during finalization of the controlled objects in a partition.\nWhile the environment task is waiting for all other tasks in the\npartition to complete, starting up a new task during finalization\nresults in a bounded error (Ada Reference Manual 1995, \xa710.2). The\nexception Program_Error can be raised during creation or activation of\nsuch a task."}),"\n",(0,a.jsx)(n.h4,{id:"exceptions",children:"exceptions"}),"\n",(0,a.jsx)(n.p,{children:"If you are implementing a cyclic executive, you might need a scheduling\ntask that does not terminate. It has been said that no real-time system\nshould be programmed to terminate. This is extreme. Systematic shutdown\nof many real-time systems is a desirable safety feature."}),"\n",(0,a.jsx)(n.p,{children:"If you are considering programming a task not to terminate, be certain\nthat it is not a dependent of a block or subprogram from which the\ntask's caller(s) will ever expect to return. Because entire programs can\nbe candidates for reuse (see Chapter 8), note that the task (and\nwhatever it depends upon) will not terminate. Also be certain that for\nany other task that you do wish to terminate, its termination does not\nawait this task's termination. Reread and fully understand the Ada\nReference Manual (1995, \xa79.3) on \"Task Dependence-Termination of Tasks.\""}),"\n",(0,a.jsx)(n.h3,{id:"the-abort-statement",children:"The Abort Statement"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-2",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Avoid using the abort statement."}),"\n",(0,a.jsx)(n.li,{children:"Consider using the asynchronous select statement rather than the\nabort statement."}),"\n",(0,a.jsx)(n.li,{children:"Minimize uses of the asynchronous select statement."}),"\n",(0,a.jsx)(n.li,{children:"Avoid assigning nonatomic global objects from a task or from the\nabortable part of an asynchronous select statement."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"If required in the application, provide a task entry for orderly\nshutdown."}),"\n",(0,a.jsx)(n.p,{children:"The following example of asynchronous transfer of control shows a\ndatabase transaction. The database operation may be cancelled (through a\nspecial input key) unless the commit transaction has begun. The code is\nextracted from the Rationale (1995, \xa79.4):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:'with Ada.Finalization;\npackage Txn_Pkg is\n   type Txn_Status is (Incomplete, Failed, Succeeded);\n   type Transaction is new Ada.Finalization.Limited_Controlled with private;\n   procedure Finalize (Txn : in out transaction);\n   procedure Set_Status (Txn    : in out Transaction;\n                         Status : in     Txn_Status);\nprivate\n   type Transaction is new Ada.Finalization.Limited_Controlled with\n      record\n         Status : Txn_Status := Incomplete;\n         pragma Atomic (Status);\n         . . . -- More components\n      end record;\nend Txn_Pkg;\n-----------------------------------------------------------------------------\npackage body Txn_Pkg is\n   procedure Finalize (Txn : in out Transaction) is\n   begin\n      -- Finalization runs with abort and ATC deferred\n      if Txn.Status = Succeeded then\n         Commit (Txn);\n      else\n         Rollback (Txn);\n      end if;\n   end Finalize;\n   . . . -- body of procedure Set_Status\nend Txn_Pkg;\n----------------------------------------------------------------------------\n-- sample code block showing how Txn_Pkg could be used:\ndeclare\n   Database_Txn : Transaction;\n   -- declare a transaction, will commit or abort during finalization\nbegin\n   select  -- wait for a cancel key from the input device\n      Input_Device.Wait_For_Cancel;\n      -- the Status remains Incomplete, so that the transaction will not commit\n   then abort  -- do the transaction\n      begin\n         Read (Database_Txn, . . .);\n         Write (Database_Txn, . . .);\n         . . .\n         Set_Status (Database_Txn, Succeeded);\n         -- set status to ensure the transaction is committed\n      exception\n         when others =>\n            Ada.Text_IO.Put_Line ("Operation failed with unhandled exception:");\n            Set_Status (Database_Txn, Failed);\n      end;\n   end select;\n   -- Finalize on Database_Txn will be called here and, based on the recorded\n   -- status, will either commit or abort the transaction.\nend;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-2",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"When an abort statement is executed, there is no way to know what the\ntargeted task was doing beforehand. Data for which the target task is\nresponsible might be left in an inconsistent state. The overall effect\non the system of aborting a task in such an uncontrolled way requires\ncareful analysis. The system design must ensure that all tasks depending\non the aborted task can detect the termination and respond\nappropriately."}),"\n",(0,a.jsx)(n.p,{children:"Tasks are not aborted until they reach an abort completion point such as\nbeginning or end of elaboration, a delay statement, an accept statement,\nan entry call, a select statement, task allocation, or the execution of\nan exception handler. Consequently, the abort statement might not\nrelease processor resources as soon as you might expect. It also might\nnot stop a runaway task because the task might be executing an infinite\nloop containing no abort completion points. There is no guarantee that a\ntask will not abort until an abort completion point in multiprocessor\nsystems, but the task will almost always stop running right away."}),"\n",(0,a.jsx)(n.p,{children:"An asynchronous select statement allows an external event to cause a\ntask to begin execution at a new point, without having to abort and\nrestart the task (Rationale 1995, \xa79.3). Because the triggering\nstatement and the abortable statement execute in parallel until one of\nthem completes and forces the other to be abandoned, you need only one\nthread of control. The asynchronous select statement improves\nmaintainability because the abortable statements are clearly delimited\nand the transfer cannot be mistakenly redirected."}),"\n",(0,a.jsx)(n.p,{children:"In task bodies and in the abortable part of an asynchronous select, you\nshould avoid assigning to nonatomic global objects, primarily because of\nthe risk of an abort occurring before the nonatomic assignment\ncompletes. If you have one or more abort statements in your application\nand the assignment is disrupted, the target object can become abnormal,\nand subsequent uses of the object lead to erroneous execution (Ada\nReference Manual 1995, \xa79.8). In the case of scalar objects, you can use\nthe attribute 'Valid, but there is no equivalent attribute for nonscalar\nobjects. (See Guideline 5.9.1 for a discussion of the 'Valid attribute.)\nYou also can still safely assign to local objects and call operations of\nglobal protected objects."}),"\n",(0,a.jsx)(n.h3,{id:"abnormal-termination",children:"Abnormal Termination"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-3",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Place an exception handler for others at the end of a task body."}),"\n",(0,a.jsx)(n.li,{children:"Consider having each exception handler at the end of a task body\nreport the task's demise."}),"\n",(0,a.jsx)(n.li,{children:"Do not rely on the task status to determine whether a rendezvous can\nbe made with the task."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"example"}),"\n",(0,a.jsx)(n.p,{children:"This is one of many tasks updating the positions of blips on a radar\nscreen. When started, it is given part of the name by which its parent\nknows it. Should it terminate due to an exception, it signals the fact\nin one of its parent's data structures:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ada",children:"task type Track (My_Index : Track_Index) is\n   ...\nend Track;\n---------------------------------------------------------------------\ntask body Track is\n     Neutral : Boolean := True;\nbegin  -- Track\n   select\n      accept ...\n      ...\n   or\n      terminate;\n   end select;\n   ...\nexception\n   when others =>\n      if not Neutral then\n         Station(My_Index).Status := Dead;\n      end if;\nend Track;\n---------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rationale-3",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"A task will terminate if an exception is raised within it for which it\nhas no handler. In such a case, the exception is not propagated outside\nof the task (unless it occurs during a rendezvous). The task simply dies\nwith no notification to other tasks in the program. Therefore, providing\nexception handlers within the task, and especially a handler for others,\nensures that a task can regain control after an exception occurs. If the\ntask cannot proceed normally after handling an exception, this affords\nit the opportunity to shut itself down cleanly and to notify tasks\nresponsible for error recovery necessitated by the abnormal termination\nof the task."}),"\n",(0,a.jsx)(n.p,{children:"You should not use the task status to determine whether a rendezvous can\nbe made with the task. If Task A depends on Task B and Task A checks the\nstatus flag before it rendezvouses with Task B, there is a potential\nthat Task B fails between the status test and the rendezvous. In this\ncase, Task A must provide an exception handler to handle the\nTasking_Error exception raised by the call to an entry of an abnormal\ntask (see Guideline 6.3.1)."}),"\n",(0,a.jsx)(n.h3,{id:"circular-task-calls",children:"Circular Task Calls"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-4",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Do not call a task entry that directly or indirectly results in a\ncall to an entry of the original calling task."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"rationale-4",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"A software failure known as task deadlock will occur if a task calls one\nof its own entries directly or indirectly via a circular chain of calls."}),"\n",(0,a.jsx)(n.h3,{id:"setting-exit-status",children:"Setting Exit Status"}),"\n",(0,a.jsx)(n.h4,{id:"guideline-5",children:"guideline"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Avoid race conditions in setting an exit status code from the main\nprogram when using the procedure\nAda.Command_Line.Set_Exit_Status."}),"\n",(0,a.jsx)(n.li,{children:"In a program with multiple tasks, encapsulate, serialize, and check\ncalls to the procedure Ada.Command_Line.Set_Exit_Status."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"rationale-5",children:"rationale"}),"\n",(0,a.jsx)(n.p,{children:"In accordance with the rules of Ada, tasks in library-level packages may\nterminate after the main program task. If the program permits multiple\ntasks to use Set_Exit_Status, then there can be no guarantee that any\nparticular status value is the one actually returned."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);