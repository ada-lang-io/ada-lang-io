"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1620],{6280:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>u,frontMatter:()=>h,metadata:()=>a,toc:()=>x});const a=JSON.parse('{"id":"arm/AA-B/AA-B.4","title":"B.4 Interfacing with COBOL","description":"This Reference Manual output has not been verified,","source":"@site/docs/arm/AA-B/AA-B.4.mdx","sourceDirName":"arm/AA-B","slug":"/arm/AA-B/AA-B.4","permalink":"/docs/arm/AA-B/AA-B.4","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":144,"frontMatter":{"sidebar_position":144},"sidebar":"referenceManualSidebar","previous":{"title":"B.3 Interfacing with C and C++","permalink":"/docs/arm/AA-B/AA-B.3"},"next":{"title":"B.5 Interfacing with Fortran","permalink":"/docs/arm/AA-B/AA-B.5"}}');var i=r(4848),s=r(8453),t=r(3842),o=r(1435),d=r(1432),c=r(9162),l=r(4421);const h={sidebar_position:144},m="B.4 Interfacing with COBOL",p={},x=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Examples",id:"examples",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4}];function j(e){const n={a:"a",admonition:"admonition",h1:"h1",h4:"h4",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"b4-interfacing-with-cobol",children:"B.4 Interfacing with COBOL"})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,i.jsx)(n.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,i.jsx)(c.A,{children:"1/3"}),"\n",(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),"\n",(0,i.jsxs)("p",{children:["The facilities relevant to interfacing with the COBOL language are the package Interfaces.COBOL and support for specifying the Convention aspect with ",(0,i.jsxs)("em",{children:["convention","_"]}),(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-2/AA-2.3#S0002",children:"identifier"})})," COBOL.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"2"}),"\n",(0,i.jsxs)("p",{children:["The COBOL interface package supplies several sets of facilities: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["A set of types corresponding to the native COBOL types of the supported COBOL implementation (so-called \u201cinternal COBOL representations\u201d), allowing Ada data to be passed as parameters to COBOL programs",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"4/5"}),(0,i.jsx)(l.A,{items:["AI12-0439-1"]}),(0,i.jsxs)("li",{children:["A set of types and constants reflecting external data representations such as can be found in files or databases, allowing COBOL-generated data to be read by an Ada program, and Ada-generated data to be read by COBOL programs",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"5"}),(0,i.jsxs)("li",{children:["A generic package for converting between an Ada decimal type value and either an internal or external COBOL representation ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(n.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,i.jsx)(c.A,{children:"6"}),"\n",(0,i.jsxs)("p",{children:["The library package Interfaces.COBOL has the following declaration: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"7/5"}),"\n",(0,i.jsx)(l.A,{items:["AI12-0241-1","AI12-0302-1"]}),"\n",(0,i.jsxs)(d.A,{language:"ada",children:[(0,i.jsxs)(n.p,{children:["package Interfaces.COBOL ","\n","   with Preelaborate, Nonblocking, Global =",">"," in out synchronized is","\n","\n",(0,i.jsx)(c.A,{children:"8"}),"\n-- Types and operations for internal data representations","\n","\n",(0,i.jsx)(c.A,{children:"9"}),"\ntype Floating      is digits implementation-defined;","\n","   type Long","_","Floating is digits implementation-defined;","\n","\n",(0,i.jsx)(c.A,{children:"10"}),"\ntype Binary      is range implementation-defined;","\n","   type Long","_","Binary is range implementation-defined;","\n","\n",(0,i.jsx)(c.A,{children:"11"}),"\nMax","_","Digits","_","Binary      : constant := implementation-defined;","\n","   Max","_","Digits","_","Long","_","Binary : constant := implementation-defined;","\n","\n",(0,i.jsx)(c.A,{children:"12/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type Decimal","_","Element  is mod implementation-defined;","\n","   type Packed","_","Decimal is array (Positive range ","<",">",") of Decimal","_","Element","\n","      with Pack;","\n","\n",(0,i.jsx)(c.A,{children:"13"}),"\ntype COBOL","_","Character is implementation-defined character type;","\n","\n",(0,i.jsx)(c.A,{children:"14"}),"\nAda","_","To","_","COBOL : array (Character) of COBOL","_","Character := implementation-defined;","\n","\n",(0,i.jsx)(c.A,{children:"15"}),"\nCOBOL","_","To","_","Ada : array (COBOL","_","Character) of Character := implementation-defined;","\n","\n",(0,i.jsx)(c.A,{children:"16/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type Alphanumeric is array (Positive range ","<",">",") of COBOL","_","Character","\n","      with Pack;","\n","\n",(0,i.jsx)(c.A,{children:"17"}),"\nfunction To","_","COBOL (Item : in String) return Alphanumeric;","\n","   function To","_","Ada   (Item : in Alphanumeric) return String;","\n","\n",(0,i.jsx)(c.A,{children:"18"}),"\nprocedure To","_","COBOL (Item       : in String;","\n","                       Target     : out Alphanumeric;","\n","                       Last       : out Natural);","\n","\n",(0,i.jsx)(c.A,{children:"19"}),"\nprocedure To","_","Ada (Item     : in Alphanumeric;","\n","                     Target   : out String;","\n","                     Last     : out Natural);","\n","\n",(0,i.jsx)(c.A,{children:"20/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type Numeric is array (Positive range ","<",">",") of COBOL","_","Character","\n","      with Pack;","\n","\n",(0,i.jsx)(c.A,{children:"21"}),"\n-- Formats for COBOL data representations","\n","\n",(0,i.jsx)(c.A,{children:"22"}),"\ntype Display","_","Format is private;","\n","\n",(0,i.jsx)(c.A,{children:"23"}),"\nUnsigned             : constant Display","_","Format;","\n","   Leading","_","Separate     : constant Display","_","Format;","\n","   Trailing","_","Separate    : constant Display","_","Format;","\n","   Leading","_","Nonseparate  : constant Display","_","Format;","\n","   Trailing","_","Nonseparate : constant Display","_","Format;","\n","\n",(0,i.jsx)(c.A,{children:"24"}),"\ntype Binary","_","Format is private;","\n","\n",(0,i.jsx)(c.A,{children:"25"}),"\nHigh","_","Order","_","First  : constant Binary","_","Format;","\n","   Low","_","Order","_","First   : constant Binary","_","Format;","\n","   Native","_","Binary     : constant Binary","_","Format;","\n","\n",(0,i.jsx)(c.A,{children:"26"}),"\ntype Packed","_","Format is private;","\n","\n",(0,i.jsx)(c.A,{children:"27"}),"\nPacked","_","Unsigned   : constant Packed","_","Format;","\n","   Packed","_","Signed     : constant Packed","_","Format;","\n","\n",(0,i.jsx)(c.A,{children:"28"}),"\n-- Types for external representation of COBOL binary data","\n","\n",(0,i.jsx)(c.A,{children:"29/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type Byte is mod 2","*","*","COBOL","_","Character'Size;","\n","   type Byte","_","Array is array (Positive range ","<",">",") of Byte","\n","      with Pack;","\n","\n",(0,i.jsx)(c.A,{children:"30"}),"\nConversion","_","Error : exception;","\n","\n",(0,i.jsx)(c.A,{children:"31"}),"\ngeneric","\n","      type Num is delta ","<",">"," digits ","<",">",";","\n","   package Decimal","_","Conversions is","\n","\n",(0,i.jsx)(c.A,{children:"32"}),"\n-- Display Formats: data values are represented as Numeric","\n","\n",(0,i.jsx)(c.A,{children:"33"}),"\nfunction Valid (Item   : in Numeric;","\n","                      Format : in Display","_","Format) return Boolean;","\n","\n",(0,i.jsx)(c.A,{children:"34"}),"\nfunction Length (Format : in Display","_","Format) return Natural;","\n","\n",(0,i.jsx)(c.A,{children:"35"}),"\nfunction To","_","Decimal (Item   : in Numeric;","\n","                           Format : in Display","_","Format) return Num;","\n","\n",(0,i.jsx)(c.A,{children:"36"}),"\nfunction To","_","Display (Item   : in Num;","\n","                           Format : in Display","_","Format) return Numeric;","\n","\n",(0,i.jsx)(c.A,{children:"37"}),"\n-- Packed Formats: data values are represented as Packed","_","Decimal","\n","\n",(0,i.jsx)(c.A,{children:"38"}),"\nfunction Valid (Item   : in Packed","_","Decimal;","\n","                      Format : in Packed","_","Format) return Boolean;","\n","\n",(0,i.jsx)(c.A,{children:"39"}),"\nfunction Length (Format : in Packed","_","Format) return Natural;","\n","\n",(0,i.jsx)(c.A,{children:"40"}),"\nfunction To","_","Decimal (Item   : in Packed","_","Decimal;","\n","                           Format : in Packed","_","Format) return Num;","\n","\n",(0,i.jsx)(c.A,{children:"41"}),"\nfunction To","_","Packed (Item   : in Num;","\n","                          Format : in Packed","_","Format) return Packed","_","Decimal;","\n","\n",(0,i.jsx)(c.A,{children:"42"}),"\n-- Binary Formats: external data values are represented as Byte","_","Array","\n","\n",(0,i.jsx)(c.A,{children:"43"}),"\nfunction Valid (Item   : in Byte","_","Array;","\n","                      Format : in Binary","_","Format) return Boolean;","\n","\n",(0,i.jsx)(c.A,{children:"44"}),"\nfunction Length (Format : in Binary","_","Format) return Natural;","\n","      function To","_","Decimal (Item   : in Byte","_","Array;","\n","                           Format : in Binary","_","Format) return Num;","\n","\n",(0,i.jsx)(c.A,{children:"45"}),"\nfunction To","_","Binary (Item   : in Num;","\n","                        Format : in Binary","_","Format) return Byte","_","Array;","\n","\n",(0,i.jsx)(c.A,{children:"46"}),"\n-- Internal Binary formats: data values are of type Binary or Long","_","Binary","\n","\n",(0,i.jsx)(c.A,{children:"47"}),"\nfunction To","_","Decimal (Item : in Binary)      return Num;","\n","      function To","_","Decimal (Item : in Long","_","Binary) return Num;","\n","\n",(0,i.jsx)(c.A,{children:"48"}),"\nfunction To","_","Binary      (Item : in Num)  return Binary;","\n","      function To","_","Long","_","Binary (Item : in Num)  return Long","_","Binary;","\n","\n",(0,i.jsx)(c.A,{children:"49"}),"\nend Decimal","_","Conversions;","\n","\n",(0,i.jsx)(c.A,{children:"50"}),"\nprivate","\n","   ... -- not specified by the language","\n","end Interfaces.COBOL;","\n"]})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"50.a/1"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The types Floating, Long","_","Floating, Binary, Long","_","Binary, Decimal","_","Element, and COBOL","_","Character; and the initializations of the variables Ada","_","To","_","COBOL and COBOL","_","To","_","Ada, in Interfaces.COBOL.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"51"}),"\n",(0,i.jsxs)("p",{children:["Each of the types in Interfaces.COBOL is COBOL-compatible.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"52"}),"\n",(0,i.jsxs)("p",{children:["The types Floating and Long","_","Floating correspond to the native types in COBOL for data items with computational usage implemented by floating point. The types Binary and Long","_","Binary correspond to the native types in COBOL for data items with binary usage, or with computational usage implemented by binary.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"53"}),"\n",(0,i.jsxs)("p",{children:["Max","_","Digits","_","Binary is the largest number of decimal digits in a numeric value that is represented as Binary. Max","_","Digits","_","Long","_","Binary is the largest number of decimal digits in a numeric value that is represented as Long","_","Binary.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"54"}),"\n",(0,i.jsxs)("p",{children:["The type Packed","_","Decimal corresponds to COBOL's packed-decimal usage.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"55"}),"\n",(0,i.jsxs)("p",{children:["The type COBOL","_","Character defines the run-time character set used in the COBOL implementation. Ada","_","To","_","COBOL and COBOL","_","To","_","Ada are the mappings between the Ada and COBOL run-time character sets. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"55.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"reason",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The character mappings are visible variables, since the user needs the ability to modify them at run time. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"56"}),"\n",(0,i.jsxs)("p",{children:["Type Alphanumeric corresponds to COBOL's alphanumeric data category.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"57"}),"\n",(0,i.jsxs)("p",{children:["Each of the functions To","_","COBOL and To","_","Ada converts its parameter based on the mappings Ada","_","To","_","COBOL and COBOL","_","To","_","Ada, respectively. The length of the result for each is the length of the parameter, and the lower bound of the result is 1. Each component of the result is obtained by applying the relevant mapping to the corresponding component of the parameter.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"58"}),"\n",(0,i.jsxs)("p",{children:["Each of the procedures To","_","COBOL and To","_","Ada copies converted elements from Item to Target, using the appropriate mapping (Ada","_","To","_","COBOL or COBOL","_","To","_","Ada, respectively). The index in Target of the last element assigned is returned in Last (0 if Item is a null array). If Item'Length exceeds Target'Length, Constraint","_","Error is propagated.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"59"}),"\n",(0,i.jsxs)("p",{children:["Type Numeric corresponds to COBOL's numeric data category with display usage.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"60"}),"\n",(0,i.jsxs)("p",{children:["The types Display","_","Format, Binary","_","Format, and Packed","_","Format are used in conversions between Ada decimal type values and COBOL internal or external data representations. The value of the constant Native","_","Binary is either High","_","Order","_","First or Low","_","Order","_","First, depending on the implementation. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"61"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Valid (Item   : in Numeric;","\n","                Format : in Display","_","Format) return Boolean;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"62"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["The function Valid checks that the Item parameter has a value consistent with the value of Format. If the value of Format is other than Unsigned, Leading","_","Separate, and Trailing","_","Separate, the effect is implementation defined. If Format does have one of these values, the following rules apply: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"63/3"}),"\n",(0,i.jsx)(l.A,{items:["AI95-00071-01","AI05-0264-1"]}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["{",(0,i.jsx)("em",{children:"8652/0066"}),"}"," Format=Unsigned: if Item comprises one or more decimal digit characters, then Valid returns True, else it returns False.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"64/1"}),(0,i.jsx)(l.A,{items:["AI95-00071-01"]}),(0,i.jsxs)("li",{children:["{",(0,i.jsx)("em",{children:"8652/0066"}),"}"," Format=Leading","_","Separate: if Item comprises a single occurrence of the plus or minus sign character, and then one or more decimal digit characters, then Valid returns True, else it returns False.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"65/1"}),(0,i.jsx)(l.A,{items:["AI95-00071-01"]}),(0,i.jsxs)("li",{children:["{",(0,i.jsx)("em",{children:"8652/0066"}),"}"," Format=Trailing","_","Separate: if Item comprises one or more decimal digit characters and finally a plus or minus sign character, then Valid returns True, else it returns False. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(c.A,{children:"66"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Length (Format : in Display","_","Format) return Natural;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"67"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["The Length function returns the minimal length of a Numeric value sufficient to hold any value of type Num when represented as Format.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"68"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Decimal (Item   : in Numeric;","\n","                     Format : in Display","_","Format) return Num;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"69"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["Produces a value of type Num corresponding to Item as represented by Format. The number of digits after the assumed radix point in Item is Num'Scale. Conversion","_","Error is propagated if the value represented by Item is outside the range of Num. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"69.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"There is no issue of truncation versus rounding, since the number of decimal places is established by Num'Scale.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"70"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Display (Item   : in Num;","\n","                     Format : in Display","_","Format) return Numeric;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"71/1"}),"\n",(0,i.jsx)(l.A,{items:["AI95-00072-01"]}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["{",(0,i.jsx)("em",{children:"8652/0067"}),"}"," This function returns the Numeric value for Item, represented in accordance with Format. The length of the returned value is Length(Format), and the lower bound is 1. Conversion","_","Error is propagated if Num is negative and Format is Unsigned.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"72"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Valid (Item   : in Packed","_","Decimal;","\n","                Format : in Packed","_","Format) return Boolean;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"73"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["This function returns True if Item has a value consistent with Format, and False otherwise. The rules for the formation of Packed","_","Decimal values are implementation defined.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"74"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Length (Format : in Packed","_","Format) return Natural;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"75"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["This function returns the minimal length of a Packed","_","Decimal value sufficient to hold any value of type Num when represented as Format.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"76"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Decimal (Item   : in Packed","_","Decimal;","\n","                     Format : in Packed","_","Format) return Num;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"77"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["Produces a value of type Num corresponding to Item as represented by Format. Num'Scale is the number of digits after the assumed radix point in Item. Conversion","_","Error is propagated if the value represented by Item is outside the range of Num.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"78"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Packed (Item   : in Num;","\n","                    Format : in Packed","_","Format) return Packed","_","Decimal;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"79/1"}),"\n",(0,i.jsx)(l.A,{items:["AI95-00072-01"]}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["{",(0,i.jsx)("em",{children:"8652/0067"}),"}"," This function returns the Packed","_","Decimal value for Item, represented in accordance with Format. The length of the returned value is Length(Format), and the lower bound is 1. Conversion","_","Error is propagated if Num is negative and Format is Packed","_","Unsigned.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"80"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Valid (Item   : in Byte","_","Array;","\n","                Format : in Binary","_","Format) return Boolean;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"81"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["This function returns True if Item has a value consistent with Format, and False otherwise. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"81.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"This function returns False only when the represented value is outside the range of Num.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"82"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function Length (Format : in Binary","_","Format) return Natural;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"83"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["This function returns the minimal length of a Byte","_","Array value sufficient to hold any value of type Num when represented as Format.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"84"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Decimal (Item   : in Byte","_","Array;","\n","                     Format : in Binary","_","Format) return Num;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"85"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["Produces a value of type Num corresponding to Item as represented by Format. Num'Scale is the number of digits after the assumed radix point in Item. Conversion","_","Error is propagated if the value represented by Item is outside the range of Num.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"86"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Binary (Item   : in Num;","\n","                    Format : in Binary","_","Format) return Byte","_","Array;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"87/1"}),"\n",(0,i.jsx)(l.A,{items:["AI95-00072-01"]}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["{",(0,i.jsx)("em",{children:"8652/0067"}),"}"," This function returns the Byte","_","Array value for Item, represented in accordance with Format. The length of the returned value is Length(Format), and the lower bound is 1.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"88"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Decimal (Item : in Binary)      return Num;","\n","\n","function To","_","Decimal (Item : in Long","_","Binary) return Num;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"89"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["These functions convert from COBOL binary format to a corresponding value of the decimal type Num. Conversion","_","Error is propagated if Item is too large for Num. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"89.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"There is no rescaling performed on the conversion. That is, the returned value in each case is a \u201cbit copy\u201d if Num has a binary radix. The programmer is responsible for maintaining the correct scale. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"90"}),"\n",(0,i.jsx)(d.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["function To","_","Binary      (Item : in Num)  return Binary;","\n","\n","function To","_","Long","_","Binary (Item : in Num)  return Long","_","Binary;","\n"]})}),"\n",(0,i.jsx)(c.A,{children:"91"}),"\n",(0,i.jsxs)("p",{class:"Indented4",children:["These functions convert from Ada decimal to COBOL binary format. Conversion","_","Error is propagated if the value of Item is too large to be represented in the result type. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"One style of interface supported for COBOL, similar to what is provided for C, is the ability to call and pass parameters to an existing COBOL program. Thus the interface package supplies types that can be used in an Ada program as parameters to subprograms whose bodies will be in COBOL. These types map to COBOL's alphanumeric and numeric data categories.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.b"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Several types are provided for support of alphanumeric data. Since COBOL's run-time character set is not necessarily the same as Ada's, Interfaces.COBOL declares an implementation-defined character type COBOL","_","Character, and mappings between Character and COBOL","_","Character. These mappings are visible variables (rather than, say, functions or constant arrays), since in the situation where COBOL","_","Character is EBCDIC, the flexibility of dynamically modifying the mappings is needed. Corresponding to COBOL's alphanumeric data is the string type Alphanumeric.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.c"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Numeric data may have either a \u201cdisplay\u201d or \u201ccomputational\u201d representation in COBOL. On the Ada side, the data is of a decimal fixed point type. Passing an Ada decimal data item to a COBOL program requires conversion from the Ada decimal type to some type that reflects the representation expected on the COBOL side. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.d"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Computational Representation",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"91.e"}),(0,i.jsxs)("li",{children:["Floating point representation is modeled by Ada floating point types, Floating and Long","_","Floating. Conversion between these types and Ada decimal types is obtained directly, since the type name serves as a conversion function.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"91.f"}),(0,i.jsxs)("li",{children:["Binary representation is modeled by an Ada integer type, Binary, and possibly other types such as Long","_","Binary. Conversion between, say, Binary and a decimal type is through functions from an instantiation of the generic package Decimal","_","Conversions.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"91.g"}),(0,i.jsxs)("li",{children:["Packed decimal representation is modeled by the Ada array type Packed","_","Decimal. Conversion between packed decimal and a decimal type is through functions from an instantiation of the generic package Decimal","_","Conversions.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"91.h"}),(0,i.jsxs)("li",{children:["Display Representation",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"91.i"}),(0,i.jsxs)("li",{children:["Display representation for numeric data is modeled by the array type Numeric. Conversion between display representation and a decimal type is through functions from an instantiation of the generic package Decimal","_","Conversions. A parameter to the conversion function indicates the desired interpretation of the data (e.g., signed leading separate, etc.) ",(0,i.jsx)("br",{})]})]})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.j/3"}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The Convention of a record type may be specified as COBOL to direct the compiler to choose a COBOL-compatible representation for objects of the type.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"91.k"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The package Interfaces.COBOL allows the Ada programmer to deal with data from files (or databases) created by a COBOL program. For data that is alphanumeric, or in display or packed decimal format, the approach is the same as for passing parameters (instantiate Decimal","_","Conversions to obtain the needed conversion functions). For binary data, the external representation is treated as a Byte array, and an instantiation of Decimal","_","IO produces a package that declares the needed conversion functions. A parameter to the conversion function indicates the desired interpretation of the data (e.g., high- versus low-order byte first). ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements",children:"Implementation Requirements"}),"\n",(0,i.jsx)(c.A,{children:"92/3"}),"\n",(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),"\n",(0,i.jsxs)("p",{children:["An implementation shall support specifying aspect Convention with a COBOL ",(0,i.jsx)("em",{children:"convention"}),"_",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-2/AA-2.3#S0002",children:"identifier"})})," for a COBOL-eligible type (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-B/AA-B.1",children:"B.1"}),"). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"92.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"An implementation supporting this package shall ensure that if the bounds of a Packed","_","Decimal, Alphanumeric, or Numeric variable are static, then the representation of the object comprises solely the array components (that is, there is no implicit run-time \u201cdescriptor\u201d that is part of the object). ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-permissions",children:"Implementation Permissions"}),"\n",(0,i.jsx)(c.A,{children:"93"}),"\n",(0,i.jsxs)("p",{children:["An implementation may provide additional constants of the private types Display","_","Format, Binary","_","Format, or Packed","_","Format. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"93.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"reason",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"This is to allow exploitation of other external formats that may be available in the COBOL implementation.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(c.A,{children:"94"}),"\n",(0,i.jsxs)("p",{children:["An implementation may provide further floating point and integer types in Interfaces.COBOL to match additional native COBOL types, and may also supply corresponding conversion functions in the generic package Decimal","_","Conversions. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-advice",children:"Implementation Advice"}),"\n",(0,i.jsx)(c.A,{children:"95"}),"\n",(0,i.jsxs)("p",{children:["An Ada implementation should support the following interface correspondences between Ada and COBOL. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"96"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["An Ada ",(0,i.jsx)("strong",{children:"access"})," T parameter is passed as a \u201cBY REFERENCE\u201d data item of the COBOL type corresponding to T.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"97"}),(0,i.jsxs)("li",{children:["An Ada ",(0,i.jsx)("strong",{children:"in"})," scalar parameter is passed as a \u201cBY CONTENT\u201d data item of the corresponding COBOL type.",(0,i.jsx)("br",{})]}),(0,i.jsx)(c.A,{children:"98"}),(0,i.jsxs)("li",{children:["Any other Ada parameter is passed as a \u201cBY REFERENCE\u201d data item of the COBOL type corresponding to the Ada parameter type; for scalars, a local copy is used if necessary to ensure by-copy semantics. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"98.a/2"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"implementation-advice",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"If COBOL interfacing is supported, the interface correspondences between Ada and COBOL should be supported.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"99/3"}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["NOTE 1   An implementation is not required to support specifying aspect Convention for access types, nor is it required to support specifying aspects Import, Export, or Convention for functions. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"99.a"}),(0,i.jsx)(t.A,{type:"aarm",aarm:"reason",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"COBOL does not have a pointer facility, and a COBOL program does not return a value. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"100/5"}),(0,i.jsx)(l.A,{items:["AI12-0440-1"]}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["NOTE 2   If an Ada subprogram is exported to COBOL, then a call from COBOL call can specify either \u201cBY CONTENT\u201d or \u201cBY REFERENCE\u201d. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(c.A,{children:"101"}),"\n",(0,i.jsxs)("p",{children:[(0,i.jsx)("em",{children:"Examples of Interfaces.COBOL:"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(c.A,{children:"102"}),"\n",(0,i.jsxs)(d.A,{language:"ada",children:[(0,i.jsxs)(n.p,{children:["with Interfaces.COBOL;","\n","procedure Test","_","Call is","\n","\n",(0,i.jsx)(c.A,{children:"103"}),"\n-- Calling a foreign COBOL program","\n","   -- Assume that a COBOL program PROG has the following declaration","\n","   --  in its LINKAGE section:","\n","   --  01 Parameter-Area","\n","   --     05 NAME   PIC X(20).","\n","   --     05 SSN    PIC X(9).","\n","   --     05 SALARY PIC 99999V99 USAGE COMP.","\n","   -- The effect of PROG is to update SALARY based on some algorithm","\n","\n",(0,i.jsx)(c.A,{children:"104"}),"\npackage COBOL renames Interfaces.COBOL;","\n","\n",(0,i.jsx)(c.A,{children:"105"}),"\ntype Salary","_","Type is delta 0.01 digits 7;","\n","\n",(0,i.jsx)(c.A,{children:"106/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type COBOL","_","Record is","\n","      record","\n","         Name   : COBOL.Numeric(1..20);","\n","         SSN    : COBOL.Numeric(1..9);","\n","         Salary : COBOL.Binary;  -- Assume Binary = 32 bits","\n","      end record","\n","      with Convention =",">"," COBOL;","\n","\n",(0,i.jsx)(c.A,{children:"107/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["procedure Prog (Item : in out COBOL","_","Record)","\n","      with Import =",">"," True, Convention =",">"," COBOL;","\n","\n",(0,i.jsx)(c.A,{children:"108"}),"\npackage Salary","_","Conversions is","\n","      new COBOL.Decimal","_","Conversions(Salary","_","Type);","\n","\n",(0,i.jsx)(c.A,{children:"109"}),"\nSome","_","Salary : Salary","_","Type := 12","_","345.67;","\n","   Some","_","Record : COBOL","_","Record :=","\n","      (Name   =",">",' "Johnson, John       ",',"\n","       SSN    =",">",' "111223333",',"\n","       Salary =",">"," Salary","_","Conversions.To","_","Binary(Some","_","Salary));","\n","\n",(0,i.jsx)(c.A,{children:"110"}),"\nbegin","\n","   Prog (Some","_","Record);","\n","   ...","\n","end Test","_","Call;","\n","\n",(0,i.jsx)(c.A,{children:"111"}),"\nwith Interfaces.COBOL;","\n","with COBOL","_","Sequential","_","IO; -- Assumed to be supplied by implementation","\n","procedure Test","_","External","_","Formats is","\n","\n",(0,i.jsx)(c.A,{children:"112/5"})]}),(0,i.jsx)(l.A,{items:["AI12-0442-1"]}),(0,i.jsxs)(n.p,{children:["-- Using data created by a COBOL program","\n","   -- Assume that a COBOL program has created a sequential file with","\n","   --  the following record structure, and that we want","\n","   --  process the records in an Ada program","\n","   --  01 EMPLOYEE-RECORD","\n","   --     05 NAME    PIC X(20).","\n","   --     05 SSN     PIC X(9).","\n","   --     05 SALARY  PIC 99999V99 USAGE COMP.","\n","   --     05 ADJUST  PIC S999V999 SIGN LEADING SEPARATE.","\n","   -- The COMP data is binary (32 bits), high-order byte first","\n","\n",(0,i.jsx)(c.A,{children:"113"}),"\npackage COBOL renames Interfaces.COBOL;","\n","\n",(0,i.jsx)(c.A,{children:"114"}),"\ntype Salary","_","Type      is delta 0.01  digits 7;","\n","   type Adjustments","_","Type is delta 0.001 digits 6;","\n","\n",(0,i.jsx)(c.A,{children:"115/3"})]}),(0,i.jsx)(l.A,{items:["AI05-0229-1"]}),(0,i.jsxs)(n.p,{children:["type COBOL","_","Employee","_","Record","_","Type is  -- External representation","\n","      record","\n","         Name    : COBOL.Alphanumeric(1..20);","\n","         SSN     : COBOL.Alphanumeric(1..9);","\n","         Salary  : COBOL.Byte","_","Array(1..4);","\n","         Adjust  : COBOL.Numeric(1..7);  -- Sign and 6 digits","\n","      end record","\n","      with Convention =",">"," COBOL;","\n","\n",(0,i.jsx)(c.A,{children:"116"}),"\npackage COBOL","_","Employee","_","IO is","\n","      new COBOL","_","Sequential","_","IO(COBOL","_","Employee","_","Record","_","Type);","\n","   use COBOL","_","Employee","_","IO;","\n","\n",(0,i.jsx)(c.A,{children:"117"}),"\nCOBOL","_","File : File","_","Type;","\n","\n",(0,i.jsx)(c.A,{children:"118"}),"\ntype Ada","_","Employee","_","Record","_","Type is  -- Internal representation","\n","      record","\n","         Name    : String(1..20);","\n","         SSN     : String(1..9);","\n","         Salary  : Salary","_","Type;","\n","         Adjust  : Adjustments","_","Type;","\n","      end record;","\n","\n",(0,i.jsx)(c.A,{children:"119"}),"\nCOBOL","_","Record : COBOL","_","Employee","_","Record","_","Type;","\n","   Ada","_","Record   : Ada","_","Employee","_","Record","_","Type;","\n","\n",(0,i.jsx)(c.A,{children:"120"}),"\npackage Salary","_","Conversions is","\n","      new COBOL.Decimal","_","Conversions(Salary","_","Type);","\n","   use Salary","_","Conversions;","\n","\n",(0,i.jsx)(c.A,{children:"121"}),"\npackage Adjustments","_","Conversions is","\n","      new COBOL.Decimal","_","Conversions(Adjustments","_","Type);","\n","   use Adjustments","_","Conversions;","\n","\n",(0,i.jsx)(c.A,{children:"122"}),"\nbegin","\n","   Open (COBOL","_","File, Name =",">",' "Some',"_",'File");',"\n","\n",(0,i.jsx)(c.A,{children:"123"}),"\nloop","\n","     Read (COBOL","_","File, COBOL","_","Record);","\n","\n",(0,i.jsx)(c.A,{children:"124/5"})]}),(0,i.jsx)(l.A,{items:["AI12-0178-1"]}),(0,i.jsxs)(n.p,{children:["Ada","_","Record.Name := COBOL.To","_","Ada(COBOL","_","Record.Name);","\n","     Ada","_","Record.SSN  := COBOL.To","_","Ada(COBOL","_","Record.SSN);","\n","     Ada","_","Record.Salary :=","\n","        To","_","Decimal(COBOL","_","Record.Salary, COBOL.High","_","Order","_","First);","\n","     Ada","_","Record.Adjust :=","\n","        To","_","Decimal(COBOL","_","Record.Adjust, COBOL.Leading","_","Separate);","\n","     ... -- Process Ada","_","Record","\n","   end loop;","\n","exception","\n","   when End","_","Error =",">"," ...","\n","end Test","_","External","_","Formats;","\n"]})]}),"\n",(0,i.jsx)(o.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-95",children:"Wording Changes from Ada 95"})}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"124.a/2"}),(0,i.jsx)(l.A,{items:["AI95-00071-01"]}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["{",(0,i.jsx)("em",{children:"8652/0066"}),"}"," ",(0,i.jsx)("strong",{children:"Corrigendum:"})," Corrected the definition of Valid to match COBOL.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsx)(c.A,{children:"124.b/2"}),(0,i.jsx)(l.A,{items:["AI95-00072-01"]}),(0,i.jsx)(t.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["{",(0,i.jsx)("em",{children:"8652/0067"}),"}"," ",(0,i.jsx)("strong",{children:"Corrigendum:"})," Specified the bounds of the results of To","_","Display, To","_","Packed, and To","_","Binary. ",(0,i.jsx)("br",{})]})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}}}]);