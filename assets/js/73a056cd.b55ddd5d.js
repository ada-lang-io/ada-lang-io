"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[9430],{76353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(74848),a=t(28453);const r={sidebar_position:2,description:"How to use UTF-8 in string literals and identifiers in GNAT",keywords:["UTF-8","Unicode","GNAT"]},s="UTF-8 encoding in GNAT",o={id:"learn/how-tos/gnat_and_utf_8",title:"UTF-8 encoding in GNAT",description:"How to use UTF-8 in string literals and identifiers in GNAT",source:"@site/docs/learn/how-tos/gnat_and_utf_8.mdx",sourceDirName:"learn/how-tos",slug:"/learn/how-tos/gnat_and_utf_8",permalink:"/docs/learn/how-tos/gnat_and_utf_8",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"How to use UTF-8 in string literals and identifiers in GNAT",keywords:["UTF-8","Unicode","GNAT"]},sidebar:"tutorialSidebar",previous:{title:"How-Tos",permalink:"/docs/category/how-tos"},next:{title:"Syntax Cheat Sheet",permalink:"/docs/learn/cheat-sheet"}},d={},c=[{value:"String literals",id:"string-literals",level:2},{value:"UTF-8 encoding of string literals",id:"utf-8-encoding-of-string-literals",level:3},{value:"Printing text containing UTF-8 characters",id:"printing-text-containing-utf-8-characters",level:3},{value:"Identifiers",id:"identifiers",level:2},{value:"When <code>-gnatW8</code> isn&#39;t allowed",id:"when--gnatw8-isnt-allowed",level:2},{value:"Opening files using UTF-8",id:"opening-files-using-utf-8",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Enabling UTF-8 in other tools",id:"enabling-utf-8-in-other-tools",level:2},{value:"GNAT programs",id:"gnat-programs",level:3},{value:"Ada Language Server",id:"ada-language-server",level:3},{value:"Alire crates for handling Unicode strings",id:"alire-crates-for-handling-unicode-strings",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"utf-8-encoding-in-gnat",children:"UTF-8 encoding in GNAT"}),"\n",(0,i.jsxs)(n.p,{children:["Nowadays, UTF-8 is the de facto standard for source code representation.\nSection ",(0,i.jsx)(n.a,{href:"/docs/arm/AA-2/AA-2.1#implementation-requirements",children:"2.1 Character Set"}),"\nof the reference manual says that the compiler must understand texts in UTF-8 encoding:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"An Ada implementation shall accept Ada source code in UTF-8 encoding, with\nor without a BOM (see A.4.11), where every character is represented by its\ncode point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This does not mean that the compiler must do so by default.\nIn the case of the GNAT compiler, the compiler by default uses the Latin-1 (ISO-8859-1)\nencoding and a build switch is needed to enable UTF-8 encoding of string literals\nand identifiers."}),"\n",(0,i.jsx)(n.h2,{id:"string-literals",children:"String literals"}),"\n",(0,i.jsx)(n.p,{children:"For example, the following program has a string literal containing UTF-8 characters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:'with Ada.Text_IO;\n\nprocedure Main is\nbegin\n   Ada.Text_IO.Put_Line ("\u041f\u0440\u0438\u0432\u0456\u0442");\nend Main;\n'})}),"\n",(0,i.jsx)(n.p,{children:"In some IDEs, such as GNAT Studio, building or even saving the file may\ngenerate an error like:"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This buffer contains UTF-8 characters which could not be translated to ISO-8859-1."}),"\n",(0,i.jsx)(n.p,{children:"Some data may be missing in the saved file: check the Locations View."}),"\n",(0,i.jsx)(n.p,{children:'You may change the character set of this file through the "Properties..." contextual menu.'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If you change the encoding of the file to UTF-8, the program can be build and may\nseem to work as expected (assuming that the terminal understands UTF-8)."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:'The default encoding of all files can be changed in GNAT Studio by going to\n"Edit" -> "Preferences...". Then go to "General" and change "Character set" to\n"Unicode UTF-8". Re-create the file "main.adb" and it will save successfully.'})}),"\n",(0,i.jsx)(n.h3,{id:"utf-8-encoding-of-string-literals",children:"UTF-8 encoding of string literals"}),"\n",(0,i.jsxs)(n.p,{children:['However, from the compiler\'s point of view the string "\u041f\u0440\u0438\u0432\u0456\u0442" contains not 6, but 12 characters!\nThe reason for this is that, according to\nSection ',(0,i.jsx)(n.a,{href:"/docs/arm/AA-3/AA-3.5#352--character-types",children:"3.5.2 Character Types"}),"\nof the reference manual,\nthe type ",(0,i.jsx)(n.code,{children:"Character"})," includes only 256 values from the Latin-1 set:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"The predefined type Character is a character type whose values correspond\nto the 256 code points of Row 00 (also known as Latin-1) of the\nISO/IEC 10646:2017 Basic Multilingual Plane (BMP)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As far as the compiler is concerned, the string literal does not contain\nany Cyrillic characters.\nThe compiler sees the string literal as ",(0,i.jsx)(n.code,{children:'"\xd0_\xd1_\xd0\xb8\xd0\xb2\xd0\xb5\xd1_"'})," (",(0,i.jsx)(n.code,{children:"_"})," indicates non-printable characters in Latin-1).\nThe compiler does not know that you have set the encoding in the IDE\nto UTF-8. It still uses Latin-1 as its ",(0,i.jsx)(n.a,{href:"https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/the_gnat_compilation_model.html#source-representation",children:"default encoding"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can tell the compiler the encoding of the source code is UTF-8 by adding the ",(0,i.jsx)(n.code,{children:"-gnatW8"})," option\nto the list of compiler switches.\nIf your project is an Alire crate, edit the .gpr file in the root of your project and\nadd ",(0,i.jsx)(n.code,{children:"-gnatW8"})," to the default switches in the package ",(0,i.jsx)(n.code,{children:"Compiler"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'package Compiler is\n   for Default_Switches ("Ada") use Main_Config.Ada_Compiler_Switches & ("-gnatW8");\nend Compiler;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now the compiler will see the Cyrillic alphabet and correctly refuses to build\nthe program:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'     5.    Ada.Text_IO.Put_Line ("\u041f\u0440\u0438\u0432\u0456\u0442");\n                                  |\n        >>> literal out of range of type Standard.Character\n\n 6 lines: 1 error\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:['If your project does not use Alire, the switch can be added in GNAT Studio\nas follows: select in the menu "Edit" -> "Project Properties...". Then go to\n"Build" -> "Switches" -> "Ada" and write ',(0,i.jsx)(n.code,{children:"-gnatW8"})," in the options bar at the bottom\nof the window."]})}),"\n",(0,i.jsx)(n.h3,{id:"printing-text-containing-utf-8-characters",children:"Printing text containing UTF-8 characters"}),"\n",(0,i.jsxs)(n.p,{children:["To work with text containing UTF-8 characters, the type ",(0,i.jsx)(n.code,{children:"String"})," is insufficient.\nA different type is needed."]}),"\n",(0,i.jsxs)(n.p,{children:["Before the first version of the Ada language, only 127 characters of the ASCII set could fit in\nthe type ",(0,i.jsx)(n.code,{children:"Character"}),". This was quickly corrected by expanding ",(0,i.jsx)(n.code,{children:"Character"}),"\nto 256 Latin-1 values. The next version of the standard, around the\ntime of Java's appearance (whose character size is 16 bits)\nintroduced the type ",(0,i.jsx)(n.code,{children:"Wide_Character"}),", which contains 65536 characters.\nLater the 32-bit type ",(0,i.jsx)(n.code,{children:"Wide_Wide_Character"}),' was added for Unicode with its\nrepertoire of 1114112 "code points".']}),"\n",(0,i.jsxs)(n.p,{children:["The types ",(0,i.jsx)(n.code,{children:"String"})," and ",(0,i.jsx)(n.code,{children:"Wide_String"})," were never deprecated.\nIn fact, the type ",(0,i.jsx)(n.code,{children:"String"})," is still widely used in the standard library.\nFor example, in file names in packages related to I/O and packages related to\nenvironment variables."]}),"\n",(0,i.jsxs)(n.p,{children:["To print the text with the UTF-8 characters in the program above,\nthe type ",(0,i.jsx)(n.code,{children:"Wide_String"})," should be used instead.\nIn order to print text of this type, the package ",(0,i.jsx)(n.code,{children:"Ada.Wide_Text_IO"})," is needed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:'with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String := "\u041f\u0440\u0438\u0432\u0456\u0442";\nbegin\n   Ada.Wide_Text_IO.Put_Line (Hello);\nend Main;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now the program will compile and print a string of 6 characters to the screen."}),"\n",(0,i.jsx)(n.h2,{id:"identifiers",children:"Identifiers"}),"\n",(0,i.jsxs)(n.p,{children:["By default the GNAT compiler recognizes only the Latin-1 character set in identifiers.\nThe current Ada standard, however, defines the\n",(0,i.jsx)(n.em,{children:"identifier"})," lexical element in Unicode terms, not in Latin-1 characters.\nThat is, the standard allows the use of non-Latin-1 characters in identifiers.\nWith ",(0,i.jsx)(n.code,{children:"-gnatW8"})," the compiler will follow the standard with\nrespect to identifiers and allow the use of UTF-8 characters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:"with Ada.Text_IO;\n\nprocedure Main is\n   \u03c0 : constant := 3.14;\nbegin\n   Ada.Text_IO.Put_Line (\u03c0'Image);\nend Main;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The use of such names is not particularly encouraged, but can be found useful\nin certain cases."}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Keep compilation units and file names in ASCII to avoid\nproblems with the compiler and tools."})}),"\n",(0,i.jsxs)(n.h2,{id:"when--gnatw8-isnt-allowed",children:["When ",(0,i.jsx)(n.code,{children:"-gnatW8"})," isn't allowed"]}),"\n",(0,i.jsxs)(n.p,{children:["Some style guides prohibit the use of non-ASCII characters in source code.\nWithout ",(0,i.jsx)(n.code,{children:"-gnatW8"}),",\na ",(0,i.jsx)(n.code,{children:"Wide_String"}),' containing UTF-8 characters (in this case "\u041f\u0440\u0438\u0432\u0456\u0442") can be constructed\nas follows:']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:"with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String :=\n     Wide_Character'Val (1055) &\n     Wide_Character'Val (1088) &\n     Wide_Character'Val (1080) &\n     Wide_Character'Val (1074) &\n     Wide_Character'Val (1110) &\n     Wide_Character'Val (1090);\nbegin\n   Ada.Wide_Text_IO.Put_Line (Hello);\nend Main;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The result is, well, non-obvious:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'["041F"]["0440"]["0438"]["0432"]["0456"]["0442"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:['The output is the so-called "brackets encoding", invented by the GNAT\nauthors in the early days of ',(0,i.jsx)(n.code,{children:"Wide_Character"})," and ",(0,i.jsx)(n.code,{children:"Wide_String"}),".\nTo avoid brackets encoding and make the compiler use UTF-8 even without ",(0,i.jsx)(n.code,{children:"-gnatW8"}),",\nadd ",(0,i.jsx)(n.code,{children:"-W8"})," to the list of switches in package ",(0,i.jsx)(n.code,{children:"Binder"})," in the .gpr file of your project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'package Binder is\n   for Switches ("ada") use ("-W8");\nend Binder;\n'})}),"\n",(0,i.jsx)(n.p,{children:'Using this switch, the program will correctly print the string "\u041f\u0440\u0438\u0432\u0456\u0442" instead\nof producing output using brackets encoding.'}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:['In GNAT Studio, go to the tab "Build" -> "Switches" -> "Binder" and add ',(0,i.jsx)(n.code,{children:"-W8"})," to\nthe options bar."]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["When you use ",(0,i.jsx)(n.code,{children:"-gnatW8"}),", the binder will use the ",(0,i.jsx)(n.code,{children:"-W8"})," switch automatically.\nBut you can specify both of them, it won't hurt."]})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Brackets encoding was used, for example, in GNAT's implementation of package ",(0,i.jsx)(n.code,{children:"Ada.Numerics"}),"\nto provide the constant ",(0,i.jsx)(n.code,{children:"Pi"})," as the greek letter \u03c0:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:'["03C0"] : constant := Pi;\n'})}),(0,i.jsxs)(n.p,{children:["(Chapter ",(0,i.jsx)(n.a,{href:"/docs/arm/AA-A/AA-A.5#static-semantics",children:"A.5"})," of the reference manual does\nnot use bracket encoding and uses the actual UTF-8 character \u03c0)"]})]}),"\n",(0,i.jsx)(n.h2,{id:"opening-files-using-utf-8",children:"Opening files using UTF-8"}),"\n",(0,i.jsxs)(n.p,{children:["Files using UTF-8 can be opened using the parameter ",(0,i.jsx)(n.code,{children:'Form => "WCEM=8"'}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ada",children:"with Ada.Wide_Text_IO;\n\nprocedure Main is\n   Hello : constant Wide_String :=\n     Wide_Character'Val (1055) &\n     Wide_Character'Val (1088) &\n     Wide_Character'Val (1080) &\n     Wide_Character'Val (1074) &\n     Wide_Character'Val (1110) &\n     Wide_Character'Val (1090);\n   Output : Ada.Wide_Text_IO.File_Type;\nbegin\n   Ada.Wide_Text_IO.Create (Output, Name => \"hello.txt\", Form => \"WCEM=8\");\n   Ada.Wide_Text_IO.Put_Line (Output, Hello);\nend Main;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"environment-variables",children:"Environment variables"}),"\n",(0,i.jsxs)(n.p,{children:["Do not expect your program to pay attention to locale settings (like ",(0,i.jsx)(n.code,{children:"LANG"}),"),\nbut watch out for environment variables\n",(0,i.jsx)(n.code,{children:"GNAT_CCS_ENCODING"}),", ",(0,i.jsx)(n.code,{children:"GNAT_CODE_PAGE"})," on Windows."]}),"\n",(0,i.jsx)(n.h2,{id:"enabling-utf-8-in-other-tools",children:"Enabling UTF-8 in other tools"}),"\n",(0,i.jsx)(n.h3,{id:"gnat-programs",children:"GNAT programs"}),"\n",(0,i.jsxs)(n.p,{children:["Other GNAT programs like ",(0,i.jsx)(n.code,{children:"gnatpp"})," and ",(0,i.jsx)(n.code,{children:"gnatstub"})," can use UTF-8\nby using the flag ",(0,i.jsx)(n.code,{children:"--wide-character-encoding=8"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ada-language-server",children:"Ada Language Server"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/AdaCore/ada_language_server/",children:"Ada Language Server"}),"\n(part of the Ada extension for Visual Studio Code) uses ",(0,i.jsx)(n.code,{children:"iso-8859-1"})," by default.\nThis can be changed to UTF-8 via the parameter\n",(0,i.jsx)(n.a,{href:"https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md#defaultCharset",children:"defaultCharset"})," in the settings:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"defaultCharset": "UTF-8"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"alire-crates-for-handling-unicode-strings",children:"Alire crates for handling Unicode strings"}),"\n",(0,i.jsxs)(n.p,{children:["For some time, the Ada standard was unambiguous in that the types ",(0,i.jsx)(n.code,{children:"Character"})," and ",(0,i.jsx)(n.code,{children:"String"}),'\ncould only contain Latin-1 characters. But at some point it faltered under\nthe onslaught of "lovers of simple solutions" and there appeared functions\nto convert ',(0,i.jsx)(n.code,{children:"Wide_String"}),"/",(0,i.jsx)(n.code,{children:"Wide_Wide_String"})," to UTF-8, which use ",(0,i.jsx)(n.code,{children:"String"}),"\ntype instead of an array of bytes to represent UTF-8."]}),"\n",(0,i.jsxs)(n.p,{children:["The GNAT authors take full advantage of this, allowing, for example, to pass\nto ",(0,i.jsx)(n.code,{children:"Ada.Text_IO.Create"})," the file name in UTF-8 encoding via a parameter of\ntype ",(0,i.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Introducing the type ",(0,i.jsx)(n.code,{children:"Wide_Wide_String"}),' does not really solve the problem of\nusing Unicode, since this standard does not manipulate "characters", but\ncombinations of characters. There are variants where several "code points"\nform a single glyph when printed or displayed. It is often more convenient for\nthe user to work in such concepts. This is logical for specifying the\nline or column position in a text.\nThe type ',(0,i.jsx)(n.code,{children:"Wide_Wide_String"})," does not help here."]}),"\n",(0,i.jsx)(n.p,{children:"Various Alire crates exist which provide proper support for Unicode strings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/AdaCore/VSS",children:"vss"}),".\nIntroduces its own type for Unicode strings with handy methods to work\nwith. It can be used to find character boundaries, grapheme clusters, character\noffsets in UTF-8/UTF-16 encoding, etc."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://alire.ada.dev/crates/matreshka_league",children:"matreshka_league"}),'. Allows\nyou to operate on strings in terms of Unicode "code points". It has a set of\ntranscoders to different encoding systems (like Windows-1251, KOI8-R),\nsupport for JSON, XML, databases, regular expressions, XML template engine,\netc.']}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);