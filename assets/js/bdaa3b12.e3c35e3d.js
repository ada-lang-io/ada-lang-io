"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[1209],{5257:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>h,toc:()=>p});var n=s(74848),i=s(28453),r=s(13842),a=s(91435),o=(s(21432),s(79162)),d=s(34421);const c={sidebar_position:204},l="J.11 The Class Attribute of Untagged Incomplete Types",h={id:"arm/AA-J/AA-J.11",title:"J.11 The Class Attribute of Untagged Incomplete Types",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-J/AA-J.11.mdx",sourceDirName:"arm/AA-J",slug:"/arm/AA-J/AA-J.11",permalink:"/docs/arm/AA-J/AA-J.11",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:204,frontMatter:{sidebar_position:204},sidebar:"referenceManualSidebar",previous:{title:"J.10 Specific Suppression of Checks",permalink:"/docs/arm/AA-J/AA-J.10"},next:{title:"J.12 Pragma Interface",permalink:"/docs/arm/AA-J/AA-J.12"}},m={},p=[{value:"Static Semantics",id:"static-semantics",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4}];function A(e){const t={a:"a",admonition:"admonition",h1:"h1",h4:"h4",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"j11-the-class-attribute-of-untagged-incomplete-types",children:"J.11 The Class Attribute of Untagged Incomplete Types"}),"\n",(0,n.jsx)(t.admonition,{type:"danger",children:(0,n.jsxs)(t.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,n.jsx)(t.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,n.jsx)(t.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,n.jsx)(o.A,{children:"1/2"}),"\n",(0,n.jsx)(d.A,{items:["AI95-00326-01"]}),"\n",(0,n.jsxs)("p",{children:["For the first subtype S of a type ",(0,n.jsx)("em",{children:"T"})," declared by an ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#S0085",children:"incomplete_type_declaration"})})," that is not tagged, the following attribute is defined: ",(0,n.jsx)("br",{})]}),"\n",(0,n.jsx)(o.A,{children:"2/2"}),"\n",(0,n.jsx)(d.A,{items:["AI95-00326-01"]}),"\n",(0,n.jsxs)("dt",{children:[(0,n.jsx)("br",{}),"S'Class "]}),"\n",(0,n.jsx)("dl",{children:(0,n.jsxs)("dd",{children:["Denotes the first subtype of the incomplete class-wide type rooted at ",(0,n.jsx)("em",{children:"T"}),". The completion of ",(0,n.jsx)("em",{children:"T"})," shall declare a tagged type. Such an attribute reference shall occur in the same library unit as the ",(0,n.jsx)("code",{children:(0,n.jsx)("a",{href:"/docs/arm/AA-3/AA-3.10#S0085",children:"incomplete_type_declaration"})}),". ",(0,n.jsx)("br",{})]})}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsx)(o.A,{children:"2.a/2"}),(0,n.jsx)(d.A,{items:["AI95-00326-01"]}),(0,n.jsx)(r.A,{type:"aarm",aarm:"reason",children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)("strong",{}),"This must occur in the same unit to prevent children from imposing requirements on their ancestor library units for deferred incomplete types. ",(0,n.jsx)("br",{})]})})]}),"\n",(0,n.jsx)(a.A,{children:(0,n.jsx)(t.h4,{id:"wording-changes-from-ada-95",children:"Wording Changes from Ada 95"})}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsx)(o.A,{children:"2.b/3"}),(0,n.jsx)(d.A,{items:["AI95-00326-01","AI05-0299-1"]}),(0,n.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,n.jsxs)(t.p,{children:["This subclause is new. This feature was moved here because the tagged incomplete type provides a better way to provide this capability (it doesn't put requirements on the completion based on uses that could be anywhere). Pity we didn't think of it in 1994. ",(0,n.jsx)("br",{})]})})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(A,{...e})}):A(e)}}}]);