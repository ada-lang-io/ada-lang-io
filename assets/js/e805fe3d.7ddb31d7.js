"use strict";(self.webpackChunkada_lang_io=self.webpackChunkada_lang_io||[]).push([[8367],{14663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>m,toc:()=>x});var i=t(74848),s=t(28453),r=t(13842),a=t(91435),o=t(21432),l=t(79162),h=t(34421);const d={sidebar_position:183},c="G.2 Numeric Performance Requirements",m={id:"arm/AA-G/AA-G.2",title:"G.2 Numeric Performance Requirements",description:"This Reference Manual output has not been verified,",source:"@site/docs/arm/AA-G/AA-G.2.mdx",sourceDirName:"arm/AA-G",slug:"/arm/AA-G/AA-G.2",permalink:"/docs/arm/AA-G/AA-G.2",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:183,frontMatter:{sidebar_position:183},sidebar:"referenceManualSidebar",previous:{title:"G.1 Complex Arithmetic",permalink:"/docs/arm/AA-G/AA-G.1"},next:{title:"G.3 Vector and Matrix Manipulation",permalink:"/docs/arm/AA-G/AA-G.3"}},u={},x=[{value:"Implementation Requirements",id:"implementation-requirements",level:4},{value:"Implementation Permissions",id:"implementation-permissions",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83",level:4},{value:"G.2.1  Model of Floating Point Arithmetic",id:"g21--model-of-floating-point-arithmetic",level:2},{value:"Static Semantics",id:"static-semantics",level:4},{value:"Implementation Requirements",id:"implementation-requirements-1",level:4},{value:"Implementation Permissions",id:"implementation-permissions-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83",level:4},{value:"Inconsistencies With Ada 83",id:"inconsistencies-with-ada-83",level:4},{value:"Extensions to Ada 83",id:"extensions-to-ada-83-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-1",level:4},{value:"G.2.2  Model-Oriented Attributes of Floating Point Types",id:"g22--model-oriented-attributes-of-floating-point-types",level:2},{value:"Static Semantics",id:"static-semantics-1",level:4},{value:"Wording Changes from Ada 95",id:"wording-changes-from-ada-95",level:4},{value:"G.2.3  Model of Fixed Point Arithmetic",id:"g23--model-of-fixed-point-arithmetic",level:2},{value:"Implementation Requirements",id:"implementation-requirements-2",level:4},{value:"Inconsistencies With Ada 83",id:"inconsistencies-with-ada-83-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-2",level:4},{value:"Wording Changes from Ada 2012",id:"wording-changes-from-ada-2012",level:4},{value:"G.2.4  Accuracy Requirements for the Elementary Functions",id:"g24--accuracy-requirements-for-the-elementary-functions",level:2},{value:"Implementation Requirements",id:"implementation-requirements-3",level:4},{value:"Implementation Advice",id:"implementation-advice",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-3",level:4},{value:"G.2.5  Performance Requirements for Random Number Generation",id:"g25--performance-requirements-for-random-number-generation",level:2},{value:"Implementation Requirements",id:"implementation-requirements-4",level:4},{value:"G.2.6  Accuracy Requirements for Complex Arithmetic",id:"g26--accuracy-requirements-for-complex-arithmetic",level:2},{value:"Implementation Requirements",id:"implementation-requirements-5",level:4},{value:"Implementation Advice",id:"implementation-advice-1",level:4},{value:"Wording Changes from Ada 83",id:"wording-changes-from-ada-83-4",level:4}];function f(e){const n={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h4:"h4",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"g2-numeric-performance-requirements",children:"G.2 Numeric Performance Requirements"}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["This Reference Manual output has not been verified,\nand may contain omissions or errors.\nReport any problems on the ",(0,i.jsx)(n.a,{href:"https://github.com/ada-lang-io/ada-lang-io/issues/20",children:"tracking issue"})]})}),"\n","\n",(0,i.jsx)(n.h4,{id:"implementation-requirements",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"1"}),"\n",(0,i.jsxs)("p",{children:["Implementations shall provide a user-selectable mode in which the accuracy and other numeric performance requirements detailed in the following subclauses are observed. This mode, referred to as the ",(0,i.jsx)("em",{children:"strict mode"}),", may or may not be the default mode; it directly affects the results of the predefined arithmetic operations of real types and the results of the subprograms in children of the Numerics package, and indirectly affects the operations in other language defined packages. Implementations shall also provide the opposing mode, which is known as the ",(0,i.jsx)("em",{children:"relaxed mode"}),". ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"1.a"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"reason",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"On the assumption that the users of an implementation that does not support the Numerics Annex have no particular need for numerical performance, such an implementation has no obligation to meet any particular requirements in this area. On the other hand, users of an implementation that does support the Numerics Annex are provided with a way of ensuring that their programs achieve a known level of numerical performance and that the performance is portable to other such implementations. The relaxed mode is provided to allow implementers to offer an efficient but not fully accurate alternative in the case that the strict mode entails a time overhead that some users may find excessive. In some of its areas of impact, the relaxed mode may be fully equivalent to the strict mode. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"1.b"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The relaxed mode may, for example, be used to exploit the implementation of (some of) the elementary functions in hardware, when available. Such implementations often do not meet the accuracy requirements of the strict mode, or do not meet them over the specified range of parameter values, but compensate in other ways that may be important to the user, such as their extreme speed. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"1.c"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"For implementations supporting the Numerics Annex, the choice of mode has no effect on the selection of a representation for a real type or on the values of attributes of a real type. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-permissions",children:"Implementation Permissions"}),"\n",(0,i.jsx)(l.A,{children:"2"}),"\n",(0,i.jsxs)("p",{children:["Either mode may be the default mode. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"2.a"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"Whether the strict mode or the relaxed mode is the default.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"3/5"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0444-1"]}),"\n",(0,i.jsxs)("p",{children:["The two modes can be one and the same. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"extensions-to-ada-83",children:"Extensions to Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.a"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The choice between strict and relaxed numeric performance was not available in Ada 83. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_G.2.1"}),"\n",(0,i.jsx)(n.h2,{id:"g21--model-of-floating-point-arithmetic",children:"G.2.1  Model of Floating Point Arithmetic"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["In the strict mode, the predefined operations of a floating point type shall satisfy the accuracy requirements specified here and shall avoid or signal overflow in the situations described. This behavior is presented in terms of a model of floating point arithmetic that builds on the concept of the canonical form (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"static-semantics",children:"Static Semantics"}),"\n",(0,i.jsx)(l.A,{children:"2_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["Associated with each floating point type is an infinite set of model numbers. The model numbers of a type are used to define the accuracy requirements that have to be satisfied by certain predefined operations of the type; through certain attributes of the model numbers, they are also used to explain the meaning of a user-declared floating point type declaration. The model numbers of a derived type are those of the parent type; the model numbers of a subtype are those of its type.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["The ",(0,i.jsx)("em",{children:"model numbers"})," of a floating point type T are zero and all the values expressible in the canonical form (for the type T), in which ",(0,i.jsx)("em",{children:"mantissa"})," has T'Model","_","Mantissa digits and ",(0,i.jsx)("em",{children:"exponent"})," has a value greater than or equal to T'Model","_","Emin. (These attributes are defined in ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.2",children:"G.2.2"}),".) ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.a_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The model is capable of describing the behavior of most existing hardware that has a mantissa-exponent representation. As applied to a type T, it is parameterized by the values of T'Machine","_","Radix, T'Model","_","Mantissa, T'Model","_","Emin, T'Safe","_","First, and T'Safe","_","Last. The values of these attributes are determined by how, and how well, the hardware behaves. They in turn determine the set of model numbers and the safe range of the type, which figure in the accuracy and range (overflow avoidance) requirements.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.b/5_G.2.1"}),(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["In hardware that is free of arithmetic anomalies, T'Model","_","Mantissa, T'Model","_","Emin, T'Safe","_","First, and T'Safe","_","Last will yield the same values as T'Machine","_","Mantissa, T'Machine","_","Emin, T'Base'First, and T'Base'Last, respectively, and the model numbers in the safe range of the type T will coincide with the machine numbers of the type T. In less perfect hardware, it is not possible for the model-oriented attributes to have these optimal values, since the hardware, by definition, and therefore the implementation, cannot conform to the stringencies of the resulting model; in this case, the values yielded by the model-oriented parameters have to be made more conservative (that is, have to be penalized), with the result that the model numbers are more widely separated than the machine numbers, and the safe range is a subrange of the base range. The implementation will then be able to conform to the requirements of the weaker model defined by the sparser set of model numbers and the smaller safe range. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"4_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["A ",(0,i.jsx)("em",{children:"model interval"})," of a floating point type is any interval whose bounds are model numbers of the type. The ",(0,i.jsx)("em",{children:"model interval"})," of a type T ",(0,i.jsx)("em",{children:"associated with a value"})," ",(0,i.jsx)("em",{children:"v"})," is the smallest model interval of T that includes ",(0,i.jsx)("em",{children:"v"}),". (The model interval associated with a model number of a type consists of that number only.) ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements-1",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"5_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["The accuracy requirements for the evaluation of certain predefined operations of floating point types are as follows. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"5.a_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"This subclause does not cover the accuracy of an operation of a static expression; such operations have to be evaluated exactly (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-4/AA-4.9",children:"4.9"}),"). It also does not cover the accuracy of the predefined attributes of a floating point subtype that yield a value of the type; such operations also yield exact results (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#Subclause_3.5.8",children:"3.5.8"})," and ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"). ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"6_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["An ",(0,i.jsx)("em",{children:"operand interval"})," is the model interval, of the type specified for the operand of an operation, associated with the value of the operand.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"7_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["For any predefined arithmetic operation that yields a result of a floating point type T, the required bounds on the result are given by a model interval of T (called the ",(0,i.jsx)("em",{children:"result interval"}),") defined in terms of the operand values as follows: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"8_G.2.1"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["The result interval is the smallest model interval of T that includes the minimum and the maximum of all the values obtained by applying the (exact) mathematical operation to values arbitrarily selected from the respective operand intervals. ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(l.A,{children:"9_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["The result interval of an exponentiation is obtained by applying the above rule to the sequence of multiplications defined by the exponent, assuming arbitrary association of the factors, and to the final division in the case of a negative exponent.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"10_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["The result interval of a conversion of a numeric value to a floating point type T is the model interval of T associated with the operand value, except when the source expression is of a fixed point type with a ",(0,i.jsx)("em",{children:"small"})," that is not a power of T'Machine","_","Radix or is a fixed point multiplication or division either of whose operands has a ",(0,i.jsx)("em",{children:"small"})," that is not a power of T'Machine","_","Radix; in these cases, the result interval is implementation defined. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"10.a_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result interval in certain cases of fixed-to-float conversion.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"11_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["For any of the foregoing operations, the implementation shall deliver a value that belongs to the result interval when both bounds of the result interval are in the safe range of the result type T, as determined by the values of T'Safe","_","First and T'Safe","_","Last; otherwise, ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"12_G.2.1"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if T'Machine","_","Overflows is True, the implementation shall either deliver a value that belongs to the result interval or raise Constraint","_","Error;",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"13_G.2.1"}),(0,i.jsxs)("li",{children:["if T'Machine","_","Overflows is False, the result is implementation defined. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"13.a_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result of a floating point arithmetic operation in overflow situations, when the Machine","_","Overflows attribute of the result type is False.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"14/5_G.2.1"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["For any predefined relation on operands of a floating point type T, the implementation may deliver any value (that is, either True or False) obtained by applying the (exact) mathematical comparison to values arbitrarily chosen from the respective operand intervals.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"15_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["The result of a membership test is defined in terms of comparisons of the operand value with the lower and upper bounds of the given range or type mark (the usual rules apply to these comparisons). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-permissions-1",children:"Implementation Permissions"}),"\n",(0,i.jsx)(l.A,{children:"16_G.2.1"}),"\n",(0,i.jsxs)("p",{children:["If the underlying floating point hardware implements division as multiplication by a reciprocal, the result interval for division (and exponentiation by a negative exponent) is implementation defined. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.a_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result interval for division (or exponentiation by a negative exponent), when the floating point hardware implements division as multiplication by a reciprocal.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-83",children:"Wording Changes from Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.b_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The Ada 95 model numbers of a floating point type that are in the safe range of the type are comparable to the Ada 83 safe numbers of the type. There is no analog of the Ada 83 model numbers. The Ada 95 model numbers, when not restricted to the safe range, are an infinite set. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"inconsistencies-with-ada-83",children:"Inconsistencies With Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.c_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Giving the model numbers the hardware radix, instead of always a radix of two, allows (in conjunction with other changes) some borderline declared types to be represented with less precision than in Ada 83 (that is, with single precision, whereas Ada 83 would have used double precision). Because the lower precision satisfies the requirements of the model (and did so in Ada 83 as well), this change is viewed as a desirable correction of an anomaly, rather than a worrisome inconsistency. (Of course, the wider representation chosen in Ada 83 also remains eligible for selection in Ada 95.)",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.d/5_G.2.1"}),(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["As an example of this phenomenon, assume that Float is represented in single precision and that a double precision type is also available. Also assume hexadecimal hardware with clean properties, for example certain IBM hardware. Then, ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.e_G.2.1"}),(0,i.jsx)(o.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["type T is digits Float'Digits range -Float'Last .. Float'Last;","\n"]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.f_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["results in T being represented in double precision in Ada 83 and in single precision in Ada 95. The latter is intuitively correct; the former is counterintuitive. The reason why the double precision type is used in Ada 83 is that Float has model and safe numbers (in Ada 83) with 21 binary digits in their mantissas, as is required to model the hypothesized hexadecimal hardware using a binary radix; thus Float'Last, which is not a model number, is slightly outside the range of safe numbers of the single precision type, making that type ineligible for selection as the representation of T even though it provides adequate precision. In Ada 95, Float'Last (the same value as before) is a model number and is in the safe range of Float on the hypothesized hardware, making Float eligible for the representation of T. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"extensions-to-ada-83-1",children:"Extensions to Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.g_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Giving the model numbers the hardware radix allows for practical implementations on decimal hardware. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-83-1",children:"Wording Changes from Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"16.h_G.2.1"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The wording of the model of floating point arithmetic has been simplified to a large extent. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_G.2.2"}),"\n",(0,i.jsx)(n.h2,{id:"g22--model-oriented-attributes-of-floating-point-types",children:"G.2.2  Model-Oriented Attributes of Floating Point Types"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.2"}),"\n",(0,i.jsxs)("p",{children:["In implementations that support the Numerics Annex, the model-oriented attributes of floating point types shall yield the values defined here, in both the strict and the relaxed modes. These definitions add conditions to those in ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),". ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"static-semantics-1",children:"Static Semantics"}),"\n",(0,i.jsx)(l.A,{children:"2_G.2.2"}),"\n",(0,i.jsxs)("p",{children:["For every subtype S of a floating point type ",(0,i.jsx)("em",{children:"T"}),": ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3/2_G.2.2"}),"\n",(0,i.jsx)(h.A,{items:["AI95-00256-01"]}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),"S'Model","_","Mantissa "]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["Yields the number of digits in the mantissa of the canonical form of the model numbers of ",(0,i.jsx)("em",{children:"T"})," (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"). The value of this attribute shall be greater than or equal to ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(l.A,{children:"3.1/2_G.2.2"}),"\n",(0,i.jsxs)("p",{class:"Indented8",children:["\u2308",(0,i.jsx)("em",{children:"d"})," \xb7 log(10) / log(",(0,i.jsx)("em",{children:"T"}),"'Machine","_","Radix)\u2309 + ",(0,i.jsx)("em",{children:"g"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3.2/2_G.2.2"}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["where ",(0,i.jsx)("em",{children:"d"})," is the requested decimal precision of ",(0,i.jsx)("em",{children:"T"}),", and ",(0,i.jsx)("em",{children:"g"})," is 0 if ",(0,i.jsx)("em",{children:"T"}),"'Machine","_","Radix is a positive power of 10 and 1 otherwise. In addition, ",(0,i.jsx)("em",{children:"T"}),"'Model","_","Mantissa shall be less than or equal to the value of ",(0,i.jsx)("em",{children:"T"}),"'Machine","_","Mantissa. This attribute yields a value of the type ",(0,i.jsxs)("em",{children:["universal","_","integer"]}),". ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.a_G.2.2"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"S'Model","_","Epsilon, which is defined in terms of S'Model","_","Mantissa (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"), yields the absolute value of the difference between one and the next model number of the type ",(0,i.jsx)("em",{children:"T"})," above one. It is equal to or larger than the absolute value of the difference between one and the next machine number of the type ",(0,i.jsx)("em",{children:"T"})," above one. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"4_G.2.2"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),"S'Model","_","Emin "]}),"\n",(0,i.jsx)("dl",{children:(0,i.jsxs)("dd",{children:["Yields the minimum exponent of the canonical form of the model numbers of ",(0,i.jsx)("em",{children:"T"})," (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"). The value of this attribute shall be greater than or equal to the value of ",(0,i.jsx)("em",{children:"T"}),"'Machine","_","Emin. This attribute yields a value of the type ",(0,i.jsxs)("em",{children:["universal","_","integer"]}),". ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.a_G.2.2"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"S'Model","_","Small, which is defined in terms of S'Model","_","Emin (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),"), yields the smallest positive (nonzero) model number of the type ",(0,i.jsx)("em",{children:"T"}),". ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"5_G.2.2"}),"\n",(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),"S'Safe","_","First "]}),"\n",(0,i.jsxs)("dl",{children:[(0,i.jsxs)("dd",{children:["Yields the lower bound of the safe range of ",(0,i.jsx)("em",{children:"T"}),". The value of this attribute shall be a model number of ",(0,i.jsx)("em",{children:"T"})," and greater than or equal to the lower bound of the base range of ",(0,i.jsx)("em",{children:"T"}),". In addition, if ",(0,i.jsx)("em",{children:"T"})," is declared by a ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0045",children:"floating_point_definition"})})," or is derived from such a type, and the ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0045",children:"floating_point_definition"})})," includes a ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0046",children:"real_range_specification"})})," specifying a lower bound of ",(0,i.jsx)("em",{children:"lb"}),", then the value of this attribute shall be less than or equal to ",(0,i.jsx)("em",{children:"lb"}),"; otherwise, it shall be less than or equal to \u201310.0 4 \xb7 ",(0,i.jsx)("em",{children:"d"}),", where ",(0,i.jsx)("em",{children:"d"})," is the requested decimal precision of ",(0,i.jsx)("em",{children:"T"}),". This attribute yields a value of the type ",(0,i.jsxs)("em",{children:["universal","_","real"]}),".",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"6_G.2.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),"S'Safe","_","Last "]}),(0,i.jsxs)("dd",{children:["Yields the upper bound of the safe range of ",(0,i.jsx)("em",{children:"T"}),". The value of this attribute shall be a model number of ",(0,i.jsx)("em",{children:"T"})," and less than or equal to the upper bound of the base range of ",(0,i.jsx)("em",{children:"T"}),". In addition, if ",(0,i.jsx)("em",{children:"T"})," is declared by a ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0045",children:"floating_point_definition"})})," or is derived from such a type, and the ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0045",children:"floating_point_definition"})})," includes a ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#S0046",children:"real_range_specification"})})," specifying an upper bound of ",(0,i.jsx)("em",{children:"ub"}),", then the value of this attribute shall be greater than or equal to ",(0,i.jsx)("em",{children:"ub"}),"; otherwise, it shall be greater than or equal to 10.0 4 \xb7 ",(0,i.jsx)("em",{children:"d"}),", where d is the requested decimal precision of ",(0,i.jsx)("em",{children:"T"}),". This attribute yields a value of the type ",(0,i.jsxs)("em",{children:["universal","_","real"]}),".",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"7_G.2.2"}),(0,i.jsxs)("dt",{children:[(0,i.jsx)("br",{}),"S'Model "]}),(0,i.jsxs)("dd",{children:["Denotes a function (of a parameter ",(0,i.jsx)("em",{children:"X"}),") whose specification is given in ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.3",children:"A.5.3"}),". If ",(0,i.jsx)("em",{children:"X"})," is a model number of ",(0,i.jsx)("em",{children:"T"}),", the function yields ",(0,i.jsx)("em",{children:"X"}),"; otherwise, it yields the value obtained by rounding or truncating ",(0,i.jsx)("em",{children:"X"})," to either one of the adjacent model numbers of ",(0,i.jsx)("em",{children:"T"}),". Constraint","_","Error is raised if the resulting model number is outside the safe range of S. A zero result has the sign of ",(0,i.jsx)("em",{children:"X"})," when S'Signed","_","Zeros is True. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"8_G.2.2"}),"\n",(0,i.jsxs)("p",{children:["Subject to the constraints given above, the values of S'Model","_","Mantissa and S'Safe","_","Last are to be maximized, and the values of S'Model","_","Emin and S'Safe","_","First minimized, by the implementation as follows: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"9_G.2.2"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["First, S'Model","_","Mantissa is set to the largest value for which values of S'Model","_","Emin, S'Safe","_","First, and S'Safe","_","Last can be chosen so that the implementation satisfies the strict-mode requirements of ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.1",children:"G.2.1"})," in terms of the model numbers and safe range induced by these attributes.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"10_G.2.2"}),(0,i.jsxs)("li",{children:["Next, S'Model","_","Emin is set to the smallest value for which values of S'Safe","_","First and S'Safe","_","Last can be chosen so that the implementation satisfies the strict-mode requirements of ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.1",children:"G.2.1"})," in terms of the model numbers and safe range induced by these attributes and the previously determined value of S'Model","_","Mantissa.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"11/3_G.2.2"}),(0,i.jsx)(h.A,{items:["AI05-0092-1"]}),(0,i.jsxs)("li",{children:["Finally, S'Safe","_","First and S'Safe","_","Last are set (in either order) to the smallest and largest values, respectively, for which the implementation satisfies the strict-mode requirements of ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.1",children:"G.2.1"})," in terms of the model numbers and safe range induced by these attributes and the previously determined values of S'Model","_","Mantissa and S'Model","_","Emin. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"11.a/5_G.2.2"}),(0,i.jsx)(h.A,{items:["AI12-0437-1"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The following table shows appropriate attribute values for IEEE basic single and double precision types (ANSI/IEEE Std 754-1985, ISO/IEC 60559:2020). Here, we use the names IEEE","_","Float","_","32 and IEEE","_","Float","_","64, the names that would typically be declared in package Interfaces, in an implementation that supports IEEE arithmetic. In such an implementation, the attributes would typically be the same for Standard.Float and Long","_","Float, respectively. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"11.b_G.2.2"}),(0,i.jsx)(o.A,{language:"ada",children:(0,i.jsxs)(n.p,{children:["Attribute                        IEEE","_","Float","_","32                 IEEE","_","Float","_","64","\n","\n",(0,i.jsx)(l.A,{children:"11.c_G.2.2"}),"\n'Machine","_","Radix                               2                             2","\n","'Machine","_","Mantissa                           24                            53","\n","'Machine","_","Emin                             -125                         -1021","\n","'Machine","_","Emax                              128                          1024","\n","'Denorm                                   True                          True","\n","'Machine","_","Rounds                           True                          True","\n","'Machine","_","Overflows                  True/False                    True/False","\n","'Signed","_","Zeros                   should be True                should be True","\n","\n",(0,i.jsx)(l.A,{children:"11.d_G.2.2"}),"\n'Model","_","Mantissa    (same as 'Machine","_","Mantissa)   (same as 'Machine","_","Mantissa)","\n","'Model","_","Emin            (same as 'Machine","_","Emin)       (same as 'Machine","_","Emin)","\n","'Model","_","Epsilon                      2.0","*","*","(-23)                    2.0","*","*","(-52)","\n","'Model","_","Small                       2.0","*","*","(-126)                  2.0","*","*","(-1022)","\n","'Safe","_","First         -2.0","*","*","128","*","(1.0-2.0","*","*","(-24))   -2.0","*","*","1024","*","(1.0-2.0","*","*","(-53))","\n","'Safe","_","Last           2.0","*","*","128","*","(1.0-2.0","*","*","(-24))    2.0","*","*","1024","*","(1.0-2.0","*","*","(-53))","\n","\n",(0,i.jsx)(l.A,{children:"11.e_G.2.2"}),"\n'Digits                                      6                            15","\n","'Base'Digits                 (same as 'Digits)             (same as 'Digits)","\n","\n",(0,i.jsx)(l.A,{children:"11.f_G.2.2"}),"\n'First                   (same as 'Safe","_","First)         (same as 'Safe","_","First)","\n","'Last                     (same as 'Safe","_","Last)          (same as 'Safe","_","Last)","\n","'Size                                       32                            64","\n"]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"11.g_G.2.2"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Note: 'Machine","_","Overflows can be True or False, depending on whether the Ada implementation raises Constraint","_","Error or delivers a signed infinity in overflow and zerodivide situations (and at poles of the elementary functions).",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-95",children:"Wording Changes from Ada 95"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"11.h/2_G.2.2"}),(0,i.jsx)(h.A,{items:["AI95-00256-01"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Corrected the definition of Model","_","Mantissa to match that given in ",(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#Subclause_3.5.8",children:"3.5.8"}),". ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_G.2.3"}),"\n",(0,i.jsx)(n.h2,{id:"g23--model-of-fixed-point-arithmetic",children:"G.2.3  Model of Fixed Point Arithmetic"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["In the strict mode, the predefined arithmetic operations of a fixed point type shall satisfy the accuracy requirements specified here and shall avoid or signal overflow in the situations described. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements-2",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"2_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["The accuracy requirements for the predefined fixed point arithmetic operations and conversions, and the results of relations on fixed point operands, are given below. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"2.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"This subclause does not cover the accuracy of an operation of a static expression; such operations have to be evaluated exactly (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-4/AA-4.9",children:"4.9"}),"). ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"3_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["The operands of the fixed point adding operators, absolute value, and comparisons have the same type. These operations are required to yield exact results, unless they overflow.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"4_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["Multiplications and divisions are allowed between operands of any two fixed point types; the result has to be (implicitly or explicitly) converted to some other numeric type. For purposes of defining the accuracy rules, the multiplication or division and the conversion are treated as a single operation whose accuracy depends on three types (those of the operands and the result). For decimal fixed point types, the attribute T'Round may be used to imply explicit conversion with rounding (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-3/AA-3.5#Subclause_3.5.10",children:"3.5.10"}),").",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"5_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["When the result type is a floating point type, the accuracy is as given in ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.1",children:"G.2.1"}),". For some combinations of the operand and result types in the remaining cases, the result is required to belong to a small set of values called the ",(0,i.jsx)("em",{children:"perfect result set"}),"; for other combinations, it is required merely to belong to a generally larger and implementation-defined set of values called the ",(0,i.jsx)("em",{children:"close result set"}),". When the result type is a decimal fixed point type, the perfect result set contains a single value; thus, operations on decimal types are always fully specified. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"5.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The definition of ",(0,i.jsx)("em",{children:"close result set"}),", which determines the accuracy of certain fixed point multiplications and divisions.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"6/5_G.2.3"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["When one operand of a fixed-fixed multiplication or division is of type ",(0,i.jsxs)("em",{children:["universal","_","real"]}),", that operand is not implicitly converted in the usual sense, since the context does not determine a unique target type, but the accuracy of the result of the multiplication or division (that is, whether the result has to belong to the perfect result set or merely the close result set) depends on the value of the operand of type ",(0,i.jsxs)("em",{children:["universal","_","real"]})," and on the types of the other operand and of the result. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"6.a/5_G.2.3"}),(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"We need not consider here the multiplication or division of two such operands, since in that case either the operation is evaluated exactly (that is, it is an operation of a static expression all of whose operators are of a root numeric type) or it is considered to be an operation of a floating point type. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"7_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["For a fixed point multiplication or division whose (exact) mathematical result is ",(0,i.jsx)("em",{children:"v"}),", and for the conversion of a value ",(0,i.jsx)("em",{children:"v"})," to a fixed point type, the perfect result set and close result set are defined as follows: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"8_G.2.3"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["If the result type is an ordinary fixed point type with a ",(0,i.jsx)("em",{children:"small"})," of ",(0,i.jsx)("em",{children:"s"}),", ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(l.A,{children:"9_G.2.3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"v"})," is an integer multiple of ",(0,i.jsx)("em",{children:"s"}),", then the perfect result set contains only the value ",(0,i.jsx)("em",{children:"v"}),";",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"10_G.2.3"}),(0,i.jsxs)("li",{children:["otherwise, it contains the integer multiple of ",(0,i.jsx)("em",{children:"s"})," just below ",(0,i.jsx)("em",{children:"v"})," and the integer multiple of ",(0,i.jsx)("em",{children:"s"})," just above ",(0,i.jsx)("em",{children:"v"}),". ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"11_G.2.3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["The close result set is an implementation-defined set of consecutive integer multiples of ",(0,i.jsx)("em",{children:"s"})," containing the perfect result set as a subset.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"12_G.2.3"}),(0,i.jsxs)("li",{children:["If the result type is a decimal type with a ",(0,i.jsx)("em",{children:"small"})," of ",(0,i.jsx)("em",{children:"s"}),", ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"13_G.2.3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"v"})," is an integer multiple of ",(0,i.jsx)("em",{children:"s"}),", then the perfect result set contains only the value ",(0,i.jsx)("em",{children:"v"}),";",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"14/3_G.2.3"}),(0,i.jsx)(h.A,{items:["AI05-0264-1"]}),(0,i.jsxs)("li",{children:["otherwise, if truncation applies, then it contains only the integer multiple of ",(0,i.jsx)("em",{children:"s"})," in the direction toward zero, whereas if rounding applies, then it contains only the nearest integer multiple of ",(0,i.jsx)("em",{children:"s"})," (with ties broken by rounding away from zero). ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"15_G.2.3"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["The close result set is an implementation-defined set of consecutive integer multiples of ",(0,i.jsx)("em",{children:"s"})," containing the perfect result set as a subset. ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"15.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"As a consequence of subsequent rules, this case does not arise when the operand types are also decimal types. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"16_G.2.3"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["If the result type is an integer type, ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(l.A,{children:"17_G.2.3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"v"})," is an integer, then the perfect result set contains only the value ",(0,i.jsx)("em",{children:"v"}),";",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"18_G.2.3"}),(0,i.jsxs)("li",{children:["otherwise, it contains the integer nearest to the value ",(0,i.jsx)("em",{children:"v"})," (if ",(0,i.jsx)("em",{children:"v"})," lies equally distant from two consecutive integers, the perfect result set contains the one that is further from zero). ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"19_G.2.3"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["The close result set is an implementation-defined set of consecutive integers containing the perfect result set as a subset. ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(l.A,{children:"20/5_G.2.3"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["The result of a fixed point multiplication or division shall belong either to the perfect result set or to the close result set, as described below, if overflow does not occur. In the following cases, if the result type is a fixed point type, let ",(0,i.jsx)("em",{children:"s"})," be its ",(0,i.jsx)("em",{children:"small"}),"; otherwise, that is when the result type is an integer type, let ",(0,i.jsx)("em",{children:"s"})," be 1.0. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"21/5_G.2.3"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["For a multiplication or division neither of whose operands is of type ",(0,i.jsxs)("em",{children:["universal","_","real"]}),", let ",(0,i.jsx)("em",{children:"l"})," and ",(0,i.jsx)("em",{children:"r"})," be the ",(0,i.jsx)("em",{children:"smalls"})," of the left and right operands. For a multiplication, if (",(0,i.jsx)("em",{children:"l"})," \xb7 ",(0,i.jsx)("em",{children:"r"}),") / ",(0,i.jsx)("em",{children:"s"})," is an integer or the reciprocal of an integer (the ",(0,i.jsx)("em",{children:"smalls"})," are said to be \u201ccompatible\u201d in this case), the result shall belong to the perfect result set; otherwise, it belongs to the close result set. For a division, if ",(0,i.jsx)("em",{children:"l"})," / (",(0,i.jsx)("em",{children:"r"})," \xb7 ",(0,i.jsx)("em",{children:"s"}),") is an integer or the reciprocal of an integer (that is, the ",(0,i.jsx)("em",{children:"smalls"})," are compatible), the result shall belong to the perfect result set; otherwise, it belongs to the close result set. ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"21.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"When the operand and result types are all decimal types, their ",(0,i.jsx)("em",{children:"smalls"})," are necessarily compatible; the same is true when they are all ordinary fixed point types with binary ",(0,i.jsx)("em",{children:"smalls"}),". ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"22_G.2.3"}),"\n",(0,i.jsx)("ul",{children:(0,i.jsxs)("li",{children:["For a multiplication or division having one ",(0,i.jsxs)("em",{children:["universal","_","real"]})," operand with a value of ",(0,i.jsx)("em",{children:"v"}),", note that it is always possible to factor ",(0,i.jsx)("em",{children:"v"})," as an integer multiple of a \u201ccompatible\u201d ",(0,i.jsx)("em",{children:"small"}),", but the integer multiple may be \u201ctoo big\u201d. If there exists a factorization in which that multiple is less than some implementation-defined limit, the result shall belong to the perfect result set; otherwise, it belongs to the close result set. ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"22.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"Conditions on a ",(0,i.jsxs)("em",{children:["universal","_","real"]})," operand of a fixed point multiplication or division for which the result shall be in the ",(0,i.jsx)("em",{children:"perfect result set"}),".",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"23/5_G.2.3"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0300-1"]}),"\n",(0,i.jsxs)("p",{children:["A multiplication P ","*"," Q of an operand of a fixed point type F by an operand of type Integer, or vice versa, and a division P / Q of an operand of a fixed point type F by an operand of type Integer, are also allowed. In these cases, the result has the type of F; explicit conversion of the result is never required. The accuracy required in these cases is the same as that required for a multiplication F(P ","*"," Q) or a division F(P / Q) obtained by interpreting the operand of the integer type to have a fixed point type with a ",(0,i.jsx)("em",{children:"small"})," of 1.0.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"24_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["The accuracy of the result of a conversion from an integer or fixed point type to a fixed point type, or from a fixed point type to an integer type, is the same as that of a fixed point multiplication of the source value by a fixed point operand having a ",(0,i.jsx)("em",{children:"small"})," of 1.0 and a value of 1.0, as given by the foregoing rules. The result of a conversion from a floating point type to a fixed point type shall belong to the close result set. The result of a conversion of a ",(0,i.jsxs)("em",{children:["universal","_","real"]})," operand to a fixed point type shall belong to the perfect result set.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"25_G.2.3"}),"\n",(0,i.jsxs)("p",{children:["The possibility of overflow in the result of a predefined arithmetic operation or conversion yielding a result of a fixed point type T is analogous to that for floating point types, except for being related to the base range instead of the safe range. If all of the permitted results belong to the base range of T, then the implementation shall deliver one of the permitted results; otherwise, ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"26_G.2.3"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if T'Machine","_","Overflows is True, the implementation shall either deliver one of the permitted results or raise Constraint","_","Error;",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"27_G.2.3"}),(0,i.jsxs)("li",{children:["if T'Machine","_","Overflows is False, the result is implementation defined. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.a_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result of a fixed point arithmetic operation in overflow situations, when the Machine","_","Overflows attribute of the result type is False.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"inconsistencies-with-ada-83-1",children:"Inconsistencies With Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.b_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["Since the values of a fixed point type are now just the integer multiples of its ",(0,i.jsx)("em",{children:"small"}),", the possibility of using extra bits available in the chosen representation for extra accuracy rather than for increasing the base range would appear to be removed, raising the possibility that some fixed point expressions will yield less accurate results than in Ada 83. However, this is partially offset by the ability of an implementation to choose a smaller default ",(0,i.jsx)("em",{children:"small"})," than before. Of course, if it does so for a type T then T'Small will have a different value than it previously had.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.c_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The accuracy requirements in the case of incompatible ",(0,i.jsx)("em",{children:"smalls"})," are relaxed to foster wider support for nonbinary ",(0,i.jsx)("em",{children:"smalls"}),". If this relaxation is exploited for a type that was previously supported, lower accuracy could result; however, there is no particular incentive to exploit the relaxation in such a case. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-83-2",children:"Wording Changes from Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.d_G.2.3"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The fixed point accuracy requirements are now expressed without reference to model or safe numbers, largely because the full generality of the former model was never exploited in the case of fixed point types (particularly in regard to operand perturbation). Although the new formulation in terms of perfect result sets and close result sets is still verbose, it can be seen to distill down to two cases: ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.e_G.2.3"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["a case where the result must be the exact result, if the exact result is representable, or, if not, then either one of the adjacent values of the type (in some subcases only one of those adjacent values is allowed);",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"27.f_G.2.3"}),(0,i.jsxs)("li",{children:["a case where the accuracy is not specified by the language. ",(0,i.jsx)("br",{})]})]})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-2012",children:"Wording Changes from Ada 2012"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"27.g/5_G.2.3"}),(0,i.jsx)(h.A,{items:["AI12-0300-1"]}),(0,i.jsx)(r.A,{type:"aarm",aarm:"correction",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{})," Reworded the fixed","*","integer accuracy requirements to clarify that the only allowed integer type in such operations is Standard.Integer. We make this correction as readers of the Reference Manual have been confused on this point. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)("a",{id:"Subclause_G.2.4"}),"\n",(0,i.jsx)(n.h2,{id:"g24--accuracy-requirements-for-the-elementary-functions",children:"G.2.4  Accuracy Requirements for the Elementary Functions"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["In the strict mode, the performance of Numerics.Generic","_","Elementary","_","Functions shall be as specified here. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements-3",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"2_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["When an exception is not raised, the result of evaluating a function in an instance ",(0,i.jsx)("em",{children:"EF"})," of Numerics.Generic","_","Elementary","_","Functions belongs to a ",(0,i.jsx)("em",{children:"result interval"}),", defined as the smallest model interval of ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type that contains all the values of the form ",(0,i.jsx)("em",{children:"f"})," \xb7 (1.0 + ",(0,i.jsx)("em",{children:"d"}),"), where ",(0,i.jsx)("em",{children:"f"})," is the exact value of the corresponding mathematical function at the given parameter values, ",(0,i.jsx)("em",{children:"d"})," is a real number, and |",(0,i.jsx)("em",{children:"d"}),"| is less than or equal to the function's ",(0,i.jsx)("em",{children:"maximum relative error"}),". The function delivers a value that belongs to the result interval when both of its bounds belong to the safe range of ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type; otherwise, ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3_G.2.4"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Machine","_","Overflows is True, the function either delivers a value that belongs to the result interval or raises Constraint","_","Error, signaling overflow;",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4_G.2.4"}),(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Machine","_","Overflows is False, the result is implementation defined. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.a_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result of an elementary function reference in overflow situations, when the Machine","_","Overflows attribute of the result type is False.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"5_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["The maximum relative error exhibited by each function is as follows: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"6_G.2.4"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["2.0 \xb7 ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Model","_","Epsilon, in the case of the Sqrt, Sin, and Cos functions;",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"7_G.2.4"}),(0,i.jsxs)("li",{children:["4.0 \xb7 ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Model","_","Epsilon, in the case of the Log, Exp, Tan, Cot, and inverse trigonometric functions; and",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"8_G.2.4"}),(0,i.jsxs)("li",{children:["8.0 \xb7 ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Model","_","Epsilon, in the case of the forward and inverse hyperbolic functions. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(l.A,{children:"9_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["The maximum relative error exhibited by the exponentiation operator, which depends on the values of the operands, is (4.0 + |Right \xb7 log(Left)| / 32.0) \xb7 ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Model","_","Epsilon.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"10_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["The maximum relative error given above applies throughout the domain of the forward trigonometric functions when the Cycle parameter is specified. When the Cycle parameter is omitted, the maximum relative error given above applies only when the absolute value of the angle parameter X is less than or equal to some implementation-defined ",(0,i.jsx)("em",{children:"angle threshold"}),", which shall be at least ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Machine","_","Radix \u230a",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Machine","_","Mantissa/2\u230b. Beyond the angle threshold, the accuracy of the forward trigonometric functions is implementation defined. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"10.a_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The value of the ",(0,i.jsx)("em",{children:"angle threshold"}),", within which certain elementary functions, complex arithmetic operations, and complex elementary functions yield results conforming to a maximum relative error bound.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"10.b_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The accuracy of certain elementary functions for parameters beyond the angle threshold.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"10.c_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The angle threshold indirectly determines the amount of precision that the implementation has to maintain during argument reduction. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"11/5_G.2.4"}),"\n",(0,i.jsx)(h.A,{items:["AI95-00434-01","AI12-0451-1"]}),"\n",(0,i.jsxs)("p",{children:["The prescribed results specified in ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.1",children:"A.5.1"})," for certain functions at particular parameter values take precedence over the maximum relative error bounds; effectively, they narrow to a single value the result interval allowed by the maximum relative error bounds. Additional rules with a similar effect are given by Table G.1 for the inverse trigonometric functions, at particular parameter values for which the mathematical result is possibly not a model number of ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type (or is, indeed, even transcendental). In each table entry, the values of the parameters are such that the result lies on the axis between two quadrants; the corresponding accuracy rule, which takes precedence over the maximum relative error bounds, is that the result interval is the model interval of ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type associated with the exact mathematical result given in the table.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"12/1_G.2.4"}),"\n",(0,i.jsxs)("p",{children:[(0,i.jsx)("em",{children:"This paragraph was deleted."}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"13_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["The last line of the table is meant to apply when ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Signed","_","Zeros is False; the two lines just above it, when ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type'Signed","_","Zeros is True and the parameter Y has a zero value with the indicated sign.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"14_G.2.4"}),"\n",(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Table G.1: Tightly Approximated Elementary Function Results"}),(0,i.jsx)("strong",{children:"Function"}),(0,i.jsx)("strong",{children:"Value of X"}),(0,i.jsx)("strong",{children:"Value of Y"}),(0,i.jsxs)("strong",{children:["Exact Result ",(0,i.jsx)("br",{}),"when Cycle ",(0,i.jsx)("br",{}),"Specified"]}),(0,i.jsxs)("strong",{children:["Exact Result ",(0,i.jsx)("br",{}),"when Cycle ",(0,i.jsx)("br",{}),"Omitted"]}),"Arcsin1.0n.a.Cycle/4.0\u03c0/2.0Arcsin\u20131.0n.a.\u2013Cycle/4.0\u2013\u03c0/2.0Arccos0.0n.a.Cycle/4.0\u03c0/2.0Arccos\u20131.0n.a.Cycle/2.0\u03c0Arctan and Arccot0.0positiveCycle/4.0\u03c0/2.0Arctan and Arccot0.0negative\u2013Cycle/4.0\u2013\u03c0/2.0Arctan and Arccotnegative+0.0Cycle/2.0\u03c0Arctan and Arccotnegative\u20130.0\u2013Cycle/2.0\u2013\u03c0Arctan and Arccotnegative0.0Cycle/2.0\u03c0The amount by which the result of an inverse trigonometric function is allowed to spill over into a quadrant adjacent to the one corresponding to the principal branch, as given in ",(0,i.jsx)("a",{href:"/docs/arm/AA-A/AA-A.5#Subclause_A.5.1",children:"A.5.1"}),", is limited. The rule is that the result belongs to the smallest model interval of ",(0,i.jsx)("em",{children:"EF"}),".Float","_","Type that contains both boundaries of the quadrant corresponding to the principal branch. This rule also takes precedence over the maximum relative error bounds, effectively narrowing the result interval allowed by them.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"15_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["Finally, the following specifications also take precedence over the maximum relative error bounds: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"16_G.2.4"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["The absolute value of the result of the Sin, Cos, and Tanh functions never exceeds one.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"17_G.2.4"}),(0,i.jsxs)("li",{children:["The absolute value of the result of the Coth function is never less than one.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"18_G.2.4"}),(0,i.jsxs)("li",{children:["The result of the Cosh function is never less than one. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-advice",children:"Implementation Advice"}),"\n",(0,i.jsx)(l.A,{children:"19_G.2.4"}),"\n",(0,i.jsxs)("p",{children:["The versions of the forward trigonometric functions without a Cycle parameter should not be implemented by calling the corresponding version with a Cycle parameter of 2.0","*","Numerics.Pi, since this will not provide the required accuracy in some portions of the domain. For the same reason, the version of Log without a Base parameter should not be implemented by calling the corresponding version with a Base parameter of Numerics.e. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"19.a.1/2_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-advice",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"For elementary functions, the forward trigonometric functions without a Cycle parameter should not be implemented by calling the corresponding version with a Cycle parameter. Log without a Base parameter should not be implemented by calling Log with a Base parameter.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-83-3",children:"Wording Changes from Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"19.a_G.2.4"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The semantics of Numerics.Generic","_","Elementary","_","Functions differs from Generic","_","Elementary","_","Functions as defined in ISO/IEC DIS 11430 (for Ada 83) in the following ways related to the accuracy specified for strict mode: ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"19.b_G.2.4"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["The maximum relative error bounds use the Model","_","Epsilon attribute instead of the Base'Epsilon attribute.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"19.c_G.2.4"}),(0,i.jsxs)("li",{children:["The accuracy requirements are expressed in terms of result intervals that are model intervals. On the one hand, this facilitates the description of the required results in the presence of underflow; on the other hand, it slightly relaxes the requirements expressed in ISO/IEC DIS 11430. ",(0,i.jsx)("br",{})]}),(0,i.jsx)("a",{id:"Subclause_G.2.5"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"g25--performance-requirements-for-random-number-generation",children:"G.2.5  Performance Requirements for Random Number Generation"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.5"}),"\n",(0,i.jsxs)("p",{children:["In the strict mode, the performance of Numerics.Float","_","Random and Numerics.Discrete","_","Random shall be as specified here. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements-4",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"2_G.2.5"}),"\n",(0,i.jsxs)("p",{children:["Two different calls to the time-dependent Reset procedure shall reset the generator to different states, provided that the calls are separated in time by at least one second and not more than fifty years.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3_G.2.5"}),"\n",(0,i.jsxs)("p",{children:["The implementation's representations of generator states and its algorithms for generating random numbers shall yield a period of at least 231\u20132; much longer periods are desirable but not required.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"4/5_G.2.5"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["The implementations of Numerics.Float","_","Random.Random and Numerics.Discrete","_","Random.Random shall pass at least 85% of the individual trials in a suite of statistical tests. For Numerics.Float","_","Random, the tests are applied directly to the floating point values generated (that is, they are not converted to integers first), while for Numerics.Discrete","_","Random they are applied to the generated values of various discrete types. Each test suite performs 6 different tests, with each test repeated 10 times, yielding a total of 60 individual trials. An individual trial is deemed to pass if the chi-square value (or other statistic) calculated for the observed counts or distribution falls within the range of values corresponding to the 2.5 and 97.5 percentage points for the relevant degrees of freedom (that is, it shall be neither too high nor too low). For the purpose of determining the degrees of freedom, measurement categories are combined whenever the expected counts are fewer than 5. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.a_G.2.5"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"In the floating point random number test suite, the generator is reset to a time-dependent state at the beginning of the run. The test suite incorporates the following tests, adapted from D. E. Knuth, ",(0,i.jsx)("em",{children:"The Art of Computer Programming, vol. 2: Seminumerical Algorithms."}),"  In the descriptions below, the given number of degrees of freedom is the number before reduction due to any necessary combination of measurement categories with small expected counts; it is one less than the number of measurement categories. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.b_G.2.5"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Proportional Distribution Test (a variant of the Equidistribution Test). The interval 0.0 .. 1.0 is partitioned into ",(0,i.jsx)("em",{children:"K"})," subintervals. ",(0,i.jsx)("em",{children:"K"})," is chosen randomly between 4 and 25 for each repetition of the test, along with the boundaries of the subintervals (subject to the constraint that at least 2 of the subintervals have a width of 0.001 or more). 5000 random floating point numbers are generated. The counts of random numbers falling into each subinterval are tallied and compared with the expected counts, which are proportional to the widths of the subintervals. The number of degrees of freedom for the chi-square test is ",(0,i.jsx)("em",{children:"K"}),"\u20131.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.c_G.2.5"}),(0,i.jsxs)("li",{children:["Gap Test. The bounds of a range ",(0,i.jsx)("em",{children:"A"})," .. ",(0,i.jsx)("em",{children:"B"}),", with 0.0 \u2264 ",(0,i.jsx)("em",{children:"A"})," ","<"," ",(0,i.jsx)("em",{children:"B"})," \u2264 1.0, are chosen randomly for each repetition of the test, subject to the constraint that 0.2 \u2264 ",(0,i.jsx)("em",{children:"B"}),"\u2013",(0,i.jsx)("em",{children:"A"})," \u2264 0.6. Random floating point numbers are generated until 5000 falling into the range ",(0,i.jsx)("em",{children:"A"})," .. ",(0,i.jsx)("em",{children:"B"})," have been encountered. Each of these 5000 is preceded by a \u201cgap\u201d (of length greater than or equal to 0) of consecutive random numbers not falling into the range ",(0,i.jsx)("em",{children:"A"})," .. ",(0,i.jsx)("em",{children:"B"}),". The counts of gaps of each length from 0 to 15, and of all lengths greater than 15 lumped together, are tallied and compared with the expected counts. Let ",(0,i.jsx)("em",{children:"P"})," = ",(0,i.jsx)("em",{children:"B"}),"\u2013",(0,i.jsx)("em",{children:"A"}),". The probability that a gap has a length of ",(0,i.jsx)("em",{children:"L"})," is (1\u2013",(0,i.jsx)("em",{children:"P"}),") ",(0,i.jsx)("em",{children:"L"})," \xb7 ",(0,i.jsx)("em",{children:"P"})," for ",(0,i.jsx)("em",{children:"L"})," \u2264 15, while the probability that a gap has a length of 16 or more is (1\u2013",(0,i.jsx)("em",{children:"P"}),") 16. The number of degrees of freedom for the chi-square test is 16.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.d_G.2.5"}),(0,i.jsxs)("li",{children:["Permutation Test. 5000 tuples of 4 different random floating point numbers are generated. (An entire 4-tuple is discarded in the unlikely event that it contains any two exactly equal components.) The counts of each of the 4! = 24 possible relative orderings of the components of the 4-tuples are tallied and compared with the expected counts. Each of the possible relative orderings has an equal probability. The number of degrees of freedom for the chi-square test is 23.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.e_G.2.5"}),(0,i.jsxs)("li",{children:["Increasing-Runs Test. Random floating point numbers are generated until 5000 increasing runs have been observed. An \u201cincreasing run\u201d is a sequence of random numbers in strictly increasing order; it is followed by a random number that is strictly smaller than the preceding random number. (A run under construction is entirely discarded in the unlikely event that one random number is followed immediately by an exactly equal random number.) The decreasing random number that follows an increasing run is discarded and not included with the next increasing run. The counts of increasing runs of each length from 1 to 4, and of all lengths greater than 4 lumped together, are tallied and compared with the expected counts. The probability that an increasing run has a length of ",(0,i.jsx)("em",{children:"L"})," is 1/",(0,i.jsx)("em",{children:"L"}),"! \u2013 1/(",(0,i.jsx)("em",{children:"L"}),"+1)! for ",(0,i.jsx)("em",{children:"L"})," \u2264 4, while the probability that an increasing run has a length of 5 or more is 1/5!. The number of degrees of freedom for the chi-square test is 4.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.f_G.2.5"}),(0,i.jsxs)("li",{children:["Decreasing-Runs Test. The test is similar to the Increasing Runs Test, but with decreasing runs.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.g_G.2.5"}),(0,i.jsxs)("li",{children:["Maximum-of-",(0,i.jsx)("em",{children:"t"})," Test (with ",(0,i.jsx)("em",{children:"t"})," = 5). 5000 tuples of 5 random floating point numbers are generated. The maximum of the components of each 5-tuple is determined and raised to the 5th power. The uniformity of the resulting values over the range 0.0 .. 1.0 is tested as in the Proportional Distribution Test. ",(0,i.jsx)("br",{})]})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.h_G.2.5"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"In the discrete random number test suite, Numerics.Discrete","_","Random is instantiated as described below. The generator is reset to a time-dependent state after each instantiation. The test suite incorporates the following tests, adapted from D. E. Knuth (",(0,i.jsx)("em",{children:"op. cit."}),") and other sources. The given number of degrees of freedom for the chi-square test is reduced by any necessary combination of measurement categories with small expected counts, as described above. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"4.i_G.2.5"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Equidistribution Test. In each repetition of the test, a number ",(0,i.jsx)("em",{children:"R"})," between 2 and 30 is chosen randomly, and Numerics.Discrete","_","Random is instantiated with an integer subtype whose range is 1 .. ",(0,i.jsx)("em",{children:"R"}),". 5000 integers are generated randomly from this range. The counts of occurrences of each integer in the range are tallied and compared with the expected counts, which have equal probabilities. The number of degrees of freedom for the chi-square test is ",(0,i.jsx)("em",{children:"R"}),"\u20131.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.j_G.2.5"}),(0,i.jsxs)("li",{children:["Simplified Poker Test. Numerics.Discrete","_","Random is instantiated once with an enumeration subtype representing the 13 denominations (Two through Ten, Jack, Queen, King, and Ace) of an infinite deck of playing cards. 2000 \u201cpoker\u201d hands (5-tuples of values of this subtype) are generated randomly. The counts of hands containing exactly ",(0,i.jsx)("em",{children:"K"})," different denominations (1 \u2264 ",(0,i.jsx)("em",{children:"K"})," \u2264 5) are tallied and compared with the expected counts. The probability that a hand contains exactly ",(0,i.jsx)("em",{children:"K"})," different denominations is given by a formula in Knuth. The number of degrees of freedom for the chi-square test is 4.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.k_G.2.5"}),(0,i.jsxs)("li",{children:["Coupon Collector's Test. Numerics.Discrete","_","Random is instantiated in each repetition of the test with an integer subtype whose range is 1 .. ",(0,i.jsx)("em",{children:"R"}),", where ",(0,i.jsx)("em",{children:"R"})," varies systematically from 2 to 11. Integers are generated randomly from this range until each value in the range has occurred, and the number ",(0,i.jsx)("em",{children:"K"})," of integers generated is recorded. This constitutes a \u201ccoupon collector's segment\u201d of length ",(0,i.jsx)("em",{children:"K"}),". 2000 such segments are generated. The counts of segments of each length from ",(0,i.jsx)("em",{children:"R"})," to ",(0,i.jsx)("em",{children:"R"}),"+29, and of all lengths greater than ",(0,i.jsx)("em",{children:"R"}),"+29 lumped together, are tallied and compared with the expected counts. The probability that a segment has any given length is given by formulas in Knuth. The number of degrees of freedom for the chi-square test is 30.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.l_G.2.5"}),(0,i.jsxs)("li",{children:["Craps Test (Lengths of Games). Numerics.Discrete","_","Random is instantiated once with an integer subtype whose range is 1 .. 6 (representing the six numbers on a die). 5000 craps games are played, and their lengths are recorded. (The length of a craps game is the number of rolls of the pair of dice required to produce a win or a loss. A game is won on the first roll if the dice show 7 or 11; it is lost if they show 2, 3, or 12. If the dice show some other sum on the first roll, it is called the ",(0,i.jsx)("em",{children:"point"}),", and the game is won if and only if the point is rolled again before a 7 is rolled.) The counts of games of each length from 1 to 18, and of all lengths greater than 18 lumped together, are tallied and compared with the expected counts. For 2 \u2264 ",(0,i.jsx)("em",{children:"S"})," \u2264 12, let ",(0,i.jsx)("em",{children:"D"})," ",(0,i.jsx)("em",{children:"S"})," be the probability that a roll of a pair of dice shows the sum ",(0,i.jsx)("em",{children:"S"}),", and let ",(0,i.jsx)("em",{children:"Q"})," ",(0,i.jsx)("em",{children:"S"}),"(",(0,i.jsx)("em",{children:"L"}),") = ",(0,i.jsx)("em",{children:"D"})," ",(0,i.jsx)("em",{children:"S"})," \xb7 (1 \u2013 (",(0,i.jsx)("em",{children:"D"})," ",(0,i.jsx)("em",{children:"S"})," + ",(0,i.jsx)("em",{children:"D"})," 7)) ",(0,i.jsx)("em",{children:"L"}),"\u20132 \xb7 (",(0,i.jsx)("em",{children:"D"})," ",(0,i.jsx)("em",{children:"S"})," + ",(0,i.jsx)("em",{children:"D"})," 7). Then, the probability that a game has a length of 1 is ",(0,i.jsx)("em",{children:"D"})," 7 + ",(0,i.jsx)("em",{children:"D"})," 11 + ",(0,i.jsx)("em",{children:"D"})," 2 + ",(0,i.jsx)("em",{children:"D"})," 3 + ",(0,i.jsx)("em",{children:"D"})," 12 and, for ",(0,i.jsx)("em",{children:"L"})," ",">"," 1, the probability that a game has a length of ",(0,i.jsx)("em",{children:"L"})," is ",(0,i.jsx)("em",{children:"Q"})," 4(",(0,i.jsx)("em",{children:"L"}),") + ",(0,i.jsx)("em",{children:"Q"})," 5(",(0,i.jsx)("em",{children:"L"}),") + ",(0,i.jsx)("em",{children:"Q"})," 6(",(0,i.jsx)("em",{children:"L"}),") + ",(0,i.jsx)("em",{children:"Q"})," 8(",(0,i.jsx)("em",{children:"L"}),") + ",(0,i.jsx)("em",{children:"Q"})," 9(",(0,i.jsx)("em",{children:"L"}),") + ",(0,i.jsx)("em",{children:"Q"})," 10(",(0,i.jsx)("em",{children:"L"}),"). The number of degrees of freedom for the chi-square test is 18.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.m_G.2.5"}),(0,i.jsxs)("li",{children:["Craps Test (Lengths of Passes). This test is similar to the last, but enough craps games are played for 3000 losses to occur. A string of wins followed by a loss is called a ",(0,i.jsx)("em",{children:"pass"}),", and its length is the number of wins preceding the loss. The counts of passes of each length from 0 to 7, and of all lengths greater than 7 lumped together, are tallied and compared with the expected counts. For ",(0,i.jsx)("em",{children:"L"})," \u2265 0, the probability that a pass has a length of ",(0,i.jsx)("em",{children:"L"})," is ",(0,i.jsx)("em",{children:"W"})," ",(0,i.jsx)("em",{children:"L"})," \xb7 (1\u2013",(0,i.jsx)("em",{children:"W"}),"), where ",(0,i.jsx)("em",{children:"W"}),", the probability that a game ends in a win, is 244.0/495.0. The number of degrees of freedom for the chi-square test is 8.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"4.n_G.2.5"}),(0,i.jsxs)("li",{children:["Collision Test. Numerics.Discrete","_","Random is instantiated once with an integer or enumeration type representing binary bits. 15 successive calls on the Random function are used to obtain the bits of a 15-bit binary integer between 0 and 32767. 3000 such integers are generated, and the number of collisions (integers previously generated) is counted and compared with the expected count. A chi-square test is not used to assess the number of collisions; rather, the limits on the number of collisions, corresponding to the 2.5 and 97.5 percentage points, are (from formulas in Knuth) 112 and 154. The test passes if and only if the number of collisions is in this range. ",(0,i.jsx)("br",{})]}),(0,i.jsx)("a",{id:"Subclause_G.2.6"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"g26--accuracy-requirements-for-complex-arithmetic",children:"G.2.6  Accuracy Requirements for Complex Arithmetic"}),"\n",(0,i.jsx)(l.A,{children:"1_G.2.6"}),"\n",(0,i.jsxs)("p",{children:["In the strict mode, the performance of Numerics.Generic","_","Complex","_","Types and Numerics.Generic","_","Complex","_","Elementary","_","Functions shall be as specified here. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-requirements-5",children:"Implementation Requirements"}),"\n",(0,i.jsx)(l.A,{children:"2/5_G.2.6"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["When an exception is not raised, the result of evaluating a real function of an instance ",(0,i.jsx)("em",{children:"CT"})," of Numerics.Generic","_","Complex","_","Types (that is, a function that yields a value of subtype ",(0,i.jsx)("em",{children:"CT"}),".Real'Base or ",(0,i.jsx)("em",{children:"CT"}),".Imaginary) belongs to a result interval defined as for a real elementary function (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.4",children:"G.2.4"}),").",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"3/5_G.2.6"}),"\n",(0,i.jsx)(h.A,{items:["AI12-0453-1"]}),"\n",(0,i.jsxs)("p",{children:["When an exception is not raised, each component of the result of evaluating a complex function of such an instance, or of an instance of Numerics.Generic","_","Complex","_","Elementary","_","Functions obtained by instantiating the latter with ",(0,i.jsx)("em",{children:"CT"})," (that is, a function that yields a value of subtype ",(0,i.jsx)("em",{children:"CT"}),".Complex), also belongs to a ",(0,i.jsx)("em",{children:"result interval"}),". The result intervals for the components of the result are either defined by a ",(0,i.jsx)("em",{children:"maximum relative error"})," bound or by a ",(0,i.jsx)("em",{children:"maximum box error"})," bound. When the result interval for the real (resp., imaginary) component is defined by maximum relative error, it is defined as for that of a real function, relative to the exact value of the real (resp., imaginary) part of the result of the corresponding mathematical function. When defined by maximum box error, the result interval for a component of the result is the smallest model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real that contains all the values of the corresponding part of ",(0,i.jsx)("em",{children:"f"})," \xb7 (1.0 + ",(0,i.jsx)("em",{children:"d"}),"), where ",(0,i.jsx)("em",{children:"f"})," is the exact complex value of the corresponding mathematical function at the given parameter values, ",(0,i.jsx)("em",{children:"d"})," is complex, and |",(0,i.jsx)("em",{children:"d"}),"| is less than or equal to the given maximum box error. The function delivers a value that belongs to the result interval (or a value both of whose components belong to their respective result intervals) when both bounds of the result interval(s) belong to the safe range of ",(0,i.jsx)("em",{children:"CT"}),".Real; otherwise, ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.a_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The maximum relative error could be specified separately for each component, but we do not take advantage of that freedom here. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.b_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"Note that ",(0,i.jsx)("em",{children:"f"})," \xb7 (1.0 + ",(0,i.jsx)("em",{children:"d"}),") defines a small circular region of the complex plane centered at ",(0,i.jsx)("em",{children:"f"}),", and the result intervals for the real and imaginary components of the result define a small rectangular box containing that circle. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.c_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"reason",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"Box error is used when the computation of the result risks loss of significance in a component due to cancellation. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"3.d_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"ramification",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The components of a complex function that exhibits bounded relative error in each component have to have the correct sign. In contrast, one of the components of a complex function that exhibits bounded box error may have the wrong sign, since the dimensions of the box containing the result are proportional to the modulus of the mathematical result and not to either component of the mathematical result individually. Thus, for example, the box containing the computed result of a complex function whose mathematical result has a large modulus but lies very close to the imaginary axis might well straddle that axis, allowing the real component of the computed result to have the wrong sign. In this case, the distance between the computed result and the mathematical result is, nevertheless, a small fraction of the modulus of the mathematical result. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"4_G.2.6"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"CT"}),".Real'Machine","_","Overflows is True, the function either delivers a value that belongs to the result interval (or a value both of whose components belong to their respective result intervals) or raises Constraint","_","Error, signaling overflow;",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"5_G.2.6"}),(0,i.jsxs)("li",{children:["if ",(0,i.jsx)("em",{children:"CT"}),".Real'Machine","_","Overflows is False, the result is implementation defined. ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"5.a_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The result of a complex arithmetic operation or complex elementary function reference in overflow situations, when the Machine","_","Overflows attribute of the corresponding real type is False.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"6/2_G.2.6"}),"\n",(0,i.jsx)(h.A,{items:["AI95-00434-01"]}),"\n",(0,i.jsxs)("p",{children:["The error bounds for particular complex functions are tabulated in Table G.2. In the table, the error bound is given as the coefficient of ",(0,i.jsx)("em",{children:"CT"}),".Real'Model","_","Epsilon.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"7/1_G.2.6"}),"\n",(0,i.jsxs)("p",{children:[(0,i.jsx)("em",{children:"This paragraph was deleted."}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"8_G.2.6"}),"\n",(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Table G.2: Error Bounds for Particular Complex Functions"}),(0,i.jsx)("strong",{children:"Function or Operator"}),(0,i.jsxs)("strong",{children:["Nature of ",(0,i.jsx)("br",{}),"Result"]}),(0,i.jsxs)("strong",{children:["Nature of ",(0,i.jsx)("br",{}),"Bound"]}),(0,i.jsx)("strong",{children:"Error Bound"}),"Modulusrealmax. rel. error3.0Argumentrealmax. rel. error4.0Compose","_","From","_",'Polarcomplexmax. rel. error3.0"',"*",'" (both operands complex)complexmax. box error5.0"/" (right operand complex)complexmax. box error13.0Sqrtcomplexmax. rel. error6.0Logcomplexmax. box error13.0Exp (complex parameter)complexmax. rel. error7.0Exp (imaginary parameter)complexmax. rel. error2.0Sin, Cos, Sinh, and Coshcomplexmax. rel. error11.0Tan, Cot, Tanh, and Cothcomplexmax. rel. error35.0inverse trigonometriccomplexmax. rel. error14.0inverse hyperboliccomplexmax. rel. error14.0The maximum relative error given above applies throughout the domain of the Compose',"_","From","_","Polar function when the Cycle parameter is specified. When the Cycle parameter is omitted, the maximum relative error applies only when the absolute value of the parameter Argument is less than or equal to the angle threshold (see ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.4",children:"G.2.4"}),"). For the Exp function, and for the forward hyperbolic (resp., trigonometric) functions, the maximum relative error given above likewise applies only when the absolute value of the imaginary (resp., real) component of the parameter X (or the absolute value of the parameter itself, in the case of the Exp function with a parameter of pure-imaginary type) is less than or equal to the angle threshold. For larger angles, the accuracy is implementation defined. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"8.a_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-defined",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"The accuracy of certain complex arithmetic operations and certain complex elementary functions for parameters (or components thereof) beyond the angle threshold.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"9_G.2.6"}),"\n",(0,i.jsxs)("p",{children:["The prescribed results specified in ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.1#Subclause_G.1.2",children:"G.1.2"})," for certain functions at particular parameter values take precedence over the error bounds; effectively, they narrow to a single value the result interval allowed by the error bounds for a component of the result. Additional rules with a similar effect are given below for certain inverse trigonometric and inverse hyperbolic functions, at particular parameter values for which a component of the mathematical result is transcendental. In each case, the accuracy rule, which takes precedence over the error bounds, is that the result interval for the stated result component is the model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real associated with the component's exact mathematical value. The cases in question are as follows: ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"10_G.2.6"}),"\n",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["When the parameter X has the value zero, the real (resp., imaginary) component of the result of the Arccot (resp., Arccoth) function is in the model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real associated with the value \u03c0/2.0.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"11_G.2.6"}),(0,i.jsxs)("li",{children:["When the parameter X has the value one, the real component of the result of the Arcsin function is in the model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real associated with the value \u03c0/2.0.",(0,i.jsx)("br",{})]}),(0,i.jsx)(l.A,{children:"12_G.2.6"}),(0,i.jsxs)("li",{children:["When the parameter X has the value \u20131.0, the real component of the result of the Arcsin (resp., Arccos) function is in the model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real associated with the value \u2013\u03c0/2.0 (resp., \u03c0). ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"12.a_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"discussion",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"It is possible to give many other prescribed results in which a component of the parameter is restricted to a similar model interval when the parameter X is appropriately restricted to an easily testable portion of the domain. We follow the proposed ISO/IEC standard for Generic","_","Complex","_","Elementary","_","Functions (for Ada 83) in not doing so, however. ",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(l.A,{children:"13/2_G.2.6"}),"\n",(0,i.jsx)(h.A,{items:["AI95-00434-01"]}),"\n",(0,i.jsxs)("p",{children:["The amount by which a component of the result of an inverse trigonometric or inverse hyperbolic function is allowed to spill over into a quadrant adjacent to the one corresponding to the principal branch, as given in ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.1#Subclause_G.1.2",children:"G.1.2"}),", is limited. The rule is that the result belongs to the smallest model interval of ",(0,i.jsx)("em",{children:"CT"}),".Real that contains both boundaries of the quadrant corresponding to the principal branch. This rule also takes precedence over the maximum error bounds, effectively narrowing the result interval allowed by them.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(l.A,{children:"14_G.2.6"}),"\n",(0,i.jsxs)("p",{children:["Finally, the results allowed by the error bounds are narrowed by one further rule: The absolute value of each component of the result of the Exp function, for a pure-imaginary parameter, never exceeds one. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h4,{id:"implementation-advice-1",children:"Implementation Advice"}),"\n",(0,i.jsx)(l.A,{children:"15_G.2.6"}),"\n",(0,i.jsxs)("p",{children:["The version of the Compose","_","From","_","Polar function without a Cycle parameter should not be implemented by calling the corresponding version with a Cycle parameter of 2.0","*","Numerics.Pi, since this will not provide the required accuracy in some portions of the domain. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"15.a.1/2_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"implementation-advice",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)("strong",{}),"For complex arithmetic, the Compose","_","From","_","Polar function without a Cycle parameter should not be implemented by calling Compose","_","From","_","Polar with a Cycle parameter.",(0,i.jsx)("br",{})]})})]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(n.h4,{id:"wording-changes-from-ada-83-4",children:"Wording Changes from Ada 83"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{children:"15.a_G.2.6"}),(0,i.jsx)(r.A,{type:"aarm",aarm:"note",children:(0,i.jsxs)(n.p,{children:["The semantics of Numerics.Generic","_","Complex","_","Types and Numerics.Generic","_","Complex","_","Elementary","_","Functions differs from Generic","_","Complex","_","Types and Generic","_","Complex","_","Elementary","_","Functions as defined in ISO/IEC CDs 13813 and 13814 (for Ada 83) in ways analogous to those identified for the elementary functions in ",(0,i.jsx)("a",{href:"/docs/arm/AA-G/AA-G.2#Subclause_G.2.4",children:"G.2.4"}),". In addition, we do not generally specify the signs of zero results (or result components), although those proposed standards do. ",(0,i.jsx)("br",{})]})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}}}]);